<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>VScode Vue 配置</title>
      <link href="/archives/762e924f.html"/>
      <url>/archives/762e924f.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>适用版本：<code>Vue3</code></p><p>最后修改时间：2023-04-16</p></blockquote><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p><strong>💡主题</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">One Dark Pro</span><br></pre></td></tr></table></figure><p><strong>💡文件图标</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Material Icon Theme</span><br></pre></td></tr></table></figure><p><strong>💡格式化代码（设置保存后格式化和默认格式化规则）</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Prettier - Code formatter</span><br></pre></td></tr></table></figure><p><strong>💡画图（黑色主题不推荐）</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Draw.io Integration</span><br></pre></td></tr></table></figure><p><strong>💡查看 <code>git</code> 历史版本</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git Graph</span><br></pre></td></tr></table></figure><p><strong>💡查看 <code>git</code> 改动代码的信息</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GitLens — Git supercharged</span><br></pre></td></tr></table></figure><p><strong>💡用浏览器打开页面</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open in browser</span><br></pre></td></tr></table></figure><p><strong>💡用临时服务器打开页面（保存后实时预览）</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Live Server</span><br></pre></td></tr></table></figure><p><strong>💡验证英文拼写正确</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Code Spell Checker</span><br></pre></td></tr></table></figure><p><strong>💡<code>Vue</code> 代码高亮</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vetur</span><br></pre></td></tr></table></figure><p><strong>💡映射 <code>VScode</code> 上的断点到 <code>chrome</code> 上，方便调试</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Debugger for Chrome</span><br></pre></td></tr></table></figure><p><strong>💡<code>Vue</code> 开发必备插件</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue Volar extension Pack</span><br></pre></td></tr></table></figure><p><strong>💡自动修改闭合标签</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Auto Rename Tag</span><br></pre></td></tr></table></figure><br><h3 id="VScode-配置"><a href="#VScode-配置" class="headerlink" title="VScode 配置"></a><code>VScode</code> 配置</h3><p><strong>🔖 <code>ctrl</code> + <code>p</code> 唤起文件搜索框，查找 <code>settings.json</code> 文件，填入配置！</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;security.workspace.trust.untrustedFiles&quot;</span>: <span class="string">&quot;open&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;open-in-browser.default&quot;</span>: <span class="string">&quot;Chrome&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;liveServer.settings.CustomBrowser&quot;</span>: <span class="string">&quot;chrome&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;liveServer.settings.donotShowInfoMsg&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;editor.unicodeHighlight.nonBasicASCII&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;workbench.iconTheme&quot;</span>: <span class="string">&quot;material-icon-theme&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;workbench.colorTheme&quot;</span>: <span class="string">&quot;One Dark Pro Darker&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;editor.mouseWheelZoom&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;editor.fontFamily&quot;</span>: <span class="string">&quot;JetBrains Mono, Consolas, &#x27;Courier New&#x27;, monospace&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;editor.cursorBlinking&quot;</span>: <span class="string">&quot;smooth&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;editor.formatOnSave&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;terminal.integrated.defaultProfile.windows&quot;</span>: <span class="string">&quot;Git Bash&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;eslint.format.enable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;[javascript]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;dbaeumer.vscode-eslint&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;[html]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;[css]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;sibiraj-s.vscode-scss-formatter&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;[scss]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;sibiraj-s.vscode-scss-formatter&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;[vue]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;dbaeumer.vscode-eslint&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;[jsonc]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;cSpell.userWords&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h3 id="快捷模板"><a href="#快捷模板" class="headerlink" title="快捷模板"></a>快捷模板</h3><p><strong>🔖 <code>ctrl</code> + <code>p</code> 唤起文件搜索框，查找 <code>vue.json</code> 文件，填入配置！</strong></p><h4 id="Vue2-模板"><a href="#Vue2-模板" class="headerlink" title="Vue2 模板"></a><code>Vue2</code> 模板</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;create Vue2&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;vue&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;body&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;&lt;template&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;  &lt;div&gt;$0&lt;/div&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&lt;/template&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&lt;script&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;export default &#123;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;  name: &#x27;$&#123;TM_FILENAME_BASE&#125;&#x27;,&quot;</span>,</span><br><span class="line">      <span class="string">&quot;  components: &#123;&#125;,&quot;</span>,</span><br><span class="line">      <span class="string">&quot;  props: &#123;&#125;,&quot;</span>,</span><br><span class="line">      <span class="string">&quot;  data () &#123;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;    return &#123;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;    &#125;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;  &#125;,&quot;</span>,</span><br><span class="line">      <span class="string">&quot;  watch: &#123;&#125;,&quot;</span>,</span><br><span class="line">      <span class="string">&quot;  computed: &#123;&#125;,&quot;</span>,</span><br><span class="line">      <span class="string">&quot;  methods: &#123;&#125;,&quot;</span>,</span><br><span class="line">      <span class="string">&quot;  created () &#123;&#125;,&quot;</span>,</span><br><span class="line">      <span class="string">&quot;  mounted () &#123;&#125;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&#125;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&lt;/script&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&lt;style scoped lang=&#x27;scss&#x27;&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&lt;/style&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;vue2 template&quot;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="Vue3-模板"><a href="#Vue3-模板" class="headerlink" title="Vue3 模板"></a><code>Vue3</code> 模板</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;create Vue3&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;vue3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;body&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;&lt;template&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;  &lt;div&gt;$0&lt;/div&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&lt;/template&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&lt;script&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;import &#123; reactive, toRefs, onBeforeMount, onMounted &#125; from &#x27;vue&#x27;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;export default &#123;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;  name: &#x27;$&#123;TM_FILENAME_BASE&#125;&#x27;,&quot;</span>,</span><br><span class="line">      <span class="string">&quot;  setup () &#123;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;    const data = reactive(&#123;&#125;)&quot;</span>,</span><br><span class="line">      <span class="string">&quot;    onBeforeMount(() =&gt; &#123;&#125;)&quot;</span>,</span><br><span class="line">      <span class="string">&quot;    onMounted(() =&gt; &#123;&#125;)&quot;</span>,</span><br><span class="line">      <span class="string">&quot;    return &#123;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;      ...toRefs(data)&quot;</span>,</span><br><span class="line">      <span class="string">&quot;    &#125;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;  &#125;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&#125;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&lt;/script&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&lt;style scoped lang=&#x27;scss&#x27;&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&lt;/style&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;vue3 template&quot;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br><br><p><strong>📌最后：希望本文能够给您提供帮助，文章中有不懂或不正确的地方，请在下方评论区💬留言！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> VScode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP算法实现详解</title>
      <link href="/archives/824d4432.html"/>
      <url>/archives/824d4432.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>本文中出现的动画均使用 Powerpoint 制作，需要源文件的可以私聊分享。</p></blockquote><p>“字符串匹配”是一个传统的算法问题。给定一个文本串 S 和模式串 T，判断 T 是否为 S 的子串。如果是，则返回 T 在 S 中首次出现的位置；如果不是，则返回 -1。</p><p>对于这类算法问题，KMP 算法是一种较好的解决方案💡。</p><p>🔍下面来看看 KMP 算法的优势：</p><p><strong>👎暴力算法演示图：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230406B01N001.gif"></p><p><strong>👍KMP 算法演示图：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230406B01N002.gif"></p><p>从上面两张演示图中，可以看出 KMP 算法的优势在于“匹配更快”和“遍历指针无需回溯”。</p><br><h3 id="算法介绍"><a href="#算法介绍" class="headerlink" title="算法介绍"></a>算法介绍</h3><p>下面是来自百度百科🌐的介绍：</p><blockquote><p>KMP 算法是一种改进的字符串匹配算法，由 D.E.Knuth，J.H.Morris 和 V.R.Pratt 提出的，因此人们称它为克努特—莫里斯—普拉特操作（简称 KMP 算法）。KMP 算法的核心是利用匹配失败后的信息，尽量减少模式串与主串的匹配次数以达到快速匹配的目的。具体实现就是通过一个 next() 函数实现，<a href="https://baike.baidu.com/item/%E5%87%BD%E6%95%B0/18686609">函数</a>本身包含了模式串的局部匹配信息。KMP 算法的<a href="https://baike.baidu.com/item/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/1894057">时间复杂度</a>O(m+n) 。</p></blockquote><p>该算法相对于 Brute-Force（暴力）算法有比较大的改进，主要是消除了主串指针的回溯，从而使算法效率有了某种程度的提高。</p><p>在分析 KMP 算法前，需要先了解以下名词：</p><p><strong>👉<font color="blue">文本串</font>：</strong>由数字、字母、下划线组成的一串字符。这里指需要被搜索的主串 <code>abababaa</code>。</p><p><strong>👉<font color="green">模式串</font>：</strong>比主串短的一串字符。这里指用于匹配的字符串 <code>abaa</code>。</p><p><strong>👉模式匹配：</strong>在<font color="blue">文本串</font>中找出和<font color="green">模式串</font>相同的子串。</p><p><strong>👉遍历指针：</strong>遍历<font color="blue">文本串</font>的指针。</p><p>1️⃣ 传统暴力算法在每次匹配失败后，都需要从<font color="green">模式串</font>的第一个字符开始匹配。如下图，我们可以看到遍历指针在匹配失败后会出现回溯现象。</p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230406B01N001.gif"></p><p>2️⃣ KMP 算法的强大之处在于能够避免遍历失败后的指针回溯。如下图，我们可以看到遍历指针只会往后走，变化的只有<font color="green">模式串</font>的匹配位置。</p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230406B01N002.gif"></p><p>💡 KMP 算法能够避免指针回溯的关键就在 <strong>next 数组</strong>上。它的思想就是记录已经匹配成功的<font color="green">模式串</font>元素，让当前匹配失败的<font color="blue">文本串</font>元素不需要从<font color="green">模式串</font>首元素重新开始匹配，而是从匹配成功的<font color="green">模式串</font>元素的后一个元素开始匹配。</p><p>🔖 <strong>next 数组</strong>能够让我们知道，当<font color="blue">文本串</font>元素和<font color="green">模式串</font>元素匹配失败后，应该跳转到<font color="green">模式串</font>的哪个元素重新开始匹配。如下表：</p><table><thead><tr><th align="center">下标</th><th align="center">0</th><th align="center">1</th><th align="center">2</th><th align="center">3</th></tr></thead><tbody><tr><td align="center"><strong>元素</strong></td><td align="center">a</td><td align="center">b</td><td align="center">a</td><td align="center">a</td></tr><tr><td align="center"><strong>next 数组</strong></td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">1</td></tr></tbody></table><p>例如，当最后一个元素“a”（下标为 3）在匹配失败后，<font color="blue">文本串</font>不需要从<font color="green">模式串</font>第一个元素“a”（下标为 0）的位置重新开始匹配，而是到第二个元素“b”（下标为 1）开始匹配。如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230406B01N003.gif"></p><p>现在只要能够求解出 <strong>next 数组</strong>，实现“字符串匹配”就不成问题了。</p><br><h3 id="next数组详解"><a href="#next数组详解" class="headerlink" title="next数组详解"></a>next数组详解</h3><h4 id="总体分析"><a href="#总体分析" class="headerlink" title="总体分析"></a>总体分析</h4><blockquote><p>给出结论：next 数组除了表示匹配失败后下一次匹配的元素下标，还表示当前下标和整个模式串的共同前缀的长度。</p></blockquote><p>从“<strong>next 数组</strong>能够让我们知道，当<font color="blue">文本串</font>元素和<font color="green">模式串</font>元素匹配失败后，应该跳转到<font color="green">模式串</font>的哪个元素重新开始匹配。”这句话中，我们得出两个结论：</p><ol><li><strong>next 数组</strong>与<font color="green">模式串</font>有关，那么它的长度应该等于<font color="green">模式串</font>的长度。</li><li>当<font color="blue">文本串</font>元素和<font color="green">模式串</font>中下标为 i 的元素匹配失败后，需要获取 <code>next[i]</code> 的值来找到下一次匹配的<font color="green">模式串</font>元素，拿来与当前<font color="blue">文本串</font>元素进行匹配。</li></ol><p>❓那么，假设现在有<font color="green">模式串 T</font> =“ababaab”，如何求它的 <strong>next 数组</strong>？</p><p>⁉️<strong>next 数组</strong>能够知道匹配失败后下一次匹配的<font color="green">模式串</font>元素，就说明在此元素之前的元素都是匹配成功的，这样才能避免重新从<font color="green">模式串</font>第一个元素开始匹配。那些匹配成功的元素就是与整个<font color="green">模式串</font>前缀相同的元素，所以也有人叫它“prefix 数组”。</p><p>例如，现在有<font color="green">模式串</font> <code>ababaab</code>，下标为“5”的元素是“a”（橙色），求 <code>next[5]</code> 的值？</p><p>从<font color="green">模式串</font>中可以看出，匹配成功的元素（绿色）应该是“ab<font color="green">aba</font><font color="orange">a</font>b”，与其对应的前缀元素是（红色）“<font color="red">aba</font>ba<font color="orange">a</font>b”。</p><p>为了匹配效率，其<strong>对应的前缀元素应该是最长的</strong>。即在前缀“a”和“aba”中，选择“aba”。</p><p>那么，<code>next[5]</code> 的值应该是“3”。因为前面的“aba”是已经匹配成功的元素，所以只要从下标为“3”的元素开始匹配就行。由于数组从 0 开始，那么也说明“3”是匹配成功元素的长度。</p><p>❗现在我们就能够得出：next 数组除了表示匹配失败后下一次匹配的元素下标，还表示 <strong>当前下标</strong> 和 <strong>整个<font color="green">模式串</font></strong> 的 <strong>共同前缀的长度</strong>。<font color="gray">（PS：在我看来，这是最容易理解的。）</font></p><h4 id="实现推导"><a href="#实现推导" class="headerlink" title="实现推导"></a>实现推导</h4><blockquote><p>可以选择直接跳到代码实现。</p></blockquote><p>知道 next 数组的具体含义，现在我们回到问题：“假设现在有<font color="green">模式串 T</font> =“ababaab”，如何求它的 next 数组？”。我们可以利用动态规划的思想，将它拆分成一个个子串。不过在此之前需要用一些变量来表示它们。</p><p>👉 指针“i”用来遍历的<font color="green">模式串</font>元素，即 <code>next[i]</code> 中的“i”。（橙色）</p><p>👉 指针“j”指向共同前缀的后一个元素（待匹配元素）。“j”指针前面的元素都是已经匹配成功的共同前缀。作用是找共同前缀。具体用处看下面的推导……</p><ol><li><p>“<font color="orange">a</font>”：i = 0，整个<font color="green">模式串</font>只有一个元素时，匹配失败直接继续匹配即可，即 <code>next[0] = 0</code>。</p></li><li><p>“a<font color="orange">b</font>”：i = 1，整个<font color="green">模式串</font>只有两个元素时，如果“a”匹配成功、“b”匹配失败，那么说明当前 i 下标指向的元素需要重新从“a”开始匹配，即 <code>next[1] = 0</code>。</p></li><li><p>“ab<font color="orange">a</font>”：i = 2，整个<font color="green">模式串</font>有三个及以上数量的元素时，这时候在“首元素”和“当前匹配元素”中就有其他元素，也就意味着存在不需要从“首元素”开始匹配的可能。那么我们让“j = 0”即指向“首元素 a”。那么就可以开始找共同前缀了。我们直接把 <code>T[j]</code> 和 <code>T[i - 1]</code> 进行比对，一个是整个<font color="green">模式串</font>的前缀，一个是当前下标的前缀。<code>T[j] != T[i - 1]</code> 说明它们不是共同前缀，此时共同前缀的长度为 0，即 <code>next[2] = 0</code>。</p></li><li><p>“aba<font color="orange">b</font>”：i = 3，这时候还不存在共同前缀，那么就意味着我们还需要从“j = 0”开始找共同前缀。此时<code>T[0] == T[2]</code>，说明存在共同前缀“a”。即 <code>next[3] = 1</code>。</p></li><li><p>“abab<font color="orange">a</font>”：i = 4，这时已经存在一个共同前缀“a”，说明“j”需要后移一位“j = 1”，判断第二位是否也属于共同前缀。此时 <code>T[1] == T[3]</code>，说明存在共同前缀“ab”。那么 <code>next[4] = 2</code>。</p></li><li><p>“ababa<font color="orange">a</font>”：i = 5，这时的共同前缀为“ab”、j = 2，由于 <code>T[2] == T[4]</code>，即 <code>next[5] = 3</code>。</p></li><li><p>“ababaa<font color="orange">b</font>”：i = 6，这时的共同前缀为“aba”、j = 3。前面都是匹配成功的例子，如果出现匹配失败该怎么办？继续往下看。此时 <code>T[3] != T[5]</code>，说明当前共同前缀已被推翻，需要获取新的共同前缀。</p><p>如下图，此时“b”不等于“a”。但是 next 数组中储存有“b”的共同前缀。<code>next[3] = 1</code>，说明它共同前缀的长度为 1 且匹配失败后下一个要匹配的元素的下标为 1。让 j = 1，继续开始匹配。此时“b”不等于“a”。继续回溯，j = 0，此时“a”等于“a”，说明公共前缀有 1 个，即 <code>next[6] = 1</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230406B01N004.png"></p></li></ol><p><strong>求出<font color="green">模式串 T</font> =“ababaab”的 next 数组为：</strong></p><table><thead><tr><th align="center">下标</th><th align="center">0</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th></tr></thead><tbody><tr><td align="center"><strong>元素</strong></td><td align="center">a</td><td align="center">b</td><td align="center">a</td><td align="center">b</td><td align="center">a</td><td align="center">a</td><td align="center">b</td></tr><tr><td align="center"><strong>next 数组</strong></td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">1</td></tr></tbody></table><p><strong>next 数组的推导视频如下：</strong></p><p>🚫暂时无法播放…</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>✅在匹配成功的时候，直接将共同前缀的长度加 1 即可。共同前缀的长度是指针“j”的值。如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230406B01N005.png"></p><p>❎在匹配失败的时候，就需要考虑边界了。如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230406B01N006.png"></p><p>0️⃣如果只是正常的回溯并没有什么问题，直接让指针“j”指向下一个要匹配的元素（<code>j = next[j]</code>）。匹配成功后将共同前缀的长度加 1 即可。</p><p>例如，在第一次匹配失败时，需要“j”指针回溯，回到“j”元素的共同前缀的后一位元素的位置（<code>next[j] = 3</code>）。“j = 3”进入第二次匹配，如果匹配成功。此时共同前缀的长度是 3，所以 <code>next[i] = 3 + 1 = 4</code>。</p><p>1️⃣如果是当“j”指针无法再回溯时，出现匹配失败的情况，就说明当前“i”元素已经没有共同前缀了，即 <code>next[i] = 0</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 求next数组</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pattern 模式串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> next数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] getNext(String pattern) &#123;</span><br><span class="line">    <span class="keyword">int</span> len = pattern.length();</span><br><span class="line">    <span class="keyword">if</span> (len &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span>[] next = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">    next[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line">        <span class="comment">// 第二个元素都是“0”</span></span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">            next[i] = <span class="number">0</span>;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 匹配成功</span></span><br><span class="line">        <span class="keyword">if</span> (pattern.charAt(i - <span class="number">1</span>) == pattern.charAt(j)) &#123;</span><br><span class="line">            next[i] = j + <span class="number">1</span>;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 匹配失败 </span></span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 特殊情况，j == 0，指针无法回溯。</span></span><br><span class="line">            next[i] = <span class="number">0</span>;</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            j = next[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>✨求 next 数组的代码是实现了，但是不够优雅，感觉还能再简洁一点。所以就有人想出从“j = -1”开始，那么 <code>next[0] = -1</code>。这样做的好处是“匹配成功”、“匹配失败且 <code>j == 0</code>”和“<code>i == 1</code>”的情况可以统一处理。只是需要在使用时，将“-1”看作“0”，防止下标越界。</p><ul><li>当“匹配成功”时： <code>next[i] = j + 1</code>、<code>i++</code>、<code>j++</code>。</li><li>当“<code>i == 1</code>”或“匹配失败且 <code>j == 0</code>”时：这两种情况可以归结为“j == -1”，因为它们的最终结果都是 <code>next[i] = 0</code>、<code>j = 0</code>、<code>i++</code>，都满足 <code>next[i] = j + 1 = 0</code>、<code>i++</code>、<code>j++</code>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 求next数组</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pattern 模式串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> next数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getNext(String pattern) &#123;</span><br><span class="line">    <span class="keyword">int</span> len = pattern.length();</span><br><span class="line">    <span class="keyword">if</span> (len &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span>[] next = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">    next[<span class="number">0</span>] = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>, j = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j == -<span class="number">1</span> || pattern.charAt(i - <span class="number">1</span>) == pattern.charAt(j)) &#123;</span><br><span class="line">            next[i] = j + <span class="number">1</span>;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            j = next[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>求出 next 数组，就可以直接使用 KMP 算法，代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">kmp</span><span class="params">(String haystack, String needle)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] next = getNext(needle);</span><br><span class="line">    <span class="comment">// kmp算法</span></span><br><span class="line">    <span class="keyword">int</span> n = haystack.length();</span><br><span class="line">    <span class="keyword">int</span> m = needle.length();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="comment">// 匹配失败，找next，直到匹配成功。除非“j=0”，即第一个元素就匹配失败。</span></span><br><span class="line">        <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; haystack.charAt(i) != needle.charAt(j)) &#123;</span><br><span class="line">            <span class="comment">// 适配next数组存在-1的情况。</span></span><br><span class="line">            j = next[j] == -<span class="number">1</span> ? <span class="number">0</span> : next[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 匹配成功</span></span><br><span class="line">        <span class="keyword">if</span> (haystack.charAt(i) == needle.charAt(j)) &#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 全部匹配完，那么j指针已经遍历完模式串，直接返回时第一个匹配项的下标。</span></span><br><span class="line">        <span class="keyword">if</span> (j == m) &#123;</span><br><span class="line">            <span class="keyword">return</span> i - m + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h3 id="nextValue数组详解"><a href="#nextValue数组详解" class="headerlink" title="nextValue数组详解"></a>nextValue数组详解</h3><p><strong>next value 数组</strong>是对 <strong>next数组</strong> 的优化，主要就是减少无效回溯的次数。对比图如下表：</p><table><thead><tr><th align="center">下标</th><th align="center">0</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th></tr></thead><tbody><tr><td align="center"><strong>元素</strong></td><td align="center">a</td><td align="center">b</td><td align="center">a</td><td align="center">b</td><td align="center">a</td><td align="center">a</td><td align="center">b</td></tr><tr><td align="center"><strong>next 数组</strong></td><td align="center">-1</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">1</td></tr><tr><td align="center"><strong>nextValue 数组</strong></td><td align="center">-1</td><td align="center">0</td><td align="center">-1</td><td align="center">0</td><td align="center">-1</td><td align="center">3</td><td align="center">0</td></tr></tbody></table><p>如何减少无效回溯的次数，如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230406B01N007.png"></p><p>当“X”指针指向的元素匹配失败需要回溯时，它需要回到“Y”指针指向的元素再进行匹配。但是我们可以看出“X”和“Y”指针指向的元素都是“b”，那么说明这是一次无效匹配，它依旧会匹配失败。<strong>next value 数组</strong>就是对这种情况进行优化。</p><p>既然知道“Y”指针指向的元素照样会匹配失败，那就跳过“Y”，直接拿“Y”的 <strong>next</strong> 值“0”继续匹配。那么原来需要回溯两次，现在只需要回溯一次。</p><p><strong>代码实现如下：</strong></p><p>从上面可以得出，<strong>next value 数组</strong>就是根据 <strong>next 数组</strong>的值，判断回溯的元素和当前元素是否相同？相同则跳过本次回溯；不同则保留原始 next 值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 求next value数组</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pattern 模式串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> next value数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] getNextValue(String pattern) &#123;</span><br><span class="line">    <span class="keyword">int</span> len = pattern.length();</span><br><span class="line">    <span class="keyword">if</span> (len &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span>[] next = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">    next[<span class="number">0</span>] = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>, j = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j == -<span class="number">1</span> || pattern.charAt(i - <span class="number">1</span>) == pattern.charAt(j)) &#123;</span><br><span class="line">            <span class="comment">// 在获取next值时，做一次优化。如果当前元素和回溯元素相同，则跳过本次回溯。</span></span><br><span class="line">            next[i] = pattern.charAt(i) == pattern.charAt(j + <span class="number">1</span>) ? next[j + <span class="number">1</span>] : j + <span class="number">1</span>;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            j = next[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h3 id="例题训练"><a href="#例题训练" class="headerlink" title="例题训练"></a>例题训练</h3><h4 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h4><p><strong>难度：</strong><font color="orange">中等</font> | <code>LeetCode</code> | 🔗<a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/">链接直达</a></p><p>给你两个字符串 <code>haystack</code> 和 <code>needle</code>，请你在 <code>haystack</code> 字符串中找出 <code>needle</code> 字符串的第一个匹配项的下标（下标从 0 开始）。如果 <code>needle</code> 不是 <code>haystack</code> 的一部分，则返回  <code>-1</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：haystack = &quot;sadbutsad&quot;, needle = &quot;sad&quot;</span><br><span class="line">输出：0</span><br><span class="line">解释：&quot;sad&quot; 在下标 0 和 6 处匹配。</span><br><span class="line">第一个匹配项的下标是 0 ，所以返回 0 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：haystack = &quot;leetcode&quot;, needle = &quot;leeto&quot;</span><br><span class="line">输出：-1</span><br><span class="line">解释：&quot;leeto&quot; 没有在 &quot;leetcode&quot; 中出现，所以返回 -1 。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>1 &lt;= <code>haystack.length</code>，<code>needle.length</code> &lt;= 10<sup>4</sup></li><li><code>haystack</code> 和 <code>needle</code> 仅由小写英文字符组成</li></ul><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">strStr</span><span class="params">(String haystack, String needle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] next = getNextValue(needle);</span><br><span class="line">        <span class="comment">// kmp算法</span></span><br><span class="line">        <span class="keyword">int</span> n = haystack.length();</span><br><span class="line">        <span class="keyword">int</span> m = needle.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">// 匹配失败，找next，直到匹配成功。除非“j=0”，即第一个元素就匹配失败。</span></span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; haystack.charAt(i) != needle.charAt(j)) &#123;</span><br><span class="line">                j = next[j] == -<span class="number">1</span> ? <span class="number">0</span> : next[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 匹配成功</span></span><br><span class="line">            <span class="keyword">if</span> (haystack.charAt(i) == needle.charAt(j)) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 全部匹配完，那么j指针已经遍历完模式串，直接返回时第一个匹配项的下标。</span></span><br><span class="line">            <span class="keyword">if</span> (j == m) &#123;</span><br><span class="line">                <span class="keyword">return</span> i - m + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 求next value数组</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pattern 模式串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> next value数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] getNextValue(String pattern) &#123;</span><br><span class="line">        <span class="keyword">int</span> len = pattern.length();</span><br><span class="line">        <span class="keyword">if</span> (len &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] next = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">        next[<span class="number">0</span>] = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>, j = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j == -<span class="number">1</span> || pattern.charAt(i - <span class="number">1</span>) == pattern.charAt(j)) &#123;</span><br><span class="line">                <span class="comment">// 在获取next值时，做一次优化。如果当前元素和回溯元素相同，则跳过本次回溯。</span></span><br><span class="line">                next[i] = pattern.charAt(i) == pattern.charAt(j + <span class="number">1</span>) ? next[j + <span class="number">1</span>] : j + <span class="number">1</span>;</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                j = next[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><p><strong>📌最后：希望本文能够给您提供帮助，文章中有不懂或不正确的地方，请在下方评论区💬留言！</strong></p><p><strong>🔗参考文献：</strong></p><p>🌐 <a href="https://baike.baidu.com/item/kmp%E7%AE%97%E6%B3%95/10951804">kmp算法 –百度百科</a></p><p>▶️ <a href="https://www.bilibili.com/video/BV16X4y137qw/?spm_id_from=333.337.search-card.all.click&vd_source=a9a236c4d6e5c5350c70b71ee0727b8c">bilibili - KMP算法之求next数组代码讲解；甩手掌柜凡三岁. –凡三岁爱学习</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 算法笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> KMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/archives/364ea8cc.html"/>
      <url>/archives/364ea8cc.html</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>上个世纪90年代，Eric Gamma、Richard Helm、Ralph Johnson、John Vlissides 等 4 人合作出版了《设计模式：可复用面向对象软件的基础》。而“设计模式”这个概念也是从中而来。这 4 人也被称为 the Gang of Four，简称 GoF。</p><p>“设计模式”共 23 种，是一种能够提高代码可复用性、可维护性、可读性、稳健性以及安全性的解决方案。它是解决某些特定问题的一般性概念，能够根据需求进行调整，用于解决代码中反复出现的设计问题。</p><p>合理利用“设计模式”开发会给我们带来很多的便利。而如何合理的运用就在于学会“找到变化，封装变化”。</p><br><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><p>本系列将通过 Java（面向对象编程语言）和 UML（统一建模语言）来表示各种设计模式。</p><p>需要了解的内容有：</p><p>👉<a href="/archives/f28a8c2c.html" title="面向对象设计">面向对象设计</a></p><p>👉<a href="/archives/9ff5e7c2.html" title="类图 Class Diagram">类图 Class Diagram</a></p><p>👉<a href="/archives/6ff5f77.html" title="顺序图 Sequence Diagram">顺序图 Sequence Diagram</a></p><h4 id="基本开发原则"><a href="#基本开发原则" class="headerlink" title="基本开发原则"></a>基本开发原则</h4><ul><li><strong>单一原则（Dont’t Repeat Yourself）抽象出一个共同的解决方法来避免冗余重复的代码。</strong>不过在使用单一原则时应该避免过度关心代码重用和设计。</li></ul><ul><li><strong>简单原则（Keep It Simple and Stupid）指代码应该容易理解、编写和改变。</strong>简单代码应该是让别人理解代码逻辑时更简单，迭代时更轻松。将来可能需要，但现在却用不上的代码不要写。</li></ul><ul><li><p><strong>迪米特法则（Law of Demeter）又称“最少原则”指出一个类应该与它直接相关的类通信和每一个类应该知道自己需要的最少知识。</strong>或者说一个类应该了解的只有与它有直接关联的类，包括依赖、关联、聚合、组合等。在简化局部代码时应该注意整体，避免引入很多过小的中间类和方法。适用“迪米特法则”可以降低代码耦合度。</p></li><li><p><strong>表达原则（Program Intently and Expressively）指编程时应该有清晰的编程意图并通过代码明确地表达出来。</strong>好的命名规范对于他人理解代码有着很多的帮助。好的注释应该是“为什么”注释。</p></li></ul><ul><li><p><strong>面向对象原则（SOLID）包括单一职责原则（Single Responsibility Principle）、开闭原则（Open Closed Principle）、里氏替换原则（Liskov Substitution Principle）、接口隔离原则（Interface Segregation Principle）、依赖倒置原则（Dependence Inversion Principle）。</strong>其中开闭原则也被称为“面向对象设计中最重要的原理”。</p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B01N001.png"></p></li><li><p><strong>惯例优于配置原则（Convention over Configuration）是将一些在编程中公认的配置方式和约定信息作为内部缺省的默认规则来使用。</strong>惯例原则通过提供隐形的公共知识，来减少开发人员重复决策的次数。</p></li><li><p><strong>关注点分离原则（Separation of Concerns）是将计算机程序分隔为不同部分的设计原则。</strong>先将复杂问题做合理的分解，再分别仔细研究程序上特定问题的侧面（关注点），最后解决得出的接口，再合成整体的解决思路。</p></li><li><p><strong>契约式设计原则（Design by Contract）指在软件设计时应该为软件组件定义一种精确和可验证的接口规范。这种规范要包括使用的预置条件、后置条件和不变条件，用来扩展普通抽象数据类型的定义。</strong>如何做好 API 接口设计有 6 点：</p><ol><li>让接口职责分离；</li><li>API 命名很重要；</li><li>尽量少创造自定义错误码；</li><li>同一接口要做到幂等；</li><li>安全策略；</li><li>版本管理。</li></ol></li><li><p><strong>职责分离原则将不同变化原因引起的类或方法修改行为拆分到不同类或方法里去。</strong>或者说将模块看成一个大的对象，按面向对象设计去拆分职责。</p></li></ul><h4 id="六大设计原则"><a href="#六大设计原则" class="headerlink" title="六大设计原则"></a>六大设计原则</h4><ul><li><strong>迪米特法则（Law of Demeter）又称“最少原则”指出一个类应该与它直接相关的类通信和每一个类应该知道自己需要的最少知识。</strong>或者说一个类应该了解的只有与它有直接关联的类，包括依赖、关联、聚合、组合等。在简化局部代码时应该注意整体，避免引入很多过小的中间类和方法。</li></ul><ul><li><strong>单一职责原则（Single Responsibility Principle）指对象应该仅具有一种单一的功能。</strong>或者说当一个类存在一个甚至多个因素使它发生改变时，就应该拆分它。例如：实体类仅仅包含数据、设置数据和包含数据。如果一个实体类包含其他服务，那么在其他服务所依赖的外部接口变更时，就需要修改类，违背了单一职责原则。</li><li><strong>开闭原则（Open Closed Principle）指程序对于扩展开放，对于修改封闭。</strong>开闭原则往往运用于框架设计，而对于变更频繁的业务来说，有时会显得过分冗余。</li><li><strong>里氏替换原则（Liskov Substitution Principle）指子类应该能够完全替换掉它的基类。</strong>或者说应该尽量保持子类和父类方法行为的一致性，子类只完成父类期待的事情。例如：父类希望子类去实现相应的数据格式验证，否则就抛出输入异常。但是子类却在实现时添加了数据库的数据校验，还增加了数据库数据验证异常，这就违背了里氏替换原则。</li><li><strong>接口隔离原则（Interface Segregation Principle）指多个特定客户端接口要好于一个宽泛用途的接口。</strong>或者说不能强迫类使用它们不想使用的方法。例如：在一个增删改查的接口中加入同步的方法，并非所有持久层类都需要使用到同步方法，这就违背了接口隔离原则。</li><li><strong>依赖倒置原则（Dependence Inversion Principle）认为一个方法应该遵从“依赖于抽象而不是一个实例”。</strong>依赖倒置原则是一种统一代码交互标准的软件设计方法，具体表现在：<ol><li><strong>高层模块不应该依赖底层模块，二者都应该依赖于抽象。</strong>例如有一个高层模块需要依赖底层模块时，我们不应该只把高层模块抽象为接口，这样一旦底层模块发生改变时，高层模块依然要修改。我们应该把它们间的依赖关系抽象出来，让高层抽象模块依赖底层抽象模块，在让高层模块和底层模块分别实现它们。以后即使底层模块发生改变，我们也不需要修改高层模块，因为它们间的依赖关系没有变化。</li><li><strong>抽象不应该依赖于细节，细节应该依赖于抽象。</strong></li><li><strong>好的抽象是具备一些共性规律并能经得起实践检验的抽象。</strong></li></ol></li></ul><br><h3 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h3><p>设计模式共 23 种，分别为创建型模式 5 种、结构型模式 7 种、行为型模式 11 种。</p><ul><li><strong>创建型模式</strong>提供创建对象的机制， 增加已有代码的灵活性和可复用性。</li><li><strong>结构型模式</strong>介绍如何将对象和类组装成较大的结构， 并同时保持结构的灵活和高效。</li><li><strong>行为模式</strong>负责对象间的高效沟通和职责委派。</li></ul><br><h3 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h3><p>创建型模式共 5 种，分别为工厂方法 Factory Method、抽象工厂 Abstract Factory、生成器 Builder、原型 Prototype、单例 Singleton。</p><p><strong>💡工厂方法模式（Factory Method）</strong>实现了对象创建时的多态。</p><p><strong>💡抽象工厂模式（Abstract Factory）</strong>本质上是为了寻找正确的抽象产品。</p><p><strong>💡生成器模式（Builder）</strong>实现了对象创建过程的多态。</p><p><strong>💡原型模式（Prototype）</strong>是一种将对象生成的责任代理给自己的模式。</p><p><strong>💡单例模式（Singleton）</strong>相当于强制实现了有限、唯一对象的生产。</p><h4 id="工厂方法-Factory-Method"><a href="#工厂方法-Factory-Method" class="headerlink" title="工厂方法 Factory Method"></a>工厂方法 Factory Method</h4><blockquote><p><strong>工厂方法模式</strong>是一种创建型设计模式，其在父类中提供一个创建对象的方法，允许子类决定实例化对象的类型。</p></blockquote><p>更多内容请点击👉<a href="/archives/26a33bd6.html" title="工厂方法 Factory Method">工厂方法 Factory Method</a></p><h4 id="抽象工厂-Abstract-Factory"><a href="#抽象工厂-Abstract-Factory" class="headerlink" title="抽象工厂 Abstract Factory"></a>抽象工厂 Abstract Factory</h4><blockquote><p><strong>抽象工厂模式</strong>是一种创建型设计模式， 它能创建一系列相关的对象， 而无需指定其具体类。</p></blockquote><p>更多内容请点击👉<a href="/archives/ece6d0ed.html" title="抽象工厂 Abstract Factory">抽象工厂 Abstract Factory</a></p><h4 id="生成器-Builder"><a href="#生成器-Builder" class="headerlink" title="生成器 Builder"></a>生成器 Builder</h4><blockquote><p><strong>生成器模式</strong>也叫“建造者模式”是一种创建型设计模式， 使你能够分步骤创建复杂对象。 该模式允许你使用相同的创建代码生成不同类型和形式的对象。</p></blockquote><p>更多内容请点击👉<a href="/archives/b53dcb9.html" title="生成器 Builder">生成器 Builder</a></p><h4 id="原型-Prototype"><a href="#原型-Prototype" class="headerlink" title="原型 Prototype"></a>原型 Prototype</h4><blockquote><p><strong>原型模式</strong>是一种创建型设计模式，使你能够复制已有对象，而又无需使代码依赖它们所属的类。</p></blockquote><p>更多内容请点击👉<a href="/archives/e3c62fc2.html" title="原型 Prototype">原型 Prototype</a></p><h4 id="单例-Singleton"><a href="#单例-Singleton" class="headerlink" title="单例 Singleton"></a>单例 Singleton</h4><blockquote><p><strong>单例模式</strong>是一种创建型设计模式， 让你能够保证一个类只有一个实例， 并提供一个访问该实例的全局节点。</p></blockquote><p>更多内容请点击👉<a href="/archives/7f38056c.html" title="单例 Singleton">单例 Singleton</a></p><br><h3 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h3><p>结构型模式共 7 种，分别为适配器 Adapter、桥接 Bridge、组合 Composite、装饰 Decorator、外观 Facade、享元 Flyweight、代理 Proxy。</p><p><strong>💡适配器模式 （Adapter）</strong>实现了不同接口功能之间的转换，为组件的快速复用提供了直接的解决办法。</p><p><strong>💡桥接模式（ Bridge）</strong>实现了抽象实体和抽象行为之间的永久绑定，往往与抽象工厂模式共同用于跨平台设计的场景。</p><p><strong>💡组合模式（ Composite）</strong>用于表达整体和部分的关系，可忽略单个对象和合成对象之间的差别，实际采用的是树状结构。</p><p><strong>💡装饰模式 （Decorator）</strong>通过代理方式实现了接口功能的多态，避免了大量子类的派生。适用于链状和树状的结构，但容易造成对象与装饰器之间耦合度过高。</p><p><strong>💡外观模式 （Facade）</strong>用于对子系统提供统一的接口。</p><p><strong>💡享元模式 （Flyweight）</strong>用于解决大对象重复创建损耗资源的问题，通过共享对象池来复用对象。</p><p><strong>💡代理模式 （Proxy）</strong>模式的结构与装饰模式相似，但侧重点不同，一种是修改对象的行为，另一种是控制访问。</p><h4 id="适配器-Adapter"><a href="#适配器-Adapter" class="headerlink" title="适配器 Adapter"></a>适配器 Adapter</h4><blockquote><p><strong>适配器模式</strong>是一种结构型设计模式，它能使接口不兼容的对象能够相互合作。</p></blockquote><p>更多内容请点击👉<a href="/archives/b54bb399.html" title="适配器 Adapter">适配器 Adapter</a></p><h4 id="桥接-Bridge"><a href="#桥接-Bridge" class="headerlink" title="桥接 Bridge"></a>桥接 Bridge</h4><blockquote><p><strong>桥接模式</strong>是一种结构型设计模式，可将一个大类或一系列紧密相关的类拆分为<strong>抽象</strong>和<strong>实现</strong>两个独立的<strong>层次结构</strong>，从而能在开发时分别使用。</p></blockquote><p>更多内容请点击👉<a href="/archives/90798859.html" title="桥接 Bridge">桥接 Bridge</a></p><h4 id="组合-Composite"><a href="#组合-Composite" class="headerlink" title="组合 Composite"></a>组合 Composite</h4><blockquote><p><strong>组合模式</strong>是一种结构型设计模式，你可以使用它将对象组合成树状结构，并且能像使用独立对象一样使用它们。</p></blockquote><p>更多内容请点击👉<a href="/archives/d504222d.html" title="组合 Composite">组合 Composite</a></p><h4 id="装饰-Decorator"><a href="#装饰-Decorator" class="headerlink" title="装饰 Decorator"></a>装饰 Decorator</h4><blockquote><p><strong>装饰模式</strong>是一种结构型设计模式，允许你通过将对象放入包含行为的特殊封装对象中来为原对象绑定新的行为。或者说允许动态地向一个现有的对象添加新的功能同时又不改变其结构，相当于对现有的对象进行了一个包装。所以装饰模式也称“包装器模式”。</p></blockquote><p>更多内容请点击👉<a href="/archives/6b25bc2a.html" title="装饰 Decorator">装饰 Decorator</a></p><h4 id="外观-Facade"><a href="#外观-Facade" class="headerlink" title="外观 Facade"></a>外观 Facade</h4><blockquote><p><strong>外观模式</strong>是一种结构型设计模式，能为程序库、框架或其他复杂类提供一个简单的接口或为子系统中的一组接口提供统一的接口。它定义了一个更高级别的接口，使子系统更易于使用。</p></blockquote><p>更多内容请点击👉<a href="/archives/e84744ee.html" title="外观 Facade">外观 Facade</a></p><h4 id="享元-Flyweight"><a href="#享元-Flyweight" class="headerlink" title="享元 Flyweight"></a>享元 Flyweight</h4><blockquote><p><strong>享元模式</strong>是一种结构型设计模式，它摒弃了在每个对象中保存所有数据的方式，通过共享多个对象所共有的相同状态，让你能在有限的内存容量中载入更多对象。</p></blockquote><p>更多内容请点击👉<a href="/archives/ae831028.html" title="享元 Flyweight">享元 Flyweight</a></p><h4 id="代理-Proxy"><a href="#代理-Proxy" class="headerlink" title="代理 Proxy"></a>代理 Proxy</h4><blockquote><p><strong>代理模式</strong>是一种结构型设计模式，让你能够提供对象的替代品或其占位符。代理控制着对于原对象的访问，并允许在将请求提交给对象前后进行一些处理。</p></blockquote><p>更多内容请点击👉<a href="/archives/9339e2b1.html" title="代理 Proxy">代理 Proxy</a></p><br><h3 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h3><p><strong>🔖 类行为型模型：</strong>使用继承的方式来关联不同类之间的行为。</p><p><strong>🔖 对象行为型模型：</strong>使用组合或聚合方式来分配不同类之间的行为。</p><p>行为型模式共 11 种，分别为责任链 Chain of Responsibility、命令 Command、迭代器 Iterator、中介者 Mediator、备忘录 Memento、观察者 Observer、状态 State、策略 Strategy、模板方法 Template Method、访问者 Visitor、解释器 Interpreter。</p><p><strong>💡责任链模式（Chain of Responsibility）</strong>用于链条状结构，将处理请求沿链条进行传递，动态指定职责的承担对象，由各自对象实现对应职责。</p><p><strong>💡命令模式（Command）</strong>将某个命令（函数方法）封装成对象进行传递，关注的维度是命令。</p><p><strong>💡迭代器模式（Iterator）</strong>大量应用于基础类库中，对重复遍历操作进行封装。</p><p><strong>💡中介者模式（Mediator）</strong>解耦对象之间的直接引用，在结构上是星型结构，保证了对象行为上的稳定性。</p><p><strong>💡备忘录模式（Memento）</strong>也叫快照模式，通常用于捕获一个对象的内部状态。</p><p><strong>💡观察者模式（Observer）</strong>经典 <code>MVC</code> 模式的变形，在结构上是星型结构，侧重于将观察者和被观察者代码解耦。</p><p><strong>💡状态模式（State）</strong>最常用的实现方式是状态机，大量应用于需要控制状态流转的系统中。</p><p><strong>💡策略模式（Strategy）</strong>将多个不同的算法封装成策略，适合应用于对计算效率有一定要求的系统。</p><p><strong>💡模板方法模式（Template Method）</strong>定义一个算法模板，并将具体的执行步骤延迟到子类中实现。</p><p><strong>💡访问者模式（Visitor）</strong>在对象级别中实际为树型结构，与抽象工厂模式类似。</p><p><strong>💡解释器模式（Interpreter）</strong>为某个语言（编程语言也是语言）定义它的语法表示。</p><h4 id="责任链-Chain-of-Responsibility"><a href="#责任链-Chain-of-Responsibility" class="headerlink" title="责任链 Chain of Responsibility"></a>责任链 Chain of Responsibility</h4><blockquote><p><strong>责任链模式</strong>是一种行为设计模式，允许你将请求沿着处理者链进行发送。收到请求后，每个处理者均可对请求进行处理，或将其传递给链上的下个处理者。简单来说就是通过构建一个处理流水线来对一次请求进行多次的处理。</p></blockquote><p>更多内容请点击👉<a href="/archives/16953163.html" title="责任链 Chain of Responsibility">责任链 Chain of Responsibility</a></p><h4 id="命令-Command"><a href="#命令-Command" class="headerlink" title="命令 Command"></a>命令 Command</h4><blockquote><p><strong>命令模式</strong>是一种行为设计模式，它可将请求转换为一个包含与请求相关的所有信息的独立对象。该转换让你能根据不同的请求将方法参数化、延迟请求执行或将其放入队列中，且能实现可撤销操作。</p></blockquote><p>更多内容请点击👉<a href="/archives/3849e3fb.html" title="命令 Command">命令 Command</a></p><h4 id="迭代器-Iterator"><a href="#迭代器-Iterator" class="headerlink" title="迭代器 Iterator"></a>迭代器 Iterator</h4><blockquote><p><strong>迭代器模式</strong>是一种行为设计模式，让你能在不暴露集合底层表现形式（列表、 栈和树等）的情况下遍历集合中所有的元素。</p></blockquote><p>更多内容请点击👉<a href="/archives/db977c49.html" title="迭代器 Iterator">迭代器 Iterator</a></p><h4 id="中介者-Mediator"><a href="#中介者-Mediator" class="headerlink" title="中介者 Mediator"></a>中介者 Mediator</h4><blockquote><p><strong>中介者模式</strong>是一种行为设计模式，能让你减少对象之间混乱无序的依赖关系。该模式会限制对象之间的直接交互，迫使它们通过一个中介者对象进行合作。</p></blockquote><p>更多内容请点击👉<a href="/archives/301a85f6.html" title="中介者 Mediator">中介者 Mediator</a></p><h4 id="备忘录-Memento"><a href="#备忘录-Memento" class="headerlink" title="备忘录 Memento"></a>备忘录 Memento</h4><blockquote><p><strong>备忘录模式</strong>（也称快照模式）是一种行为设计模式，允许在不暴露对象实现细节的情况下保存和恢复对象之前的状态。</p></blockquote><p>更多内容请点击👉<a href="/archives/d7446d4.html" title="备忘录 Memento">备忘录 Memento</a></p><h4 id="观察者-Observer"><a href="#观察者-Observer" class="headerlink" title="观察者 Observer"></a>观察者 Observer</h4><blockquote><p><strong>观察者模式</strong>（也称事件订阅者、监听者。）是一种行为设计模式，允许你定义一种订阅机制，可在对象事件发生时通知多个“观察”该对象的其他对象。这是对象之间的一对多依赖关系，这样当一个对象改变状态时，它的所有依赖项都会自动得到通知和更新。</p></blockquote><p>更多内容请点击👉<a href="/archives/c36f3b40.html" title="观察者 Observer">观察者 Observer</a></p><h4 id="状态-State"><a href="#状态-State" class="headerlink" title="状态 State"></a>状态 State</h4><blockquote><p><strong>状态模式</strong>是一种行为设计模式，让你能在一个对象的内部状态变化时改变其行为，使其看上去就像改变了自身所属的类一样。或者说通过控制状态的变化使其行为发生变化。</p></blockquote><p>更多内容请点击👉<a href="/archives/6547f9e5.html" title="状态 State">状态 State</a></p><h4 id="策略-Strategy"><a href="#策略-Strategy" class="headerlink" title="策略 Strategy"></a>策略 Strategy</h4><blockquote><p><strong>策略模式</strong>是一种行为设计模式，它能让你定义一系列算法，并将每种算法分别放入独立的类中，以使算法的对象能够相互替换。</p></blockquote><p>更多内容请点击👉<a href="/archives/ddad16ac.html" title="策略 Strategy">策略 Strategy</a></p><h4 id="模板方法-Template-Method"><a href="#模板方法-Template-Method" class="headerlink" title="模板方法 Template Method"></a>模板方法 Template Method</h4><blockquote><p><strong>模板方法模式</strong>是一种行为设计模式，它在超类中定义了一个算法的框架，允许子类在<strong>不修改结构</strong>的情况下重写算法的特定步骤。</p></blockquote><p>更多内容请点击👉<a href="/archives/f8dc46f4.html" title="模板方法 Template Method">模板方法 Template Method</a></p><h4 id="访问者-Visitor"><a href="#访问者-Visitor" class="headerlink" title="访问者 Visitor"></a>访问者 Visitor</h4><blockquote><p><strong>访问者模式</strong>是一种行为设计模式，它能将算法与其所作用的对象隔离开来。允许在运行时将一个或多个操作应用于一组对象，将<strong>操作</strong>与<strong>对象结构</strong>分离。</p></blockquote><p>更多内容请点击👉<a href="/archives/6ebc1a4e.html" title="访问者 Visitor">访问者 Visitor</a></p><h4 id="解释器-Interpreter"><a href="#解释器-Interpreter" class="headerlink" title="解释器 Interpreter"></a>解释器 Interpreter</h4><blockquote><p><strong>解释器模式</strong>是一种行为设计模式，用于定义语言的语法规则表示，并提供解释器来处理句子中的语法。</p></blockquote><p>更多内容请点击👉<a href="/archives/99128770.html" title="解释器 Interpreter">解释器 Interpreter</a></p><br><br><p><strong>📌最后：希望本文能够给您提供帮助，文章中有不懂或不正确的地方，请在下方评论区💬留言！</strong></p><p><strong>🔗参考文献：</strong></p><p>🌐 <a href="https://refactoringguru.cn/design-patterns#intro-patterns">设计模式 –refactoringguru</a></p><p>▶️ <a href="https://www.bilibili.com/video/BV1hY411Y7zR/?p=1&vd_source=a9a236c4d6e5c5350c70b71ee0727b8c">bilibili-趣学设计模式；黄靖锋. –拉勾教育</a></p><p>📖 图解设计模式 /（日）结城浩著；杨文轩译. –北京：人民邮电出版社，2017.1</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象工厂Abstract Factory</title>
      <link href="/archives/ece6d0ed.html"/>
      <url>/archives/ece6d0ed.html</url>
      
        <content type="html"><![CDATA[<h3 id="抽象工厂-Abstract-Factory"><a href="#抽象工厂-Abstract-Factory" class="headerlink" title="抽象工厂 Abstract Factory"></a>抽象工厂 Abstract Factory</h3><p><strong>抽象工厂模式</strong>是一种创建型设计模式， 它能创建一系列相关的对象， 而无需指定其具体类。</p><p>工厂模式分为：简单工厂、工厂方法、<strong>抽象工厂</strong>。</p><br><h3 id="为什么要使用？"><a href="#为什么要使用？" class="headerlink" title="为什么要使用？"></a>为什么要使用？</h3><p><strong>抽象工厂模式的对象职责：</strong></p><p><strong>创建一系列相关的对象， 而无需指定其具体类。</strong></p><p>例如现在有一个家具厂🏬（抽象工厂），对于购买者👨来说，他们并不关心家具厂的家具🛏️（抽象产品）是什么风格的；而对于创造者来说，他们必须设计各种风格的家具，以便更好的销售。</p><p>同一风格的不同家具是一种产品实现，制造同一风格家具的是一种工厂实现。又或者说顾客需要风格统一的家具，每个具体的家具工厂制作的家具都是同一风格。</p><p>家具的风格更新十分频繁，使用抽象工厂模式能够让我们不需要修改其他代码，只需要根据抽象工厂和抽象产品增加新风格的家具工厂和家具产品。</p><p>总的来说，使用者更关心一组产品的某些共性（有哪些家具），至于一些具体的实现（这些家具有多少种风格）并不在意。而创建者要找到正确的共性，并尽可能隐藏具体实现细节，始终围绕着提供符合共性的产品（不同风格的家具）。</p><br><h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><ul><li><strong>抽象工厂（Abstract Factory）  ：</strong>接口声明了一组创建各种抽象产品的方法。</li><li><strong>抽象产品（Abstract Product 通用的一类对象或接口）：</strong>为相同系列的不同产品声明接口。抽象产品的好坏直接决定了抽象工厂和具体工厂能否发挥最大作用的关键所在。</li><li><strong>具体工厂（Concrete Factory） ：</strong>实现抽象工厂的构建方法。 每个具体工厂都对应特定产品变体， 且仅创建此种产品变体。</li><li><strong>具体产品（Concrete Product 继承通用对象或接口后扩展特有属性）：</strong>是抽象产品的多种不同系列实现。所有系列产品都必须实现相应的抽象产品。</li></ul><p><strong>抽象工厂模式的类图：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B04N001.png"></p><p>抽象接口和抽象类的本质相同，可以根据不同业务进行修改。使用者无需关注当前工厂和产品是何种实现，只需要使用抽象工厂创建抽象产品即可。</p><br><h3 id="模式实现"><a href="#模式实现" class="headerlink" title="模式实现"></a>模式实现</h3><p>该示例使用抽象工厂模式定义抽象家具工厂和一系列抽象家具产品，分别用现代风格和维多利亚风格实现。</p><h4 id="示例程序的类图"><a href="#示例程序的类图" class="headerlink" title="示例程序的类图"></a>示例程序的类图</h4><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B04N002.png"></p><p>具体工厂实现类的方法是重写抽象工厂类的，所以其返回类型和抽象工厂类一样，这里由于害怕线条混乱，就不把具体工厂实现类和抽象产品类的依赖关系画出来了。</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="抽象工厂类"><a href="#抽象工厂类" class="headerlink" title="抽象工厂类"></a>抽象工厂类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> example.product.Chair;</span><br><span class="line"><span class="keyword">import</span> example.product.Table;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 抽象家具工厂 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">FurnitureFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用反射构建具体工厂</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> className 具体工厂全类名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> FurnitureFactory <span class="title">getFactory</span><span class="params">(String className)</span> </span>&#123;</span><br><span class="line">        FurnitureFactory factory = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            factory = (FurnitureFactory) Class.forName(className).newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有找到类：&quot;</span> + className);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建椅子产品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 抽象椅子产品</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Chair <span class="title">createChair</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建桌子产品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 抽象桌子产品</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Table <span class="title">createTable</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="抽象产品类"><a href="#抽象产品类" class="headerlink" title="抽象产品类"></a>抽象产品类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example.product;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 抽象椅子产品 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Chair</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取椅子腿数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 椅子腿数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getLegsNum</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取椅子高度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 椅子高度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">getHeight</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example.product;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 抽象桌子产品 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Table</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取桌子面积</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 桌子面积</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取桌子高度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 桌子高度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">getHeight</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="具体工厂类"><a href="#具体工厂类" class="headerlink" title="具体工厂类"></a>具体工厂类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example.factory.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> example.factory.FurnitureFactory;</span><br><span class="line"><span class="keyword">import</span> example.product.Chair;</span><br><span class="line"><span class="keyword">import</span> example.product.Table;</span><br><span class="line"><span class="keyword">import</span> example.product.impl.ModernChairImpl;</span><br><span class="line"><span class="keyword">import</span> example.product.impl.ModernTableImpl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 现代风格家具工厂实现 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModernFurnitureFactoryImpl</span> <span class="keyword">extends</span> <span class="title">FurnitureFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建椅子产品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 抽象椅子产品</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Chair <span class="title">createChair</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModernChairImpl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建桌子产品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 抽象桌子产品</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Table <span class="title">createTable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModernTableImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example.factory.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> example.factory.FurnitureFactory;</span><br><span class="line"><span class="keyword">import</span> example.product.Chair;</span><br><span class="line"><span class="keyword">import</span> example.product.Table;</span><br><span class="line"><span class="keyword">import</span> example.product.impl.VictorianChairImpl;</span><br><span class="line"><span class="keyword">import</span> example.product.impl.VictorianTableImpl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 维多利亚风格家具工厂实现 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VictorianFurnitureFactoryImpl</span> <span class="keyword">extends</span> <span class="title">FurnitureFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建椅子产品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 抽象椅子产品</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Chair <span class="title">createChair</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> VictorianChairImpl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建桌子产品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 抽象桌子产品</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Table <span class="title">createTable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> VictorianTableImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="具体产品类"><a href="#具体产品类" class="headerlink" title="具体产品类"></a>具体产品类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example.product.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> example.product.Chair;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 现代风格椅子产品实现 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModernChairImpl</span> <span class="keyword">extends</span> <span class="title">Chair</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取椅子腿数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 椅子腿数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLegsNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取椅子高度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 椅子高度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">70</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example.product.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> example.product.Table;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 现代风格桌子产品实现 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModernTableImpl</span> <span class="keyword">extends</span> <span class="title">Table</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取桌子面积</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 桌子面积</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取桌子高度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 桌子高度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">70</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example.product.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> example.product.Chair;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 维多利亚风格产品椅子实现 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VictorianChairImpl</span> <span class="keyword">extends</span> <span class="title">Chair</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取椅子腿数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 椅子腿数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLegsNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取椅子高度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 椅子高度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">50</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example.product.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> example.product.Table;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 维多利亚风格产品桌子实现 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VictorianTableImpl</span> <span class="keyword">extends</span> <span class="title">Table</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取桌子面积</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 桌子面积</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取桌子高度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 桌子高度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">50</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> example.factory.FurnitureFactory;</span><br><span class="line"><span class="keyword">import</span> example.product.Chair;</span><br><span class="line"><span class="keyword">import</span> example.product.Table;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 测试抽象工厂模式 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (args.length != <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;未找到参数或参数格式不正确！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        FurnitureFactory factory = FurnitureFactory.getFactory(args[<span class="number">0</span>]);</span><br><span class="line">        Chair chair = factory.createChair();</span><br><span class="line">        Table table = factory.createTable();</span><br><span class="line">        System.out.println(<span class="string">&quot;当前椅子有&quot;</span> + chair.getLegsNum() + <span class="string">&quot;条腿，高为&quot;</span> + chair.getHeight() + <span class="string">&quot;！&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;当前桌子的桌面面积为&quot;</span> + table.getSize() + <span class="string">&quot;，高为&quot;</span> + table.getHeight() + <span class="string">&quot;！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 执行参数为 example.factory.impl.ModernFurnitureFactoryImpl 时</span><br><span class="line">当前椅子有4条腿，高为70.0！</span><br><span class="line">当前桌子的桌面面积为200，高为70.0！</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 执行参数为 example.factory.impl.VictorianFurnitureFactoryImpl 时</span><br><span class="line">当前椅子有4条腿，高为50.0！</span><br><span class="line">当前桌子的桌面面积为100，高为50.0！</span><br></pre></td></tr></table></figure><p>从上面代码可以看出抽象工厂主要是用来生成抽象产品的，而具体工厂则是用来生成同一系列的具体产品。并且在编写代码时，我是先编写测试代码再编写具体实现的。这也印证了抽象工厂模式不需要考虑具体实现，使用与实现分开的优点。</p><br><h3 id="常用场景和解决方案"><a href="#常用场景和解决方案" class="headerlink" title="常用场景和解决方案"></a>常用场景和解决方案</h3><ul><li>不同系列产品有较多共性特征时，使用抽象工厂模式有助于提高组件复用性。</li><li>解决跨平台带来的兼容性问题。</li><li>知道相关产品但是不知道具体实现，使用抽象工厂模式可以让你在以后任意添加新的实现而不变更使用代码。例如在注入时，不需要修改使用代码，就能更改注入方式等。</li></ul><br><h3 id="模式的优缺点"><a href="#模式的优缺点" class="headerlink" title="模式的优缺点"></a>模式的优缺点</h3><table><thead><tr><th align="left">优点</th><th align="left">缺点</th></tr></thead><tbody><tr><td align="left">你可以确保同一工厂生成的产品相互匹配。</td><td align="left">由于采用该模式需要向应用中引入众多接口和类， 代码可能会比之前更加复杂。</td></tr><tr><td align="left">你可以避免客户端和具体产品代码的耦合。或者说让使用和创建的代码解耦。</td><td align="left">变更产品的结构困难，需要修改所有的抽象和具体工厂。</td></tr><tr><td align="left"><em>单一职责原则</em>。 你可以将产品生成代码抽取到同一位置， 使得代码易于维护。</td><td align="left"></td></tr><tr><td align="left"><em>开闭原则</em>。 向应用程序中引入新产品变体时， 你无需修改客户端代码。</td><td align="left"></td></tr></tbody></table><br><h3 id="拓展知识"><a href="#拓展知识" class="headerlink" title="拓展知识"></a>拓展知识</h3><ul><li>生成器重点关注如何分步生成复杂对象。抽象工厂专门用于生产一系列相关对象。 <em>抽象工厂</em>会马上返回产品，<em>生成器</em>则允许你在获取产品前执行一些额外构造步骤。</li><li>在许多设计工作的初期都会使用工厂方法模式（较为简单， 而且可以更方便地通过子类进行定制），随后演化为使用抽象工厂模式、原型模式或生成器模式（更灵活但更加复杂）。</li></ul><br><br><p>🔙 <a href="/archives/364ea8cc.html" title="设计模式">设计模式</a></p><p><strong>📌最后：希望本文能够给您提供帮助，文章中有不懂或不正确的地方，请在下方评论区💬留言！</strong></p><p><strong>🔗参考文献：</strong></p><p>🌐 <a href="https://refactoringguru.cn/design-patterns#intro-patterns">设计模式 –refactoringguru</a></p><p>▶️ <a href="https://www.bilibili.com/video/BV1hY411Y7zR/?p=1&vd_source=a9a236c4d6e5c5350c70b71ee0727b8c">bilibili-趣学设计模式；黄靖锋. –拉勾教育</a></p><p>📖 图解设计模式 /（日）结城浩著；杨文轩译. –北京：人民邮电出版社，2017.1</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>适配器模式Adapter</title>
      <link href="/archives/b54bb399.html"/>
      <url>/archives/b54bb399.html</url>
      
        <content type="html"><![CDATA[<h3 id="适配器-Adapter"><a href="#适配器-Adapter" class="headerlink" title="适配器 Adapter"></a>适配器 Adapter</h3><p><strong>适配器模式</strong>是一种结构型设计模式，它能使接口不兼容的对象能够相互合作。</p><br><h3 id="为什么要使用？"><a href="#为什么要使用？" class="headerlink" title="为什么要使用？"></a>为什么要使用？</h3><p><strong>适配器模式的对象职责：</strong></p><p><strong>使接口不兼容的对象能够相互合作。</strong>适配器可以让不兼容的两个类一起协同工作，将类的接口转换为客户期望的另一个接口。</p><p>在实际开发中，我们可能会遇到一个无法修改的功能性服务类，如第三方、遗留系统或存在众多已有依赖的类。同时我们有一个或多个需要使用服务类的客户端类。我们需要让客户端类能够使用服务类的功能。但是客户端类和服务类不兼容。这时我们就可以使用适配器模式。</p><p>我们让<strong>客户端</strong>使用<strong>客户端接口</strong>来使用<strong>适配器</strong>与<strong>服务类</strong>进行通信。这样一来就可以让我们不需要变更服务类的代码和不影响客户端代码的情况下<strong>修改</strong>或<strong>扩展</strong>适配器。</p><p>举个例子：如果现在有一个充电宝🔋（客户端类），你要用这个充电宝去给苹果手机📱（被适配/ 服务类）充电，不过充电宝的 <code>USB</code> 接口🔌（客户端接口）和苹果接口无法兼容。你也无法修改苹果手机内部的充电接口。</p><p>那么这时候你可以用一条 <code>USB</code> 接口转苹果充电接口（适配器）的数据线来为手机充电。如果我们有新的充电接口呢？如 <code>Type-C 接口</code>。那么我们只需要用一条 <code>USB</code> 接口转 <code>Type-C</code> 接口的数据线即可。我们只需要更换不同数据线（适配器）就可以让充电宝给不同充电口的手机充电。</p><br><h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><ul><li><p><strong>客户端</strong> （Client） 是包含当前程序业务逻辑的类。</p></li><li><p><strong>客户端接口</strong> （Client Interface） 描述了其他类与客户端代码合作时必须遵循的协议。</p></li><li><p><strong>服务</strong> （Service） 中有一些功能类 （通常来自第三方或遗留系统）。 客户端与其接口不兼容， 因此无法直接调用其功能。</p></li><li><p><strong>适配器</strong> （Adapter） 是一个可以同时与客户端和服务交互的类： 它在实现客户端接口的同时封装了服务对象。 适配器接受客户端通过适配器接口发起的调用， 并将其转换为适用于被封装服务对象的调用。</p></li></ul><h4 id="对象适配器"><a href="#对象适配器" class="headerlink" title="对象适配器"></a>对象适配器</h4><p>对象适配器的实现是让服务类作为适配器的属性，属于组合关系。所有流行的编程语言都可以实现适配器。</p><p><strong>适配器模式的类图：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B07N001.png"></p><h4 id="类适配器"><a href="#类适配器" class="headerlink" title="类适配器"></a>类适配器</h4><p>类适配器的实现是让适配器类继承服务类，属于继承关系。这种方式仅能在支持多重继承的编程语言中实现， 例如 C++。</p><p><strong>适配器模式的类图：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B07N002.png"></p><br><h3 id="模式实现"><a href="#模式实现" class="headerlink" title="模式实现"></a>模式实现</h3><p>该示例分别使用对象适配器和类适配器来获取时间类型（<code>Long</code> 和 <code>Date</code>）。原来的接口都是返回数值，使用适配器模式将它们的调用方式改为直接打印在控制台。</p><h4 id="示例程序的类图"><a href="#示例程序的类图" class="headerlink" title="示例程序的类图"></a>示例程序的类图</h4><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B07N003.png"></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="客户端接口"><a href="#客户端接口" class="headerlink" title="客户端接口"></a>客户端接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 客户端接口 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ClientInterface</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据类型获取时间并输出</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type “Long”，“Date”</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(String type)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="适配器"><a href="#适配器" class="headerlink" title="适配器"></a>适配器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 适配器 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">DateTypeTime</span> <span class="keyword">implements</span> <span class="title">ClientInterface</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 被适配器-组合关系 */</span></span><br><span class="line">    <span class="keyword">private</span> LongTypeTime longTypeTime = <span class="keyword">new</span> LongTypeTime();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据类型获取时间并输出</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type “Long”，“Date”</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;Long&quot;</span>.equals(type)) &#123;</span><br><span class="line">            System.out.println(longTypeTime.getNowTime());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;Date&quot;</span>.equals(type)) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">super</span>.getNowTime());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;无效类型&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="服务（继承）"><a href="#服务（继承）" class="headerlink" title="服务（继承）"></a>服务（继承）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** “Date”类型时间服务类，被适配类，使用继承的方式实现适配器模式 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateTypeTime</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取“Date”类型的当前时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getNowTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Date(System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="服务（组合-委托）"><a href="#服务（组合-委托）" class="headerlink" title="服务（组合/ 委托）"></a>服务（组合/ 委托）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** “Long”类型时间服务类，被适配类，使用组合/ 委托的方式实现适配器模式 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LongTypeTime</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取“Long”类型的当前时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getNowTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Date(System.currentTimeMillis()).getTime();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> example.Adapter;</span><br><span class="line"><span class="keyword">import</span> example.ClientInterface;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 测试适配器模式 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ClientInterface adapter = <span class="keyword">new</span> Adapter();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;使用继承的方式实现适配器模式&quot;</span>);</span><br><span class="line">        adapter.print(<span class="string">&quot;Date&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\n------------------- 分割线 -------------------\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;使用组合/ 委托的方式实现适配器模式&quot;</span>);</span><br><span class="line">        adapter.print(<span class="string">&quot;Long&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">使用继承的方式实现适配器模式</span><br><span class="line">Sun Mar 05 16:10:59 CST 2023</span><br><span class="line"></span><br><span class="line">------------------- 分割线 -------------------</span><br><span class="line"></span><br><span class="line">使用组合/ 委托的方式实现适配器模式</span><br><span class="line">1678003859670</span><br></pre></td></tr></table></figure><p>对象适配器和类适配器都能实现适配器模式，不过在单继承的编程语言里，只能使用对象适配器。</p><br><h3 id="常用场景和解决方案"><a href="#常用场景和解决方案" class="headerlink" title="常用场景和解决方案"></a>常用场景和解决方案</h3><ul><li>当你希望使用某个类，但是其接口与其他代码不兼容时，可以使用适配器类。或原有接口功能不满足现有要求，需要在兼容老接口的同时做适当的扩展。</li><li>如果您需要复用这样一些类，他们处于同一个继承体系，并且他们又有了额外的一些共同的方法，但是这些共同的方法不是所有在这一继承体系中的子类所具有的共性。或将有相似性的多个不同接口之间做功能的统一。</li><li>旧版本和新版本相互兼容。</li></ul><br><h3 id="模式的优缺点"><a href="#模式的优缺点" class="headerlink" title="模式的优缺点"></a>模式的优缺点</h3><table><thead><tr><th align="left">优点</th><th align="left">缺点</th></tr></thead><tbody><tr><td align="left"><em>单一职责原则</em>你可以将接口或数据转换代码从程序主要业务逻辑中分离。</td><td align="left">代码整体复杂度增加，因为你需要新增一系列接口和类。有时直接更改服务类使其与其他代码兼容会更简单。</td></tr><tr><td align="left"><em>开闭原则</em>。只要客户端代码通过客户端接口与适配器进行交互，你就能在不修改现有客户端代码的情况下在程序中添加新类型的适配器。</td><td align="left"></td></tr><tr><td align="left"><em>里氏替换原则</em>。适配器类只要不影响客户端接口功能，具体被适配类无论使用什么新功能，都能很方便进行替换。</td><td align="left"></td></tr></tbody></table><h4 id="使用适配器模式的优势"><a href="#使用适配器模式的优势" class="headerlink" title="使用适配器模式的优势"></a>使用适配器模式的优势</h4><ul><li>将目标类（客户端接口）和具体适配者类解耦。可以通过更换不同适配器去使用更多类。</li><li>增加了类的透明性。修改的只是适配器类，客户端的调用逻辑不会被影响。换句话说适配器根据客户端接口进行变更，不会影响到客户端。</li><li>统一多个类或接口。一个适配器类可以把多个不同的具体被适配类和子类都适配到同一个目标类上，如果目标类是新类，那么它就统一多个类或接口。</li></ul><h4 id="使用适配器模式的劣势"><a href="#使用适配器模式的劣势" class="headerlink" title="使用适配器模式的劣势"></a>使用适配器模式的劣势</h4><ul><li>一次只能适配一个抽象类或接口。面对单继承编程语言，一次就只能适配一个被适配者类。</li><li>过度嵌套会导致接口臃肿，例如不断在一个目标类上适配适配器，就会让接口变得臃肿。</li><li>目标接口依赖太多适配接口，修改目标接口会导致所以适配器都需要定制修改。</li></ul><br><h3 id="拓展知识"><a href="#拓展知识" class="headerlink" title="拓展知识"></a>拓展知识</h3><ul><li>适配器模式的适配器类<strong>最好采用私有继承的方式</strong>，以起到限定接口功能范围的作用。</li><li>适配器可以对已有对象的接口进行修改，装饰模式则能在不改变对象接口的前提下强化对象功能。此外，<em>装饰</em>还支持递归组合，<em>适配器</em>则无法实现。</li><li>适配器能为被封装对象提供不同的接口，代理模式能为对象提供相同的接口，装饰则能为对象提供加强的接口。</li></ul><br><br><p>🔙 <a href="/archives/364ea8cc.html" title="设计模式">设计模式</a></p><p><strong>📌最后：希望本文能够给您提供帮助，文章中有不懂或不正确的地方，请在下方评论区💬留言！</strong></p><p><strong>🔗参考文献：</strong></p><p>🌐 <a href="https://refactoringguru.cn/design-patterns#intro-patterns">设计模式 –refactoringguru</a></p><p>▶️ <a href="https://www.bilibili.com/video/BV1hY411Y7zR/?p=1&vd_source=a9a236c4d6e5c5350c70b71ee0727b8c">bilibili-趣学设计模式；黄靖锋. –拉勾教育</a></p><p>📖 图解设计模式 /（日）结城浩著；杨文轩译. –北京：人民邮电出版社，2017.1</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>桥接模式Bridge</title>
      <link href="/archives/90798859.html"/>
      <url>/archives/90798859.html</url>
      
        <content type="html"><![CDATA[<h3 id="桥接-Bridge"><a href="#桥接-Bridge" class="headerlink" title="桥接 Bridge"></a>桥接 Bridge</h3><p><strong>桥接模式</strong>是一种结构型设计模式，可将一个大类或一系列紧密相关的类拆分为<strong>抽象</strong>和<strong>实现</strong>两个独立的<strong>层次结构</strong>，从而能在开发时分别使用。</p><p><strong>层次结构：</strong></p><ul><li><strong>功能层次：</strong>子类添加父类没有的功能，按功能划分子类，属于桥接模式的<strong>抽象</strong>。</li><li><strong>实现层次：</strong>子类实现父类的方法，按实现划分子类，属于桥接模式的<strong>实现</strong>。</li></ul><br><h3 id="为什么要使用？"><a href="#为什么要使用？" class="headerlink" title="为什么要使用？"></a>为什么要使用？</h3><p><strong>桥接模式的对象职责：</strong></p><p><strong>将一个大类或一系列紧密相关的类拆分为抽象和实现两个独立的层次结构。</strong>或者说把一个类按功能和实现两个维度划分，用组合关系关联起来。</p><p>在现实世界，许多事物都有两个或以上维度的变化。那么当我们将它们抽象成对象的时候，就需要注意处理其中的变化。</p><p>例如几何体这个抽象类，如果我们只按形状划分的话，可以分为正方体⬜、球体⚪等。但是如果后期需要拓展几何体，给它添加颜色。那么又要在正方体和球体下各自添加子类红色🟥🔴、绿色🟩🟢等。层级变深，代码也变臃肿。这时桥接模式🌉就可以派上它的作用。</p><p>我们将几何体分为形状和颜色两个维度，再用组合关系连接起来。那么它们就可以互相组合。降低了继承关系带来的强耦合。未来要新增形状或颜色只需要在各自抽象类或接口中继承或实现即可。类似的例子还有很多，如不同平台的 <code>GUI</code> 层。抽象部分为 <code>GUI</code> 层可以随意添加功能，实现部分为操作系统的 <code>API</code> 可以更换各种平台。</p><p>但是使用桥接模式对于我们的抽象能力有更大的要求，要求我们能明确类的维度。从整体结构设计类。</p><br><h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><ul><li><p><strong>抽象部分</strong>（Abstraction）定义的一种抽象分类。提供高层控制逻辑，依赖于完成底层实际工作的实现对象。<font color="gray">抽象部分可以列出和实现部分一样的方法，但是抽象部分通常声明一些复杂行为，这些行为依赖于多种由实现部分声明的原语操作。</font></p></li><li><p><strong>实现部分</strong>（Implementation）定义抽象实体中具备的多种行为。为所有具体实现声明通用接口。抽象部分仅能通过在这里声明的方法与实现对象交互。</p></li><li><p><strong>精确抽象</strong>（Refined Abstraction）继承抽象实体的子类实体。提供控制逻辑的变体。与其父类一样，它们通过通用实现接口与不同的实现进行交互。</p></li><li><p><strong>具体实现</strong>（Concrete Implementations）实现抽象行为的具体算法。</p></li></ul><p>通常情况下，<strong>客户端</strong> （Client） 仅关心如何与抽象部分合作。但是，客户端需要将抽象对象与一个实现对象连接起来。</p><p><strong>桥接模式的类图：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B08N001.png"></p><p>桥接模式使得 <code>RefinedAbstraction</code> 和 <code>ConcreteImplementations</code> 可以自由组合，从而降低了代码的耦合度。</p><br><h3 id="模式实现"><a href="#模式实现" class="headerlink" title="模式实现"></a>模式实现</h3><p>该示例使用桥接模式将几何体分为形状和颜色两个维度。将形状作为几何体的主要特征，让不同子类扩展不同的方法（即添加父类没有的功能）；将获取颜色的行为抽离成一个新的接口，交由子类去实现（即实现父类的方法）。</p><h4 id="示例程序的类图"><a href="#示例程序的类图" class="headerlink" title="示例程序的类图"></a>示例程序的类图</h4><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B08N002.png"></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="抽象部分"><a href="#抽象部分" class="headerlink" title="抽象部分"></a>抽象部分</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example.bridge;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 几何体抽象部分 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Geometry</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 几何体颜色-组合关系 */</span></span><br><span class="line">    <span class="keyword">private</span> Color color;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Geometry</span><span class="params">(Color color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 打印几何体 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是一个&quot;</span> + color.getColor() + <span class="string">&quot;的&quot;</span> + getShape());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取几何体形状</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 几何体形状</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getShape</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="实现部分"><a href="#实现部分" class="headerlink" title="实现部分"></a>实现部分</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example.bridge;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 颜色实现部分 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取颜色</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 颜色字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">getColor</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="精准抽象"><a href="#精准抽象" class="headerlink" title="精准抽象"></a>精准抽象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example.refined;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> example.bridge.Color;</span><br><span class="line"><span class="keyword">import</span> example.bridge.Geometry;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 正方体精准抽象 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cube</span> <span class="keyword">extends</span> <span class="title">Geometry</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cube</span><span class="params">(Color color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取几何体形状</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 几何体形状</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getShape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;立方体&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 搭积木-立方体特有方法 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildBlocks</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;立方体可以搭积木！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example.refined;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> example.bridge.Color;</span><br><span class="line"><span class="keyword">import</span> example.bridge.Geometry;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 球体精准抽象 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sphere</span> <span class="keyword">extends</span> <span class="title">Geometry</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sphere</span><span class="params">(Color color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取几何体形状</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 几何体形状</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getShape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;球体&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 滚动-球体特有方法 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">roll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;球体可以滚动！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="具体抽象"><a href="#具体抽象" class="headerlink" title="具体抽象"></a>具体抽象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> example.bridge.Color;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 红色具体实现 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Red</span> <span class="keyword">implements</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取颜色</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 颜色字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;红色&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> example.bridge.Color;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 红色具体实现 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Red</span> <span class="keyword">implements</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取颜色</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 颜色字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;红色&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> example.bridge.Geometry;</span><br><span class="line"><span class="keyword">import</span> example.impl.Green;</span><br><span class="line"><span class="keyword">import</span> example.impl.Red;</span><br><span class="line"><span class="keyword">import</span> example.refined.Cube;</span><br><span class="line"><span class="keyword">import</span> example.refined.Sphere;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 测试桥接模式 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Red red = <span class="keyword">new</span> Red();</span><br><span class="line">        Green green = <span class="keyword">new</span> Green();</span><br><span class="line">        System.out.println(<span class="string">&quot;自由组合形状和颜色：&quot;</span>);</span><br><span class="line">        Geometry redCube = <span class="keyword">new</span> Cube(red);</span><br><span class="line">        Geometry redSphere = <span class="keyword">new</span> Sphere(red);</span><br><span class="line">        Geometry greenCube = <span class="keyword">new</span> Cube(green);</span><br><span class="line">        Geometry greenSphere = <span class="keyword">new</span> Sphere(green);</span><br><span class="line">        redCube.print();</span><br><span class="line">        redSphere.print();</span><br><span class="line">        greenCube.print();</span><br><span class="line">        greenSphere.print();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\n--------------------- 分割线 ---------------------\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;不同抽象实体功能：&quot;</span>);</span><br><span class="line">        Cube cube = <span class="keyword">new</span> Cube(red);</span><br><span class="line">        Sphere sphere = <span class="keyword">new</span> Sphere(red);</span><br><span class="line">        cube.buildBlocks();</span><br><span class="line">        sphere.roll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">自由组合形状和颜色：</span><br><span class="line">这是一个红色的立方体</span><br><span class="line">这是一个红色的球体</span><br><span class="line">这是一个绿色的立方体</span><br><span class="line">这是一个绿色的球体</span><br><span class="line"></span><br><span class="line">--------------------- 分割线 ---------------------</span><br><span class="line"></span><br><span class="line">不同抽象实体功能：</span><br><span class="line">立方体可以搭积木！</span><br><span class="line">球体可以滚动！</span><br></pre></td></tr></table></figure><p>从测试和结果来看，使用桥接模式让类变得更加灵活。</p><br><h3 id="常用场景和解决方案"><a href="#常用场景和解决方案" class="headerlink" title="常用场景和解决方案"></a>常用场景和解决方案</h3><ul><li>拆分或重组一个具有多重功能的庞杂类。桥接模式能让你将它按不同层次划分。</li><li>多个维度扩展一个类。例如，几何体的形状和颜色维度。</li><li>如果你需要在运行时切换不同实现方法，可使用桥接模式。</li><li>需要提供平台独立性的应用程序时。</li><li>需要在某种统一协议下增加更大组件时。</li><li>基于消息驱动的场景，例如，手机短信、微信消息等。</li><li>实现上传到云存储时，将操作和执行器分开，即基本上传操作和云存储服务商执行器分开。</li></ul><br><h3 id="模式的优缺点"><a href="#模式的优缺点" class="headerlink" title="模式的优缺点"></a>模式的优缺点</h3><table><thead><tr><th align="left">优点</th><th align="left">缺点</th></tr></thead><tbody><tr><td align="left">你可以创建与平台无关的类和程序。</td><td align="left">对高内聚的类使用该模式可能会让代码更加复杂。</td></tr><tr><td align="left">客户端代码仅与高层抽象部分进行互动，不会接触到平台的详细信息。</td><td align="left"></td></tr><tr><td align="left"><em>开闭原则</em>。你可以新增抽象部分和实现部分，且它们之间不会相互影响。</td><td align="left"></td></tr><tr><td align="left"><em>单一职责原则</em>。抽象部分专注于处理高层逻辑，实现部分处理平台细节。</td><td align="left"></td></tr></tbody></table><h4 id="使用桥接模式的优势"><a href="#使用桥接模式的优势" class="headerlink" title="使用桥接模式的优势"></a>使用桥接模式的优势</h4><ul><li>分离抽象实体与行为，可以提升各种维度的演化效率。</li><li>用组合关系替代了多重继承，提高了代码结构的演化灵活性。</li><li>符合表达原则，提升代码的可理解性。</li></ul><h4 id="使用桥接模式的劣势"><a href="#使用桥接模式的劣势" class="headerlink" title="使用桥接模式的劣势"></a>使用桥接模式的劣势</h4><ul><li>增加了维护成本。</li><li>导致性能下降。</li><li>增加设计难度。</li></ul><br><h3 id="拓展知识"><a href="#拓展知识" class="headerlink" title="拓展知识"></a>拓展知识</h3><ul><li>桥接模式通常会于开发前期进行设计，使你能够将程序的各个部分独立开来以便开发。另一方面，适配器模式通常在已有程序中使用， 让相互不兼容的类能很好地合作。</li><li>你可以结合使用生成器模式和桥接模式：<em>主管</em>类负责抽象工作，各种不同的<em>生成器</em>负责<em>实现</em>工作。</li></ul><br><br><p>🔙 <a href="/archives/364ea8cc.html" title="设计模式">设计模式</a></p><p><strong>📌最后：希望本文能够给您提供帮助，文章中有不懂或不正确的地方，请在下方评论区💬留言！</strong></p><p><strong>🔗参考文献：</strong></p><p>🌐 <a href="https://refactoringguru.cn/design-patterns#intro-patterns">设计模式 –refactoringguru</a></p><p>▶️ <a href="https://www.bilibili.com/video/BV1hY411Y7zR/?p=1&vd_source=a9a236c4d6e5c5350c70b71ee0727b8c">bilibili-趣学设计模式；黄靖锋. –拉勾教育</a></p><p>📖 图解设计模式 /（日）结城浩著；杨文轩译. –北京：人民邮电出版社，2017.1</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生成器模式Builder</title>
      <link href="/archives/b53dcb9.html"/>
      <url>/archives/b53dcb9.html</url>
      
        <content type="html"><![CDATA[<h3 id="生成器-Builder"><a href="#生成器-Builder" class="headerlink" title="生成器 Builder"></a>生成器 Builder</h3><p><strong>生成器模式</strong>也叫“建造者模式”是一种创建型设计模式， 使你能够分步骤创建复杂对象。 该模式允许你使用相同的创建代码生成不同类型和形式的对象。</p><br><h3 id="为什么要使用？"><a href="#为什么要使用？" class="headerlink" title="为什么要使用？"></a>为什么要使用？</h3><p><strong>生成器模式的对象职责：</strong></p><ul><li><p><strong>分步骤创建复杂对象。</strong>分阶段、分步骤的方法更适合多次运算结果类创建场景。在实际开发中，并非所有参数都能一次性准备好的，需要通过其他运算后才能得出。这时我们有 3 种方法可以实现：</p><ol><li><p><strong>构造函数：</strong>如果参数很多，并且有许多不必要生成的参数，那么我们就需要根据各种情况，编写各种构造函数，或者在全参构造函数中为那些不必要的参数传值。代码臃肿、多余。</p></li><li><p><strong>Setter 方法：</strong>如果使用 <code>Setter</code> 方法，就需要用无参构造先创建对象，再一个个 <code>Setter</code> 属性，如果属性过多，而且要生成的对象多，也是很麻烦、冗余。</p></li><li><p><strong>生成器模式：</strong>生成器模式可以帮助你分步骤的创建一个复杂对象，虽然生成器模式本身会占用一定的资源。但如果要创建很多对象或创建的对象很复杂，这点资源也可以忽略不计。例如创建一个学生对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student student = <span class="keyword">new</span> Student.Builder().name(<span class="string">&quot;张三&quot;</span>).age(<span class="number">18</span>).sex(<span class="string">&quot;男&quot;</span>).build();</span><br></pre></td></tr></table></figure></li></ol></li><li><p><strong>使用相同的创建代码生成不同类型和形式的对象。</strong>不需要关系特定类型的建造者的具体算法实现。例如很多框架都会使用生成器模式去创建对象，我们在使用这些框架去创建某些对象时，不需要关注其内部逻辑，只需要着重关注它能给我们带来什么功能，这样能提高开发效率。</p></li></ul><br><h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><ul><li><strong>生成器</strong> （Builder） 接口声明在所有类型生成器中通用的产品构造步骤。</li><li><strong>具体生成器</strong> （Concrete Builders） 提供构造过程的不同实现。 具体生成器也可以构造不遵循通用接口的产品。</li><li><strong>产品</strong> （Products） 是最终生成的对象。 由不同生成器构造的产品无需属于同一类层次结构或接口。</li><li><strong>主管</strong> （Director） 类定义调用构造步骤的顺序， 这样你就可以创建和复用特定的产品配置。</li><li><strong>客户端</strong> （Client） 必须将某个生成器对象与主管类关联。 一般情况下， 你只需通过主管类构造函数的参数进行一次性关联即可。 此后主管类就能使用生成器对象完成后续所有的构造任务。 但在客户端将生成器对象传递给主管类制造方法时还有另一种方式。 在这种情况下， 你在使用主管类生产产品时每次都可以使用不同的生成器。</li></ul><p><strong>生成器模式的类图：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B03N001.png"></p><p><strong>生成器模式的顺序图：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B03N002.png"></p><br><h3 id="模式实现"><a href="#模式实现" class="headerlink" title="模式实现"></a>模式实现</h3><p>该示例通过使用生成器模式分别创建复杂对象 HTML 页面和 Markdown 文档。</p><h4 id="示例程序的类图"><a href="#示例程序的类图" class="headerlink" title="示例程序的类图"></a>示例程序的类图</h4><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B03N003.png"></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="文档生成器-Builder"><a href="#文档生成器-Builder" class="headerlink" title="文档生成器 Builder"></a>文档生成器 Builder</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 生成器接口，统一文档编写接口 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建标题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title 标题内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makeTitle</span><span class="params">(String title)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建无序列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> items 列表项</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makeItems</span><span class="params">(String[] items)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makeContent</span><span class="params">(String content)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="HTML生成器-HTMLBuilder"><a href="#HTML生成器-HTMLBuilder" class="headerlink" title="HTML生成器 HTMLBuilder"></a>HTML生成器 HTMLBuilder</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** HTML文档实现类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HTMLBuilder</span> <span class="keyword">implements</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String html = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建标题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title 标题内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeTitle</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">        html += <span class="string">&quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;&quot;</span> + title + <span class="string">&quot;&lt;/title&gt;&lt;/head&gt;&lt;/html&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建无序列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> items 列表项</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeItems</span><span class="params">(String[] items)</span> </span>&#123;</span><br><span class="line">        html += <span class="string">&quot;&lt;ul&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (String item : items) &#123;</span><br><span class="line">            html += <span class="string">&quot;&lt;li&gt;&quot;</span> + item + <span class="string">&quot;&lt;/li&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        html += <span class="string">&quot;&lt;/ul&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        html += <span class="string">&quot;&lt;p&gt;&quot;</span> + content + <span class="string">&quot;&lt;/p&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取HTML文档</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> HTML文档字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Markdown文档生成器-MarkdownBuilder"><a href="#Markdown文档生成器-MarkdownBuilder" class="headerlink" title="Markdown文档生成器 MarkdownBuilder"></a>Markdown文档生成器 MarkdownBuilder</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** markdown文档实现类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MarkdownBuilder</span> <span class="keyword">implements</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String markdown = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建标题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title 标题内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeTitle</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">        markdown += <span class="string">&quot;## &quot;</span> + title + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建无序列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> items 列表项</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeItems</span><span class="params">(String[] items)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String item : items) &#123;</span><br><span class="line">            markdown += <span class="string">&quot;* &quot;</span> + item + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        markdown += content + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取markdown文档</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> markdown文档字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> markdown;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="编写文档主管-Director"><a href="#编写文档主管-Director" class="headerlink" title="编写文档主管 Director"></a>编写文档主管 Director</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 主管类，决定生成的文档类型 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 生成器 */</span></span><br><span class="line">    <span class="keyword">private</span> Builder builder;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 注入生成器 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Director</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.builder = builder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 创建一个文档 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        builder.makeTitle(<span class="string">&quot;这是一个标题&quot;</span>);</span><br><span class="line">        String[] items = &#123;<span class="string">&quot;无序列表1&quot;</span>, <span class="string">&quot;无序列表2&quot;</span>, <span class="string">&quot;无序列表3&quot;</span>&#125;;</span><br><span class="line">        builder.makeItems(items);</span><br><span class="line">        builder.makeContent(<span class="string">&quot;这是一段内容！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 测试生成器模式 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;用HTMLBuilder生成文档&quot;</span>);</span><br><span class="line">        HTMLBuilder htmlBuilder = <span class="keyword">new</span> HTMLBuilder();</span><br><span class="line">        Director director1 = <span class="keyword">new</span> Director(htmlBuilder);</span><br><span class="line">        director1.construct();</span><br><span class="line">        System.out.println(htmlBuilder.getResult());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------- 分割线 -----------------\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;用MarkdownBuilder生成文档&quot;</span>);</span><br><span class="line">        MarkdownBuilder markdownBuilder = <span class="keyword">new</span> MarkdownBuilder();</span><br><span class="line">        Director director2 = <span class="keyword">new</span> Director(markdownBuilder);</span><br><span class="line">        director2.construct();</span><br><span class="line">        System.out.println(markdownBuilder.getResult());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">用HTMLBuilder生成文档</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span></span>这是一个标题<span class="xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span>无序列表1<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span>无序列表2<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span>无序列表3<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span>这是一段内容！<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">----------------- 分割线 -----------------</span><br><span class="line"></span><br><span class="line">用MarkdownBuilder生成文档</span><br><span class="line"><span class="section">## 这是一个标题</span></span><br><span class="line"><span class="bullet">*</span> 无序列表1</span><br><span class="line"><span class="bullet">*</span> 无序列表2</span><br><span class="line"><span class="bullet">*</span> 无序列表3</span><br><span class="line">这是一段内容！</span><br></pre></td></tr></table></figure><p>我们也可以直接跳过 <code>Director</code>，直接使用 <code>Builder</code>，或者在 <code>Director</code> 里编写多个方法，注入不同 <code>Builder</code>。</p><br><h3 id="常用场景和解决方案"><a href="#常用场景和解决方案" class="headerlink" title="常用场景和解决方案"></a>常用场景和解决方案</h3><ul><li>需要生成的对象包含多个成员属性，使用生成器模式可以避免“重叠构造函数”和“繁琐 Setter”的出现。</li><li>需要生成的对象的属性相互依赖，需要指定其生成顺序。</li><li>对象的创建过程独立于创建该对象的类。</li><li>需要隔离复杂对象的创建和使用，并使用相同的创建过程可以创建不同的产品。</li></ul><br><h3 id="模式的优缺点"><a href="#模式的优缺点" class="headerlink" title="模式的优缺点"></a>模式的优缺点</h3><table><thead><tr><th align="left">优点</th><th align="left">缺点</th></tr></thead><tbody><tr><td align="left">你可以分步创建对象， 暂缓创建步骤或递归运行创建步骤。</td><td align="left">由于该模式需要新增多个类， 因此代码整体复杂程度会有所增加。</td></tr><tr><td align="left">生成不同形式的产品时， 你可以复用相同的制造代码。</td><td align="left"></td></tr><tr><td align="left"><em>单一职责原则</em>。 你可以将复杂构造代码从产品的业务逻辑中分离出来。</td><td align="left"></td></tr></tbody></table><h4 id="使用生成器模式的优势"><a href="#使用生成器模式的优势" class="headerlink" title="使用生成器模式的优势"></a>使用生成器模式的优势</h4><ul><li>分离创建与使用，使用方不需要知道类的内部实现逻辑细节，通过统一接口调用，可以组合出不同类型的对象。</li><li>满足开闭原则，每一个生成器都相对独立，可以很容易替换或新增，提高代码的可拓展性。</li><li>自由地组合对象的创建过程，使用者可以使用少量代码灵活创建满足自己需求的对象。</li></ul><h4 id="使用生成器模式的劣势"><a href="#使用生成器模式的劣势" class="headerlink" title="使用生成器模式的劣势"></a>使用生成器模式的劣势</h4><ul><li>使用范围有限。</li><li>容易引起超大的类。</li><li>增加代码行数。</li></ul><br><h3 id="拓展知识"><a href="#拓展知识" class="headerlink" title="拓展知识"></a>拓展知识</h3><ul><li>生成器重点关注如何分步生成复杂对象。 抽象工厂专门用于生产一系列相关对象。 <em>抽象工厂</em>会马上返回产品， <em>生成器</em>则允许你在获取产品前执行一些额外构造步骤。</li><li>你可以结合使用生成器和桥接模式：<em>主管</em>类负责抽象工作，各种不同的<em>生成器</em>负责<em>实现</em>工作。</li><li>抽象工厂、 生成器和原型都可以用单例模式来实现。</li><li>设计时要谨记“只有不知道子类才能替换”。</li></ul><br><br><p>🔙 <a href="/archives/364ea8cc.html" title="设计模式">设计模式</a></p><p><strong>📌最后：希望本文能够给您提供帮助，文章中有不懂或不正确的地方，请在下方评论区💬留言！</strong></p><p><strong>🔗参考文献：</strong></p><p>🌐 <a href="https://refactoringguru.cn/design-patterns#intro-patterns">设计模式 –refactoringguru</a></p><p>▶️ <a href="https://www.bilibili.com/video/BV1hY411Y7zR/?p=1&vd_source=a9a236c4d6e5c5350c70b71ee0727b8c">bilibili-趣学设计模式；黄靖锋. –拉勾教育</a></p><p>📖 图解设计模式 /（日）结城浩著；杨文轩译. –北京：人民邮电出版社，2017.1</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>责任链模式Chain of Responsibility</title>
      <link href="/archives/16953163.html"/>
      <url>/archives/16953163.html</url>
      
        <content type="html"><![CDATA[<h3 id="责任链-Chain-of-Responsibility"><a href="#责任链-Chain-of-Responsibility" class="headerlink" title="责任链 Chain of Responsibility"></a>责任链 Chain of Responsibility</h3><p><strong>责任链模式</strong>是一种行为设计模式，允许你将请求沿着处理者链进行发送。收到请求后，每个处理者均可对请求进行处理，或将其传递给链上的下个处理者。简单来说就是通过构建一个处理流水线来对一次请求进行多次的处理。</p><br><h3 id="为什么要使用？"><a href="#为什么要使用？" class="headerlink" title="为什么要使用？"></a>为什么要使用？</h3><p><strong>责任链模式的对象职责：</strong></p><p><strong>通过构建一个处理流水线来对一次请求进行多次的处理，每个处理者均可对请求进行处理，或将其传递给链上的下个处理者。</strong></p><p>👉 解耦使用者和后台庞大的流程化处理。</p><p>👉 为了动态更换流程处理中的处理对象。</p><p>👉 为了处理一些需要递归遍历的对象列表。</p><p>🎈 责任链模式弱化了发出请求的人和处理请求的人之间的关系，提高了组件的复用性，让每个处理者专注于自己的工作。通过动态地重组责任链也能够让程序变得更加灵活。</p><br><h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><ul><li><strong>处理者</strong>（Handler）声明了所有具体处理者的通用接口。该接口通常仅包含单个方法用于请求处理，但有时其还会包含一个设置链上下个处理者的方法。</li><li><strong>基础处理者</strong>（Base Handler）是一个可选的类，你可以将所有处理者共用的样本代码放置在其中。<font color="gray">通常情况下，该类中定义了一个保存对于下个处理者引用的成员变量。客户端可通过将处理者传递给上个处理者的构造函数或设定方法来创建链。该类还可以实现默认的处理行为：确定下个处理者存在后再将请求传递给它。</font></li><li><strong>具体处理者</strong>（Concrete Handlers）包含处理请求的实际代码。每个处理者接收到请求后，都必须决定是否进行处理，以及是否沿着链传递请求。<font color="gray">处理者通常是独立且不可变的，需要通过构造函数一次性地获得所有必要地数据。</font></li><li><strong>客户端</strong>（Client）可根据程序逻辑一次性或者动态地生成链。值得注意的是，请求可发送给链上的任意一个处理者，而非必须是第一个处理者。</li></ul><p><strong>责任链模式的类图：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B24N001.png"></p><br><h3 id="模式实现"><a href="#模式实现" class="headerlink" title="模式实现"></a>模式实现</h3><p>该示例使用责任链模式实现了处理者根据问题编号处理问题。具体类信息如下：</p><table><thead><tr><th align="left">责任链顺序</th><th align="left">类名</th><th align="left">职责</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><code>NoSupport</code></td><td align="left">永远不解决问题</td></tr><tr><td align="left">2</td><td align="left"><code>LimitSupport</code></td><td align="left">只解决编号小于 limit 值的问题</td></tr><tr><td align="left">3</td><td align="left"><code>SpecialSupport</code></td><td align="left">只解决指定编号的问题</td></tr><tr><td align="left">4</td><td align="left"><code>OddSupport</code></td><td align="left">只解决奇数编号的问题</td></tr></tbody></table><p>通过处理者的 <code>setNext</code> 方法设置责任链，使用其 <code>support</code> 方法解决问题。当前处理者能够解决问题时，优先当前处理者解决；如果无法解决则交由下一位处理者解决；如果没有下一位处理者则说明问题无法解决。</p><h4 id="示例程序的类图"><a href="#示例程序的类图" class="headerlink" title="示例程序的类图"></a>示例程序的类图</h4><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B24N002.png"></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="基础处理者"><a href="#基础处理者" class="headerlink" title="基础处理者"></a>基础处理者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 基础处理者 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Support</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 处理者名称 */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">/** 下一个处理者 */</span></span><br><span class="line">    <span class="keyword">private</span> Support next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Support</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置下一个处理者，链式调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> next 下一个处理者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Support <span class="title">setNext</span><span class="params">(Support next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解决问题步骤</span></span><br><span class="line"><span class="comment">     * 1. 自身可以解决</span></span><br><span class="line"><span class="comment">     * 2. 存在下一个处理者，交给下一个处理者解决</span></span><br><span class="line"><span class="comment">     * 3. 不存在下一个处理者，无法解决</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> trouble 问题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">support</span><span class="params">(Trouble trouble)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (resolve(trouble)) &#123;</span><br><span class="line">            done(trouble);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            next.support(trouble);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fail(trouble);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功解决</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> trouble 问题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">done</span><span class="params">(Trouble trouble)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[&quot;</span> + trouble.getNumber() + <span class="string">&quot;]问题已解决！处理人：&#123;&quot;</span> + name + <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无法解决</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> trouble 问题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">fail</span><span class="params">(Trouble trouble)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[&quot;</span> + trouble.getNumber() + <span class="string">&quot;]问题未解决！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 能否解决问题，在解决问题后访问是否成功解决</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> trouble 问题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true可以解决</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">resolve</span><span class="params">(Trouble trouble)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="具体处理者"><a href="#具体处理者" class="headerlink" title="具体处理者"></a>具体处理者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 永远不解决问题的处理者 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoSupport</span> <span class="keyword">extends</span> <span class="title">Support</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NoSupport</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无法解决任何问题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> trouble 问题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 永远返回false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">resolve</span><span class="params">(Trouble trouble)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 只解决编号小于limit值问题的处理者 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LimitSupport</span> <span class="keyword">extends</span> <span class="title">Support</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> limit;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LimitSupport</span><span class="params">(String name, <span class="keyword">int</span> limit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.limit = limit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 只解决编号小于limit值的问题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> trouble 问题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true可以解决</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">resolve</span><span class="params">(Trouble trouble)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (trouble.getNumber() &lt; limit) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 只解决指定编号问题的处理者 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpecialSupport</span> <span class="keyword">extends</span> <span class="title">Support</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpecialSupport</span><span class="params">(String name, <span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 只解决指定编号的问题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> trouble 问题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true可以解决</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">resolve</span><span class="params">(Trouble trouble)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (trouble.getNumber() == number) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 只解决奇数编号问题的处理者 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OddSupport</span> <span class="keyword">extends</span> <span class="title">Support</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OddSupport</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 只解决奇数编号的问题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> trouble 问题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true可以解决</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">resolve</span><span class="params">(Trouble trouble)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (trouble.getNumber() % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="其他类"><a href="#其他类" class="headerlink" title="其他类"></a>其他类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 其他类，表示发生的问题 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Trouble</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 问题编号 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Trouble</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> example.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 测试责任链模式 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Support zhangsan = <span class="keyword">new</span> NoSupport(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        Support lisi = <span class="keyword">new</span> LimitSupport(<span class="string">&quot;李四（只会解决编号小于20的问题）&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        Support wangwu = <span class="keyword">new</span> SpecialSupport(<span class="string">&quot;王五（只会解决编号为20的问题）&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        Support zhaoliu = <span class="keyword">new</span> OddSupport(<span class="string">&quot;赵六（只会解决奇数编号的问题）&quot;</span>);</span><br><span class="line">        <span class="comment">// 配置责任链</span></span><br><span class="line">        zhangsan.setNext(lisi).setNext(wangwu).setNext(zhaoliu);</span><br><span class="line">        System.out.println(<span class="string">&quot;责任链的顺序为：张三&#123;NoSupport&#125; --&gt; 李四&#123;LimitSupport&#125; --&gt; 王五&#123;SpecialSupport&#125; --&gt; 赵六&#123;OddSupport&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        zhangsan.support(<span class="keyword">new</span> Trouble(<span class="number">15</span>));</span><br><span class="line">        zhangsan.support(<span class="keyword">new</span> Trouble(<span class="number">20</span>));</span><br><span class="line">        zhangsan.support(<span class="keyword">new</span> Trouble(<span class="number">21</span>));</span><br><span class="line">        zhangsan.support(<span class="keyword">new</span> Trouble(<span class="number">22</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">责任链的顺序为：张三&#123;NoSupport&#125; --&gt; 李四&#123;LimitSupport&#125; --&gt; 王五&#123;SpecialSupport&#125; --&gt; 赵六&#123;OddSupport&#125;</span><br><span class="line">[15]问题已解决！处理人：&#123;李四（只会解决编号小于20的问题）&#125;</span><br><span class="line">[20]问题已解决！处理人：&#123;王五（只会解决编号为20的问题）&#125;</span><br><span class="line">[21]问题已解决！处理人：&#123;赵六（只会解决奇数编号的问题）&#125;</span><br><span class="line">[22]问题未解决！</span><br></pre></td></tr></table></figure><br><h3 id="常用场景和解决方案"><a href="#常用场景和解决方案" class="headerlink" title="常用场景和解决方案"></a>常用场景和解决方案</h3><ul><li>在运行时需要动态使用多个关联对象来处理同一次请求时，如请假流程。</li><li>不想让使用者知道具体的处理逻辑时，如权限校验的登录拦截器。</li><li>需要动态更换处理对象或处理顺序时。在处理者类中有对引用成员变量的设定方法，你将能动态地插入和移除处理者，或者改变其顺序。</li><li>当程序需要使用不同方式处理不同种类请求，而且请求类型和顺序预先未知时。该模式能将多个处理者连接成一条链。接收到请求后，它会“询问”每个处理者是否能够对其进行处理。这样所有处理者都有机会来处理请求。</li></ul><br><h3 id="模式的优缺点"><a href="#模式的优缺点" class="headerlink" title="模式的优缺点"></a>模式的优缺点</h3><table><thead><tr><th align="left">优点</th><th align="left">缺点</th></tr></thead><tbody><tr><td align="left">你可以控制请求处理的顺序。</td><td align="left">部分请求可能未被处理。</td></tr><tr><td align="left"><em>单一职责原则</em>。你可对发起操作和执行操作的类进行解耦。</td><td align="left"></td></tr><tr><td align="left"><em>开闭原则</em>。你可以在不更改现有代码的情况下在程序中新增处理者。</td><td align="left"></td></tr></tbody></table><h4 id="使用责任链模式的优势"><a href="#使用责任链模式的优势" class="headerlink" title="使用责任链模式的优势"></a>使用责任链模式的优势</h4><ul><li>降低客户端对象与处理链条上对象之间的耦合度。</li><li>提升系统扩展性。</li><li>增强了具体处理类的职责独立性。</li><li>简化了对象之间前后关联处理的复杂性。</li></ul><h4 id="使用责任链模式的劣势"><a href="#使用责任链模式的劣势" class="headerlink" title="使用责任链模式的劣势"></a>使用责任链模式的劣势</h4><ul><li>降低性能。</li><li>调试难度增大。</li><li>容易出现死锁异常，需要注意维护上下文关系的正确性。</li></ul><br><h3 id="拓展知识"><a href="#拓展知识" class="headerlink" title="拓展知识"></a>拓展知识</h3><ul><li><p>由于链的动态性，客户端需要准备好处理以下情况：</p><ul><li>链中可能只有单个链接。</li><li>部分请求可能无法到达链尾。</li><li>其他请求可能直到链尾都未被处理。</li></ul></li><li><p>责任链和装饰模式的类结构非常相似。两者都依赖递归组合将需要执行的操作传递给一系列对象。但是，两者有几点重要的不同之处。</p><ul><li>在责任链模式中，责任链的管理者可以相互独立地执行一切操作，还可以随时停止传递请求。 </li><li>在装饰器模式中，各种<em>装饰</em>可以在遵循基本接口的情况下扩展对象的行为。此外，装饰无法中断请求的传递。</li></ul></li><li><p>责任链通常和组合模式结合使用。在这种情况下，叶组件接收到请求后，可以将请求沿包含全体父组件的链一直传递至对象树的底部。</p></li><li><p>虽然责任链模式能让程序更加灵活但也会导致处理延迟。在面对需要非常快的处理速度时，责任链模式显然不是个好选择。</p></li></ul><br><br><p>🔙 <a href="/archives/364ea8cc.html" title="设计模式">设计模式</a></p><p><strong>📌最后：希望本文能够给您提供帮助，文章中有不懂或不正确的地方，请在下方评论区💬留言！</strong></p><p><strong>🔗参考文献：</strong></p><p>🌐 <a href="https://refactoringguru.cn/design-patterns#intro-patterns">设计模式 –refactoringguru</a></p><p>▶️ <a href="https://www.bilibili.com/video/BV1hY411Y7zR/?p=1&vd_source=a9a236c4d6e5c5350c70b71ee0727b8c">bilibili-趣学设计模式；黄靖锋. –拉勾教育</a></p><p>📖 图解设计模式 /（日）结城浩著；杨文轩译. –北京：人民邮电出版社，2017.1</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令模式Command</title>
      <link href="/archives/3849e3fb.html"/>
      <url>/archives/3849e3fb.html</url>
      
        <content type="html"><![CDATA[<h3 id="命令-Command"><a href="#命令-Command" class="headerlink" title="命令 Command"></a>命令 Command</h3><p><strong>命令模式</strong>是一种行为设计模式，它可将请求转换为一个包含与请求相关的所有信息的独立对象。该转换让你能根据不同的请求将方法参数化、延迟请求执行或将其放入队列中，且能实现可撤销操作。</p><p>命令模式的本质是<strong>对命令进行封装，将发出命令的责任和执行命令的责任分离开。</strong></p><br><h3 id="为什么要使用？"><a href="#为什么要使用？" class="headerlink" title="为什么要使用？"></a>为什么要使用？</h3><p><strong>命令模式的对象职责：</strong></p><p><strong>将一个请求封装为一个对象，从而可以参数化具体不同请求、队列或日志请求的其他对象，并支持可撤销的操作。</strong>命令模式是将一组操作封装在对象中而设计的。简单来说就是为了将函数方法封装为对象以方便传输。</p><p>👉 只关心具体的命令和动作，不想知道具体的接收者是谁以及如何操作。</p><p>🎈 命令模式将发送者与接收者解耦，让发送者只提供命令而不必知道命令到底是如何完成的。</p><p>👉 为了方便统计跟踪行为操作。</p><p>🎈 使用命令模式能够便携地记录数据的排序、序列化、跟踪、日志记录等操作。在一些需要读取大量数据的场景中，使用命令模式来读取上下文信息，能避免内存溢出的风险。</p><p>👉 为了围绕命令的维度来构建功能。</p><p>🎈 能够自由组合相关的命令，完成一系列的组合功能；还能避免使用者需要了解大量的代码实现逻辑，起到了隐藏代码逻辑的作用。</p><p>❓ 例如，在 Java 中使用 <code>GUI</code>。对于一个页面内的许多 <code>Button</code>，它们虽然都是点击，但却包含许多相同或不同的命令操作（打开、关闭 …）。我们要如何处理这些命令呢？在每个 <code>Button</code> 所在类中实现？这样会导致代码混乱且难以修改。同时也会出现很多重复代码，如，点击操作往往有对应的快捷键操作，它们实现逻辑一样但所用的 <code>Listener</code> 却不同。</p><p>⁉️ 在面向对象设计中提倡关注点分离。所以在处理图形化这方面的问题时，我们往往是将图形界面和业务逻辑进行分层。一个 <code>GUI</code> 对象传递一些参数来调用一个业务逻辑对象。这个过程通常被描述为一个对象发送请求给另一个对象。</p><p>❗ 在命令模式中，命令对象负责连接不同的 <code>GUI</code> 和业务逻辑对象。<code>GUI</code> 对象无需了解业务逻辑对象是否获得了请求，也无需了解其对请求进行处理的方式。<code>GUI</code> 对象触发命令即可，命令对象会自行处理所有细节工作。（命令的执行操作中通常没有参数，如何将请求的详情发送给接收者呢？可以使用数据对命令进行预先配置，或者让其能够自行获取数据。）</p><p>✅ 现在我们再使用 <code>Button</code> 时，则不需要在类中实现具体的逻辑操作。只需要在 <code>Button</code> 类中添加一个成员变量来存储对于命令对象的引用，并在点击后执行该命令即可。我们需要为每个可能的操作实现一系列命令类，并且根据 <code>Button</code> 所需行为将命令和 <code>Button</code> 连接起来。</p><br><h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><ul><li><strong>发送者</strong>（Sender）——亦称“调用者 （Invoker）”——类负责对请求进行初始化，其中必须包含一个成员变量来存储对于命令对象的引用。发送者触发命令，而不向接收者直接发送请求。注意，发送者并不负责创建命令对象：它通常会通过构造函数从客户端处获得预先生成的命令。</li><li><strong>命令</strong>（Command）接口通常仅声明一个执行命令的方法。</li><li><strong>具体命令</strong>（Concrete Commands）会实现各种类型的请求。具体命令自身并不完成工作，而是会将调用委派给一个业务逻辑对象。但为了简化代码，这些类可以进行合并。<font color="gray">接收对象执行方法所需的参数可以声明为具体命令的成员变量。你可以将命令对象设为不可变，仅允许通过构造函数对这些成员变量进行初始化。</font></li><li><strong>接收者</strong>（Receiver）类包含部分业务逻辑。几乎任何对象都可以作为接收者。绝大部分命令只处理如何将请求传递到接收者的细节，接收者自己会完成实际的工作。</li><li><strong>客户端</strong>（Client）会创建并配置具体命令对象。客户端必须将包括接收者实体在内的所有请求参数传递给命令的构造函数。此后，生成的命令就可以与一个或多个发送者相关联了。</li></ul><p><strong>命令模式的类图：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B23N001.png"></p><br><h3 id="模式实现"><a href="#模式实现" class="headerlink" title="模式实现"></a>模式实现</h3><p>该示例使用命令模式实现复制和粘贴功能。让调用者 <code>Invoker</code> 根据传入的命令 <code>Command</code>，执行命令。具体的命令 <code>Copy</code> 和 <code>Paste</code> 分别去调用接收者 <code>ControlConsole</code>（变量 <code>controlString</code> 表示控制台中的字符串，可被用户复制；变量 <code>copy</code> 表示剪切板的值，可被用户粘贴）的具体逻辑实现。相当于把调用者发出的命令和控制台接收者执行的命令中的命令（复制、粘贴）封装成对象，作为这两个类沟通的桥梁。</p><h4 id="示例程序的类图"><a href="#示例程序的类图" class="headerlink" title="示例程序的类图"></a>示例程序的类图</h4><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B23N002.png"></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="发送者"><a href="#发送者" class="headerlink" title="发送者"></a>发送者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 调用者 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Invoker</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 命令 */</span></span><br><span class="line">    <span class="keyword">private</span> Command command;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定命令</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> command</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommand</span><span class="params">(Command command)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.command = command;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 调用命令 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeCommand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (command != <span class="keyword">null</span>) &#123;</span><br><span class="line">            command.execute();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 命令接口 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 执行命令 */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="具体命令"><a href="#具体命令" class="headerlink" title="具体命令"></a>具体命令</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 复制命令 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Copy</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 具体实现命令逻辑的接收者 */</span></span><br><span class="line">    <span class="keyword">private</span> ControlConsole console;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Copy</span><span class="params">(ControlConsole console)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.console = console;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 执行命令 */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        console.copyConsole();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 粘贴命令 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Paste</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 具体实现命令逻辑的接收者 */</span></span><br><span class="line">    <span class="keyword">private</span> ControlConsole console;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Paste</span><span class="params">(ControlConsole console)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.console = console;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 执行命令 */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        console.pasteConsole();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="接收者"><a href="#接收者" class="headerlink" title="接收者"></a>接收者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 控制台接收者，实现具体业务逻辑 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControlConsole</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 保存输出到控制台的字符串，用于复制 */</span></span><br><span class="line">    <span class="keyword">private</span> StringBuffer controlString = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="comment">/** 剪切板 */</span></span><br><span class="line">    <span class="keyword">private</span> String copy = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 复制控制台内容 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyConsole</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        copy = <span class="string">&quot;&#123;剪切板的内容&#125;&lt;&lt;&quot;</span> + controlString.toString() + <span class="string">&quot;&gt;&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 粘贴到控制台 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pasteConsole</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(copy);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新控制台字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s 输出在控制台的字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setControlString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        controlString.append(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> example.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 测试命令模式 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String input = <span class="string">&quot;Hello world!&quot;</span>;</span><br><span class="line">        <span class="comment">// 创建接收者</span></span><br><span class="line">        ControlConsole console = <span class="keyword">new</span> ControlConsole();</span><br><span class="line">        <span class="comment">// 为命令绑定接收者（具体命令逻辑实现）</span></span><br><span class="line">        Command copy = <span class="keyword">new</span> Copy(console);</span><br><span class="line">        Command paste = <span class="keyword">new</span> Paste(console);</span><br><span class="line"></span><br><span class="line">        Invoker invoker = <span class="keyword">new</span> Invoker();</span><br><span class="line">        System.out.println(<span class="string">&quot;控制台无字符，执行copy操作：&quot;</span>);</span><br><span class="line">        invoker.setCommand(copy);</span><br><span class="line">        invoker.executeCommand();</span><br><span class="line">        invoker.setCommand(paste);</span><br><span class="line">        invoker.executeCommand();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\n------------------- 分割线 -------------------\n&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;控制台字符为：&quot;</span> + input);</span><br><span class="line">        console.setControlString(input);</span><br><span class="line">        System.out.println(<span class="string">&quot;控制台有字符，执行copy操作：&quot;</span>);</span><br><span class="line">        invoker.setCommand(copy);</span><br><span class="line">        invoker.executeCommand();</span><br><span class="line">        invoker.setCommand(paste);</span><br><span class="line">        invoker.executeCommand();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">控制台无字符，执行copy操作：</span><br><span class="line">&#123;剪切板的内容&#125;&lt;&lt;&gt;&gt;</span><br><span class="line"></span><br><span class="line">------------------- 分割线 -------------------</span><br><span class="line"></span><br><span class="line">控制台字符为：Hello world!</span><br><span class="line">控制台有字符，执行copy操作：</span><br><span class="line">&#123;剪切板的内容&#125;&lt;&lt;Hello world!&gt;&gt;</span><br></pre></td></tr></table></figure><br><h3 id="常用场景和解决方案"><a href="#常用场景和解决方案" class="headerlink" title="常用场景和解决方案"></a>常用场景和解决方案</h3><ul><li>需要通过操作来参数化对象时。例如，在图形化页面中点击获取下列列表的同时还能点击菜单项。</li><li>想要将操作放入队列、按顺序执行脚本操作或者执行一些远程操作命令时。</li><li>实现操作回滚功能的场景时，命令模式能够更好地记录命令操作顺序和相关上下文。</li><li><code>Shell</code> 脚本类似命令模式的调用者 <code>Invoker</code>，脚本命令如 <code>cat</code> 就等同于命令 <code>Command</code>，而 bash shell 就是作为接收者 <code>Receiver</code> 来具体实现执行命令的。</li></ul><br><h3 id="模式的优缺点"><a href="#模式的优缺点" class="headerlink" title="模式的优缺点"></a>模式的优缺点</h3><table><thead><tr><th align="left">优点</th><th align="left">缺点</th></tr></thead><tbody><tr><td align="left"><em>单一职责原则</em>。你可以解耦触发和执行操作的类。</td><td align="left">代码可能会变得更加复杂，因为你在发送者和接收者之间增加了一个全新的层次。</td></tr><tr><td align="left"><em>开闭原则</em>。你可以在不修改已有客户端代码的情况下在程序中创建新的命令。</td><td align="left">不同的接收者需要实现重复的命令。</td></tr><tr><td align="left">你可以实现撤销和恢复功能。</td><td align="left">当命令中涉及对象状态变化时，可能导致不同的结果出现。</td></tr><tr><td align="left">你可以实现操作的延迟执行。</td><td align="left"></td></tr><tr><td align="left">你可以将一组简单命令组合成一个复杂命令。</td><td align="left"></td></tr></tbody></table><br><h3 id="拓展知识"><a href="#拓展知识" class="headerlink" title="拓展知识"></a>拓展知识</h3><ul><li>命令模式并不仅限于操作系统的命令，在实际的业务开发中，可能是对应的一组复杂的代码调用逻辑。</li><li>你可以同时使用命令和备忘录模式来实现“撤销”。在这种情况下，命令用于对目标对象执行各种不同的操作，备忘录用来保存一条命令执行前该对象的状态。</li><li>命令和策略模式看上去很像，因为两者都能通过某些行为来参数化对象。但是，它们的意图有非常大的不同。<ul><li>你可以使用<em>命令</em>来将任何操作转换为对象。操作的参数将成为对象的成员变量。你可以通过转换来延迟操作的执行、将操作放入队列、保存历史命令或者向远程服务发送命令等。</li><li>另一方面，<em>策略</em>通常可用于描述完成某件事的不同方式，让你能够在同一个上下文类中切换算法。</li></ul></li></ul><br><br><p>🔙 <a href="/archives/364ea8cc.html" title="设计模式">设计模式</a></p><p><strong>📌最后：希望本文能够给您提供帮助，文章中有不懂或不正确的地方，请在下方评论区💬留言！</strong></p><p><strong>🔗参考文献：</strong></p><p>🌐 <a href="https://refactoringguru.cn/design-patterns#intro-patterns">设计模式 –refactoringguru</a></p><p>▶️ <a href="https://www.bilibili.com/video/BV1hY411Y7zR/?p=1&vd_source=a9a236c4d6e5c5350c70b71ee0727b8c">bilibili-趣学设计模式；黄靖锋. –拉勾教育</a></p><p>📖 图解设计模式 /（日）结城浩著；杨文轩译. –北京：人民邮电出版社，2017.1</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组合模式Composite</title>
      <link href="/archives/d504222d.html"/>
      <url>/archives/d504222d.html</url>
      
        <content type="html"><![CDATA[<h3 id="组合-Composite"><a href="#组合-Composite" class="headerlink" title="组合 Composite"></a>组合 Composite</h3><p><strong>组合模式</strong>是一种结构型设计模式，你可以使用它将对象组合成树状结构，并且能像使用独立对象一样使用它们。</p><p>将对象组合成<strong>树形结构</strong>以表示整个部分的层次结构。组合模式可以<strong>让用户统一对待</strong>单个对象和对象的组合。</p><br><h3 id="为什么要使用？"><a href="#为什么要使用？" class="headerlink" title="为什么要使用？"></a>为什么要使用？</h3><p><strong>组合模式的对象职责：</strong></p><p><strong>将对象组合成树状结构，并且能像使用独立对象一样使用它们。</strong></p><p>组合模式就是一种容器与内容组合在一起的模式。它能够<strong>使容器与内容具有一致性</strong>。</p><p>例如，在文件系统中，有文件夹📁和文件📄两种对象，它们间的层级关系就是树状关系🌲。文件夹属于容器、文件属于内容，但是它们都属于目录条目。所以我们能像使用独立对象一样使用它们。</p><p>那么在树状结构中，树节点就是容器🫙，能够承载更多的树节点和叶子节点，叶子节点就是内容。它们都属于节点，可以组合成一棵树。两者不同的是树节点会记录它的子节点而已。</p><p>如果你有以下需求，可以考虑使用组合模式。</p><ol><li>希望一组对象按照某种层级结构进行管理。</li><li>需要按照统一的行为来处理复杂结构中的对象。</li><li>能够快速拓展对象组合。</li></ol><br><h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><ul><li><p><strong>组件</strong>（Component）接口描述了树中简单项目和复杂项目所共有的操作。</p></li><li><p><strong>叶节点</strong>（Leaf）是树的基本结构，它不包含子项目。<font color="gray">一般情况下，叶节点最终会完成大部分的实际工作，因为它们无法将工作指派给其他部分。</font></p></li><li><p><strong>容器</strong>（Container）——又名“组合（Composite）”——是包含叶节点或其他容器等子项目的单位。容器不知道其子项目所属的具体类，它只通过通用的组件接口与其子项目交互。<font color="gray">容器接收到请求后会将工作分配给自己的子项目，处理中间结果，然后将最终结果返回给客户端。</font></p></li><li><p><strong>客户端</strong>（Client）通过组件接口与所有项目交互。因此，客户端能以相同方式与树状结构中的简单或复杂项目交互。</p></li></ul><p><strong>组合模式的类图：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B09N001.png"></p><br><h3 id="模式实现"><a href="#模式实现" class="headerlink" title="模式实现"></a>模式实现</h3><p>文件中只包含自己的信息，属于单个对象；文件夹中能够存储文件和文件夹，属于组合对象。该示例使用组合模式将文件和文件夹归为目录条目，使其具有一致性，方便管理。</p><h4 id="示例程序的类图"><a href="#示例程序的类图" class="headerlink" title="示例程序的类图"></a>示例程序的类图</h4><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B09N002.png"></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 目录条目抽象组件 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Entry</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取文件夹或文件名字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 文件夹或文件名字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取文件夹的子文件夹和子文件总数或文件大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 文件夹的子文件夹和子文件总数或文件大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印文件夹或文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prefix 父文件夹路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printList</span><span class="params">(String prefix)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="叶节点"><a href="#叶节点" class="headerlink" title="叶节点"></a>叶节点</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 文件叶节点 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">File</span> <span class="keyword">implements</span> <span class="title">Entry</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 文件名 */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">/** 文件大小 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">File</span><span class="params">(String name, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.size = size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取文件夹或文件名字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 文件夹或文件名字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取文件夹的子文件夹和子文件总数或文件大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 文件夹的子文件夹和子文件总数或文件大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印文件夹或文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prefix 父文件夹路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printList</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">        System.out.println(prefix + <span class="string">&quot;/&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 文件夹容器 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Directory</span> <span class="keyword">implements</span> <span class="title">Entry</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 文件夹名 */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">/** 子文件列表 */</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Entry&gt; directory = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Directory</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加文件夹或文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entry 文件夹或文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前文件夹</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Entry <span class="title">add</span><span class="params">(Entry entry)</span> </span>&#123;</span><br><span class="line">        directory.add(entry);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取文件夹或文件名字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 文件夹或文件名字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取文件夹的子文件夹和子文件总数或文件大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 文件夹的子文件夹和子文件总数或文件大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> directory.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印文件夹或文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prefix 父文件夹路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printList</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">        String path = prefix + <span class="string">&quot;/&quot;</span> + name;</span><br><span class="line">        System.out.println(path);</span><br><span class="line">        <span class="keyword">for</span> (Entry entry : directory) &#123;</span><br><span class="line">            entry.printList(path);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> example.Directory;</span><br><span class="line"><span class="keyword">import</span> example.File;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 测试组合模式 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File txt = <span class="keyword">new</span> File(<span class="string">&quot;test.txt&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        File png = <span class="keyword">new</span> File(<span class="string">&quot;test.png&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        Directory root = <span class="keyword">new</span> Directory(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        Directory child = <span class="keyword">new</span> Directory(<span class="string">&quot;child&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;root文件夹添加child文件夹：&quot;</span>);</span><br><span class="line">        root.add(child).printList(<span class="string">&quot;~&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;文件数量：&quot;</span> + root.getSize());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\nroot文件夹添加test.png文件：&quot;</span>);</span><br><span class="line">        root.add(png).printList(<span class="string">&quot;~&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;文件数量：&quot;</span> + root.getSize());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\nchild文件夹添加test.txt文件：&quot;</span>);</span><br><span class="line">        child.add(txt).printList(<span class="string">&quot;~/root&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;文件数量：&quot;</span> + child.getSize());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root文件夹添加child文件夹：</span><br><span class="line">~/root</span><br><span class="line">~/root/child</span><br><span class="line">文件数量：1</span><br><span class="line"></span><br><span class="line">root文件夹添加test.png文件：</span><br><span class="line">~/root</span><br><span class="line">~/root/child</span><br><span class="line">~/root/test.png</span><br><span class="line">文件数量：2</span><br><span class="line"></span><br><span class="line">child文件夹添加test.txt文件：</span><br><span class="line">~/root/child</span><br><span class="line">~/root/child/test.txt</span><br><span class="line">文件数量：1</span><br></pre></td></tr></table></figure><p>你也可以在 <code>Entry</code> 接口中加入获取父类文件路径的方法，就无需在创建 <code>File</code> 和 <code>Directory</code> 时，直接输入字符串常量。</p><br><h3 id="常用场景和解决方案"><a href="#常用场景和解决方案" class="headerlink" title="常用场景和解决方案"></a>常用场景和解决方案</h3><ul><li>处理一个树型结构。比如，公司人员组织架构、订单信息等。</li><li>跨越多个层次结构聚合数据。比如，统计文件夹下文件总数。</li><li>统一处理一个结构中的多个对象。比如，遍历文件夹下所有 <code>XML</code> 类型文件内容。</li><li>如果你希望客户端代码以相同方式处理简单和复杂元素，可以使用该模式。组合模式中定义的所有元素共用同一个接口。在这一接口的帮助下，客户端不必在意其所使用的对象的具体类。</li></ul><br><h3 id="模式的优缺点"><a href="#模式的优缺点" class="headerlink" title="模式的优缺点"></a>模式的优缺点</h3><table><thead><tr><th align="left">优点</th><th align="left">缺点</th></tr></thead><tbody><tr><td align="left">你可以利用多态和递归机制更方便地使用复杂树结构。</td><td align="left">对于功能差异较大的类，提供公共接口或许会有困难。在特定情况下，你需要过度一般化组件接口，使其变得令人难以理解。</td></tr><tr><td align="left"><em>开闭原则</em>。无需更改现有代码，你就可以在应用中添加新元素，使其成为对象树的一部分。</td><td align="left"></td></tr></tbody></table><h4 id="使用组合模式的优势"><a href="#使用组合模式的优势" class="headerlink" title="使用组合模式的优势"></a>使用组合模式的优势</h4><ul><li>清晰定义分层结构。</li><li>快速新增节点，提升组合灵活性。</li><li>简化了使用者使用复杂结构数据的代码。组合模式为你提供了两种共享公共接口的基本元素类型：简单叶节点和复杂容器。容器中可以包含叶节点和其他容器。这使得你可以构建树状嵌套递归对象结构。</li></ul><h4 id="使用组合模式的劣势"><a href="#使用组合模式的劣势" class="headerlink" title="使用组合模式的劣势"></a>使用组合模式的劣势</h4><ul><li>难以限制节点类型。</li><li>需要增加很多运行时的检查，增加了代码复杂度。</li><li>错误的遍历算法可能会影响系统性能。</li></ul><br><h3 id="拓展知识"><a href="#拓展知识" class="headerlink" title="拓展知识"></a>拓展知识</h3><ul><li>你可以在创建复杂组合树时使用生成器模式，因为这可使其构造步骤以递归的方式运行。</li><li>责任链模式通常和组合模式结合使用。在这种情况下，叶组件接收到请求后，可以将请求沿包含全体父组件的链一直传递至对象树的底部。</li><li>你可以使用迭代器模式来遍历组合树。</li><li>你可以使用访问者模式对整个组合树执行操作。</li><li>你可以使用享元模式实现组合树的共享叶节点以节省内存。</li></ul><br><br><p>🔙 <a href="/archives/364ea8cc.html" title="设计模式">设计模式</a></p><p><strong>📌最后：希望本文能够给您提供帮助，文章中有不懂或不正确的地方，请在下方评论区💬留言！</strong></p><p><strong>🔗参考文献：</strong></p><p>🌐 <a href="https://refactoringguru.cn/design-patterns#intro-patterns">设计模式 –refactoringguru</a></p><p>▶️ <a href="https://www.bilibili.com/video/BV1hY411Y7zR/?p=1&vd_source=a9a236c4d6e5c5350c70b71ee0727b8c">bilibili-趣学设计模式；黄靖锋. –拉勾教育</a></p><p>📖 图解设计模式 /（日）结城浩著；杨文轩译. –北京：人民邮电出版社，2017.1</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>装饰模式Decorator</title>
      <link href="/archives/6b25bc2a.html"/>
      <url>/archives/6b25bc2a.html</url>
      
        <content type="html"><![CDATA[<h3 id="装饰-Decorator"><a href="#装饰-Decorator" class="headerlink" title="装饰 Decorator"></a>装饰 Decorator</h3><p><strong>装饰模式</strong>是一种结构型设计模式，允许你通过将对象放入包含行为的特殊封装对象中来为原对象绑定新的行为。或者说允许动态地向一个现有的对象添加新的功能同时又不改变其结构，相当于对现有的对象进行了一个包装。所以装饰模式也称“包装器模式”。</p><br><h3 id="为什么要使用？"><a href="#为什么要使用？" class="headerlink" title="为什么要使用？"></a>为什么要使用？</h3><p><strong>装饰模式的对象职责：</strong></p><p><strong>动态地向一个现有的对象添加新的功能同时又不改变其结构。</strong></p><p>对于一些无法通过继承来扩展功能的类或一些难以扩展功能的类，可以使用装饰模式来动态地添加新的功能。</p><p>例如，在一个原始的文件类中，文件内容明文保存。现在有部分文件需要让内容加密，就可以使用装饰模式给它添加加解密功能。如果还需要将大文件压缩，可以在加解密外层再添加一个压缩解压缩的装饰器。使其变成一种链式结构：<code>明文 -&gt; 加密 -&gt; 压缩</code>、<code>解压 -&gt; 解密 -&gt; 明文</code>。</p><p><strong>装饰模式是一种纵向扩展的模式，能够动态扩展。</strong>就像套娃玩具🪆一样，一层套一层，不打开它，你永远不知道是不是最后一层。每个套娃都能打开，这就像一种统一的行为，无论套多少层，它都不会改变。装饰模式也一样，<strong>要确保被装饰物的接口 <code>API</code> 的透明性，无论添加多少装饰器都要保证不改变“被装饰物的 <code>API</code>”。</strong></p><br><h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><ul><li><p><strong>部件</strong>（Component）声明封装器和被封装对象的公用接口。</p></li><li><p><strong>具体部件</strong>（Concrete Component）类是被封装对象所属的类。它定义了基础行为，但装饰类可以改变这些行为。</p></li><li><p><strong>基础装饰</strong>（Base Decorator）类拥有一个指向被封装对象的引用成员变量。该变量的类型应当被声明为通用部件接口，这样它就可以引用具体的部件和装饰。装饰基类会将所有操作委派给被封装的对象。</p></li><li><p><strong>具体装饰类</strong>（Concrete Decorators）定义了可动态添加到部件的额外行为。具体装饰类会重写装饰基类的方法，并在调用父类方法之前或之后进行额外的行为。</p></li><li><p><strong>客户端</strong>（Client）可以使用多层装饰来封装部件，只要它能使用通用接口与所有对象互动即可。</p></li></ul><p><strong>装饰模式的类图：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B10N001.png"></p><ul><li><p>装饰模式让原始类（Concrete Component）和装饰类（Base Decorator）分离开来。</p></li><li><p>让装饰类基类（Base Decorator）在原始类（Concrete Component）的基础上扩展新功能。</p></li><li><p>让具体装饰类（Concrete decorators）在装饰类基类（Base Decorator）的基础上扩展新功能。</p></li></ul><br><h3 id="模式实现"><a href="#模式实现" class="headerlink" title="模式实现"></a>模式实现</h3><p>该示例使用装饰器模式为原始数据提供加解密和压缩解压缩的装饰，使原始数据可以使用一种链式结构任意加密压缩或压缩加密。该示例中加解密和压缩解压缩只用字符串标识。</p><h4 id="示例程序的类图"><a href="#示例程序的类图" class="headerlink" title="示例程序的类图"></a>示例程序的类图</h4><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B10N002.png"></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="部件"><a href="#部件" class="headerlink" title="部件"></a>部件</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 数据源接口部件 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DataSource</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写入数据源字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 数据源字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(String data)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取数据源字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数据源字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">read</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="具体部件"><a href="#具体部件" class="headerlink" title="具体部件"></a>具体部件</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 字符串数据具体部件 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringData</span> <span class="keyword">implements</span> <span class="title">DataSource</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 数据 */</span></span><br><span class="line">    <span class="keyword">private</span> String data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写入数据源字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 数据源字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取数据源字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数据源字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data != <span class="keyword">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(data)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;\n[储存的字符串]&quot;</span> + data + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="基础装饰"><a href="#基础装饰" class="headerlink" title="基础装饰"></a>基础装饰</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 基础装饰 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDecorator</span> <span class="keyword">implements</span> <span class="title">DataSource</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 被装饰的类 */</span></span><br><span class="line">    <span class="keyword">private</span> DataSource wrapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseDecorator</span><span class="params">(DataSource wrapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.wrapper = wrapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写入数据源字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 数据源字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (wrapper != <span class="keyword">null</span>) &#123;</span><br><span class="line">            wrapper.write(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取数据源字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数据源字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (wrapper != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> wrapper.read();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="具体装饰类"><a href="#具体装饰类" class="headerlink" title="具体装饰类"></a>具体装饰类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 加解密具体装饰类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncryptionDecorator</span> <span class="keyword">extends</span> <span class="title">BaseDecorator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EncryptionDecorator</span><span class="params">(DataSource wrapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(wrapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写入数据源字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 数据源字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.write(encode(data));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取数据源字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数据源字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> decode(<span class="keyword">super</span>.read());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 明文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 密文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">encode</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;(encode)&quot;</span> + data + <span class="string">&quot;(encode)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解密</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 密文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 明文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">decode</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;\n(decode)&quot;</span> + data + <span class="string">&quot;(decode)\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 压缩解压缩装饰类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompressionDecorator</span> <span class="keyword">extends</span> <span class="title">BaseDecorator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CompressionDecorator</span><span class="params">(DataSource wrapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(wrapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写入数据源字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 数据源字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.write(compress(data));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取数据源字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数据源字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> decompress(<span class="keyword">super</span>.read());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 压缩</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 压缩后的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">compress</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;(compress)&quot;</span> + data + <span class="string">&quot;(compress)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解压</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 压缩后的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 原始数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">decompress</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;\n(decompress)&quot;</span> + data + <span class="string">&quot;(decompress)\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> example.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 测试装饰模式 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String data = <span class="string">&quot;Hello world!&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;字符串：&quot;</span> + data);</span><br><span class="line">        System.out.println(<span class="string">&quot;使用装饰器前：&quot;</span>);</span><br><span class="line">        DataSource before = <span class="keyword">new</span> StringData();</span><br><span class="line">        before.write(data);</span><br><span class="line">        System.out.println(<span class="string">&quot;读出的数据为：&quot;</span> + before.read());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\n--------------------- 分割线 ---------------------\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;使用装饰器后（加密压缩）：&quot;</span>);</span><br><span class="line">        BaseDecorator encryptionDecorator = <span class="keyword">new</span> EncryptionDecorator(before);</span><br><span class="line">        encryptionDecorator.write(data);</span><br><span class="line">        System.out.println(<span class="string">&quot;只有加密读出的数据为：&quot;</span> + encryptionDecorator.read());</span><br><span class="line"></span><br><span class="line">        BaseDecorator compressionDecorator = <span class="keyword">new</span> CompressionDecorator(before);</span><br><span class="line">        compressionDecorator.write(data);</span><br><span class="line">        System.out.println(<span class="string">&quot;只有压缩读出的数据为：&quot;</span> + compressionDecorator.read());</span><br><span class="line"></span><br><span class="line">        BaseDecorator encryptionAndCompressionDecorator = <span class="keyword">new</span> CompressionDecorator(<span class="keyword">new</span> EncryptionDecorator(before));</span><br><span class="line">        encryptionAndCompressionDecorator.write(data);</span><br><span class="line">        System.out.println(<span class="string">&quot;加密压缩读出的数据为：&quot;</span> + encryptionAndCompressionDecorator.read());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">字符串：Hello world!</span><br><span class="line">使用装饰器前：</span><br><span class="line">读出的数据为：</span><br><span class="line">[储存的字符串]Hello world!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--------------------- 分割线 ---------------------</span><br><span class="line"></span><br><span class="line">使用装饰器后（加密压缩）：</span><br><span class="line">只有加密读出的数据为：</span><br><span class="line">(decode)</span><br><span class="line">[储存的字符串](encode)Hello world!(encode)</span><br><span class="line">(decode)</span><br><span class="line"></span><br><span class="line">只有压缩读出的数据为：</span><br><span class="line">(decompress)</span><br><span class="line">[储存的字符串](compress)Hello world!(compress)</span><br><span class="line">(decompress)</span><br><span class="line"></span><br><span class="line">加密压缩读出的数据为：</span><br><span class="line">(decompress)</span><br><span class="line">(decode)</span><br><span class="line">[储存的字符串](encode)(compress)Hello world!(compress)(encode)</span><br><span class="line">(decode)</span><br><span class="line">(decompress)</span><br></pre></td></tr></table></figure><p>从结果可以看出加密压缩后字符串变为 <code>(encode)(compress)Hello world!(compress)(encode)</code>，然后要先 <code>(decode)</code>，再进行 <code>(decompress)</code>，才能变为原始字符串 <code>Hello world!</code>。从结果我们可以清楚地看出装饰器的调用顺序是递归栈（先压缩再加密的字符串，需要先解密再解压才能得到原始字符串）。所以，在使用装饰模式时，我们要明确装饰器的调用顺序。</p><br><h3 id="常用场景和解决方案"><a href="#常用场景和解决方案" class="headerlink" title="常用场景和解决方案"></a>常用场景和解决方案</h3><ul><li>快速<strong>动态</strong>扩展和撤销一个类的功能场景。</li><li>可以通过顺序组合包装的方式来附加扩张功能的场景。比如在原始类中加入加解密的装饰器，加解密外层再加入压缩解压缩的装饰器。</li><li>使用装饰模式可以扩展老旧功能的类，而不改变该类本身。同时新拓展的功能可以任意组合、拆卸。</li><li>不支持继承扩展类的场景。例如，许多编程语言使用 <code>final</code> 关键字来限制对某个类的进一步扩展。复用最终类已有行为的唯一方法是使用装饰模式：用封装器对其进行封装。</li></ul><br><h3 id="模式的优缺点"><a href="#模式的优缺点" class="headerlink" title="模式的优缺点"></a>模式的优缺点</h3><table><thead><tr><th align="left">优点</th><th align="left">缺点</th></tr></thead><tbody><tr><td align="left">你无需创建新子类即可扩展对象的行为。</td><td align="left">在封装器栈中删除特定封装器比较困难。</td></tr><tr><td align="left">你可以在运行时添加或删除对象的功能。</td><td align="left">实现行为不受装饰栈顺序影响的装饰比较困难。</td></tr><tr><td align="left">你可以用多个装饰封装对象来组合几种行为。</td><td align="left">各层的初始化配置代码看上去可能会很糟糕。</td></tr><tr><td align="left"><em>单一职责原则</em>。你可以将实现了许多不同行为的一个大类拆分为多个较小的类。</td><td align="left">增加问题定位和后期代码维护成本。</td></tr></tbody></table><br><h3 id="拓展知识"><a href="#拓展知识" class="headerlink" title="拓展知识"></a>拓展知识</h3><ul><li>适配器模式侧重于转换，装饰模式侧重于动态扩展。</li><li>桥接模式侧重于横向宽度的扩展，装饰模式侧重于纵向深度的扩展。</li><li>一般情况下不建议装饰器超过 10 个，如果超过要考虑重构组件功能。</li><li>对于没有上下逻辑的装饰器要尽量避免使用装饰模式。</li><li>装饰模式是一种递归组合的模式。</li></ul><br><br><p>🔙 <a href="/archives/364ea8cc.html" title="设计模式">设计模式</a></p><p><strong>📌最后：希望本文能够给您提供帮助，文章中有不懂或不正确的地方，请在下方评论区💬留言！</strong></p><p><strong>🔗参考文献：</strong></p><p>🌐 <a href="https://refactoringguru.cn/design-patterns#intro-patterns">设计模式 –refactoringguru</a></p><p>▶️ <a href="https://www.bilibili.com/video/BV1hY411Y7zR/?p=1&vd_source=a9a236c4d6e5c5350c70b71ee0727b8c">bilibili-趣学设计模式；黄靖锋. –拉勾教育</a></p><p>📖 图解设计模式 /（日）结城浩著；杨文轩译. –北京：人民邮电出版社，2017.1</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>外观模式Facade</title>
      <link href="/archives/e84744ee.html"/>
      <url>/archives/e84744ee.html</url>
      
        <content type="html"><![CDATA[<h3 id="外观-Facade"><a href="#外观-Facade" class="headerlink" title="外观 Facade"></a>外观 Facade</h3><p><strong>外观模式</strong>是一种结构型设计模式，能为程序库、框架或其他复杂类提供一个简单的接口或为子系统中的一组接口提供统一的接口。它定义了一个更高级别的接口，使子系统更易于使用。</p><p>外观模式的本质是<strong>简化调用，统一操作。</strong></p><br><h3 id="为什么要使用？"><a href="#为什么要使用？" class="headerlink" title="为什么要使用？"></a>为什么要使用？</h3><p><strong>外观模式的对象职责：</strong></p><p><strong>为一些类提供一个简单或统一的接口。</strong></p><p>例如，使用 <code>Slf4j</code> 日志🗒️框架统一 <code>log4j</code>、<code>log4j2</code>、<code>CommonLog</code> 等日志框架。<code>Slf4j</code> 作为一个日志门面让我们无需关注日志实现就能实现日志功能。即使未来会出现更多的日志实现，只要依赖日志门面开发，那么就不需要额外的学习成本去学习新的日志框架。而且，就算后期系统需要更换日志实现，也不需要修改代码。只需要变更日志门面依赖的日志实现即可。</p><p>外观模式能让复杂的东西看起来简单，当我们在向其他人说使用这个类需要先调用那个类，还要在那个类注册一下时，我们就需要使用外观模式来统一并简化接口了。除此之外，在解决遗留系统重构的问题或分层架构中的扩展问题等也能使用外观模式。</p><br><h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><ul><li><strong>外观</strong>（Facade）提供了一种访问特定子系统功能的便捷方式，其了解如何重定向客户端请求，知晓如何操作一切活动部件。</li><li>创建<strong>附加外观</strong>（Additional Facade）类可以避免多种不相关的功能污染单一外观，使其变成又一个复杂结构。客户端和其他外观都可使用附加外观。</li><li><strong>复杂子系统</strong>（Complex Subsystem）由数十个不同对象构成。如果要用这些对象完成有意义的工作，你必须深入了解子系统的实现细节，比如按照正确顺序初始化对象和为其提供正确格式的数据。<font color="gray">子系统类不会意识到外观的存在， 它们在系统内运作并且相互之间可直接进行交互。</font></li><li><strong>客户端</strong>（Client）使用外观代替对子系统对象的直接调用。</li></ul><p><strong>外观模式的类图：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B11N001.png"></p><p>从类图中，我们可以看出外观模式并没有具体的实现。</p><p>外观模式本身并不是一个代码实现的模式，而是组合更多的其他模式来使用的一种通用解决方案。</p><br><h3 id="模式实现"><a href="#模式实现" class="headerlink" title="模式实现"></a>模式实现</h3><p>该示例使用外观模式来为 Markdown 文档提供一个简单的生成接口。</p><h4 id="示例程序的类图"><a href="#示例程序的类图" class="headerlink" title="示例程序的类图"></a>示例程序的类图</h4><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B11N002.png"></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="外观"><a href="#外观" class="headerlink" title="外观"></a>外观</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 外观类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageMaker</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">PageMaker</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 简化接口，生成欢迎页面 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">makeWelcomePage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MarkdownWriter markdownWriter = <span class="keyword">new</span> MarkdownWriter();</span><br><span class="line">        String bilibili = Database.getProperties(<span class="string">&quot;Bilibili&quot;</span>);</span><br><span class="line">        String bing = Database.getProperties(<span class="string">&quot;Bing&quot;</span>);</span><br><span class="line">        String hellovie = Database.getProperties(<span class="string">&quot;Hellovie&quot;</span>);</span><br><span class="line">        String github = Database.getProperties(<span class="string">&quot;Github&quot;</span>);</span><br><span class="line">        markdownWriter.printTitle(<span class="string">&quot;欢迎页面&quot;</span>);</span><br><span class="line">        markdownWriter.printQuote(<span class="string">&quot;软件设计模式（Design pattern），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性、程序的重用性。&quot;</span>);</span><br><span class="line">        markdownWriter.printParagraph(<span class="string">&quot;上个世纪 90 年代，Eric Gamma、Richard Helm、Ralph Johnson、John Vlissides 等 4 人合作出版了《设计模式：可复用面向对象软件的基础》。而 “设计模式” 这个概念也是从中而来。这 4 人也被称为 the Gang of Four，简称 GoF。\n&quot;</span> + <span class="string">&quot;\n&quot;</span> + <span class="string">&quot;“设计模式” 共 23 种，是一种能够提高代码可复用性、可维护性、可读性、稳健性以及安全性的解决方案。它是解决某些特定问题的一般性概念，能够根据需求进行调整，用于解决代码中反复出现的设计问题。\n&quot;</span> + <span class="string">&quot;\n&quot;</span> + <span class="string">&quot;合理利用 “设计模式” 开发会给我们带来很多的便利。而如何合理的运用就在于学会 “找到变化，封装变化”。\n&quot;</span>);</span><br><span class="line">        markdownWriter.printTitle(<span class="string">&quot;其他链接&quot;</span>);</span><br><span class="line">        markdownWriter.printLink(hellovie, <span class="string">&quot;博客主页&quot;</span>);</span><br><span class="line">        markdownWriter.printLink(bing, <span class="string">&quot;必应&quot;</span>);</span><br><span class="line">        markdownWriter.printLink(github, <span class="string">&quot;Github&quot;</span>);</span><br><span class="line">        markdownWriter.printLink(bilibili, <span class="string">&quot;哔哩哔哩&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="复杂子系统"><a href="#复杂子系统" class="headerlink" title="复杂子系统"></a>复杂子系统</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 获取数据的子系统类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Database</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Database</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getProperties</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">4</span>);</span><br><span class="line">        map.put(<span class="string">&quot;Bilibili&quot;</span>, <span class="string">&quot;https://www.bilibili.com&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;Bing&quot;</span>, <span class="string">&quot;https://cn.bing.com&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;Hellovie&quot;</span>, <span class="string">&quot;https://hellovie.github.io&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;Github&quot;</span>, <span class="string">&quot;https://github.com&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(name)) &#123;</span><br><span class="line">            <span class="keyword">return</span> map.get(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 生成markdown的子系统类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MarkdownWriter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印标题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title 标题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printTitle</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;## &quot;</span> + title);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印链接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> link 链接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 名字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printLink</span><span class="params">(String link, String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;* [&quot;</span> + name + <span class="string">&quot;](&quot;</span> + link + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印正文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printParagraph</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        System.out.println(content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印引用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printQuote</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;&gt; &quot;</span> + content + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> example.PageMaker;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 测试外观模式 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PageMaker.makeWelcomePage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">## 欢迎页面</span></span><br><span class="line"><span class="quote">&gt; 软件设计模式（Design pattern），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性、程序的重用性。</span></span><br><span class="line"></span><br><span class="line">上个世纪 90 年代，Eric Gamma、Richard Helm、Ralph Johnson、John Vlissides 等 4 人合作出版了《设计模式：可复用面向对象软件的基础》。而 “设计模式” 这个概念也是从中而来。这 4 人也被称为 the Gang of Four，简称 GoF。</span><br><span class="line"></span><br><span class="line">“设计模式” 共 23 种，是一种能够提高代码可复用性、可维护性、可读性、稳健性以及安全性的解决方案。它是解决某些特定问题的一般性概念，能够根据需求进行调整，用于解决代码中反复出现的设计问题。</span><br><span class="line"></span><br><span class="line">合理利用 “设计模式” 开发会给我们带来很多的便利。而如何合理的运用就在于学会 “找到变化，封装变化”。</span><br><span class="line"></span><br><span class="line"><span class="section">## 其他链接</span></span><br><span class="line"><span class="bullet">*</span> [<span class="string">博客主页</span>](<span class="link">https://hellovie.github.io</span>)</span><br><span class="line"><span class="bullet">*</span> [<span class="string">必应</span>](<span class="link">https://cn.bing.com</span>)</span><br><span class="line"><span class="bullet">*</span> [<span class="string">Github</span>](<span class="link">https://github.com</span>)</span><br><span class="line"><span class="bullet">*</span> [<span class="string">哔哩哔哩</span>](<span class="link">https://www.bilibili.com</span>)</span><br></pre></td></tr></table></figure><br><h3 id="常用场景和解决方案"><a href="#常用场景和解决方案" class="headerlink" title="常用场景和解决方案"></a>常用场景和解决方案</h3><ul><li>减少客户端处理的系统数量或联合更多的系统来扩展原有系统。</li><li>让一个系统（或对象）为多个系统（或对象）工作。</li><li>简化复杂系统。如果你需要一个指向复杂子系统的直接接口，且该接口的功能有限，则可以使用外观模式。</li><li>作为一个简洁的中间层。如果子系统组织为多层结构，你可以要求子系统仅使用外观来进行交互， 以减少子系统之间的耦合。</li></ul><br><h3 id="模式的优缺点"><a href="#模式的优缺点" class="headerlink" title="模式的优缺点"></a>模式的优缺点</h3><table><thead><tr><th align="left">优点</th><th align="left">缺点</th></tr></thead><tbody><tr><td align="left">你可以让自己的代码独立于复杂子系统。</td><td align="left">外观可能成为与程序中所有类都耦合的上帝对象。</td></tr></tbody></table><h4 id="使用外观模式的优势"><a href="#使用外观模式的优势" class="headerlink" title="使用外观模式的优势"></a>使用外观模式的优势</h4><ul><li>对使用者屏蔽子系统的细节，因而减少了使用者处理的对象数目，让整个系统使用起来更加方便。</li><li>实现了子系统与使用者之间的松散耦合关系。</li><li>有助于建立层次结构系统，并简化层与层之间的依赖关系。</li><li>能够消除复杂的循环依赖。 </li><li>有利于系统在不同平台之间的移植和重构。</li></ul><h4 id="使用外观模式的劣势"><a href="#使用外观模式的劣势" class="headerlink" title="使用外观模式的劣势"></a>使用外观模式的劣势</h4><ul><li>减低了可靠性，可能会出现过多子系统依赖一个外观系统。</li><li>容易导致子系统越来越复杂。</li></ul><br><h3 id="拓展知识"><a href="#拓展知识" class="headerlink" title="拓展知识"></a>拓展知识</h3><ul><li>外观模式为现有对象定义了一个新接口，适配器模式则会试图运用已有的接口。<em>适配器</em>通常只封装一个对象，<em>外观</em>通常会作用于整个对象子系统上。</li><li>外观类通常可以转换为单例模式类，因为在大部分情况下一个外观对象就足够了。</li></ul><br><br><p>🔙 <a href="/archives/364ea8cc.html" title="设计模式">设计模式</a></p><p><strong>📌最后：希望本文能够给您提供帮助，文章中有不懂或不正确的地方，请在下方评论区💬留言！</strong></p><p><strong>🔗参考文献：</strong></p><p>🌐 <a href="https://refactoringguru.cn/design-patterns#intro-patterns">设计模式 –refactoringguru</a></p><p>▶️ <a href="https://www.bilibili.com/video/BV1hY411Y7zR/?p=1&vd_source=a9a236c4d6e5c5350c70b71ee0727b8c">bilibili-趣学设计模式；黄靖锋. –拉勾教育</a></p><p>📖 图解设计模式 /（日）结城浩著；杨文轩译. –北京：人民邮电出版社，2017.1</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂方法模式Factory Method</title>
      <link href="/archives/26a33bd6.html"/>
      <url>/archives/26a33bd6.html</url>
      
        <content type="html"><![CDATA[<h3 id="工厂方法-Factory-Method"><a href="#工厂方法-Factory-Method" class="headerlink" title="工厂方法 Factory Method"></a>工厂方法 Factory Method</h3><p><strong>工厂方法模式</strong>是一种创建型设计模式，其在父类中提供一个创建对象的方法，允许子类决定实例化对象的类型。</p><p>工厂模式分为：简单工厂、<strong>工厂方法</strong>、抽象工厂。</p><br><h3 id="为什么要使用？"><a href="#为什么要使用？" class="headerlink" title="为什么要使用？"></a>为什么要使用？</h3><p><strong>工厂方法模式的对象职责：</strong></p><p><strong>在父类中提供一个创建对象的方法， 允许子类决定实例化对象的类型。</strong>换句话说，父类只需要知道它能创建对象，具体什么是实例对象让子类去考虑。</p><p>例如在实际开发中，你需要用户能够去自定义组件，那么你就需要制定一套规则，让用户依照你的规则去开发。工厂方法模式🏭就是非常好的选择。它能够让创建产品和使用产品分离，那么用户就可以在不修改核心代码的同时，更改为自定义组件。</p><p>父类决定实例的生成方式，但并不决定所要生成的具体的类，具体的类全部交由子类去负责。这样就能让创建者和具体产品解耦。</p><br><h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><ul><li><strong>产品</strong> （Product） 将会对接口进行声明。 对于所有由创建者及其子类构建的对象， 这些接口都是通用的。</li><li><strong>具体产品</strong> （Concrete Products） 是产品接口的不同实现。</li><li><strong>创建者</strong> （Creator） 类声明返回产品对象的工厂方法。 该方法的返回对象类型必须与产品接口相匹配。<font color="gray">注意， 并不一定每次调用工厂方法都会<strong>创建</strong>新的实例。 工厂方法也可以返回缓存、 对象池或其他来源的已有对象。</font></li><li><strong>具体创建者</strong> （Concrete Creators） 将会重写基础工厂方法， 使其返回不同类型的产品。</li></ul><p><strong>工厂方法模式的类图：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B05N001.png"></p><p><code>Creator</code> 类只需要知道 <code>create()</code> 方法可以创建出 <code>Product</code>，而不需要知道其他具体实现。</p><p>当我们更换实现为新的 <code>ConcreteCreator</code> 类时，那么 <code>create()</code> 方法创建的 <code>ConcreteProduct</code> 也会更改。如果 <code>Creator</code> 类中能够创建不同的 <code>Product</code> 时，它就离抽象工厂更近一步了。</p><p>工厂方法模式侧重于直接对具体产品的实现进行封装和调用，通过统一的接口定义来约束程序的对外行为。</p><br><h3 id="模式实现"><a href="#模式实现" class="headerlink" title="模式实现"></a>模式实现</h3><p>该示例使用工厂方法模式来构建 <code>Dialog</code> 和 <code>Button</code> 的关系，并提供了一套默认样式。该模式使得用户也可以自定义样式，只需要继承抽象类并实现。</p><h4 id="示例程序的类图"><a href="#示例程序的类图" class="headerlink" title="示例程序的类图"></a>示例程序的类图</h4><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B05N002.png"></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="抽象创建者-Creator"><a href="#抽象创建者-Creator" class="headerlink" title="抽象创建者 Creator"></a>抽象创建者 Creator</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example.framework;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 抽象对话框 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Dialog</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 显示对话框 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Button button = createButton();</span><br><span class="line">        button.render();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建按键组件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 按键组件实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Button <span class="title">createButton</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="抽象产品-Product"><a href="#抽象产品-Product" class="headerlink" title="抽象产品 Product"></a>抽象产品 Product</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example.framework;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 抽象按键产品 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Button</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 按键标签 */</span></span><br><span class="line">    <span class="keyword">protected</span> String label = <span class="string">&quot;Button&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 展示按键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="默认实现"><a href="#默认实现" class="headerlink" title="默认实现"></a>默认实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example.concrete;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> example.framework.Button;</span><br><span class="line"><span class="keyword">import</span> example.framework.Dialog;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 默认对话框实现 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultDialog</span> <span class="keyword">extends</span> <span class="title">Dialog</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建按键组件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 按键组件实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Button <span class="title">createButton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultButton();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example.concrete;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> example.framework.Button;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 默认按键产品实现 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultButton</span> <span class="keyword">extends</span> <span class="title">Button</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 展示按键 */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;| &quot;</span> + <span class="keyword">this</span>.label + <span class="string">&quot; |&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="自定义实现"><a href="#自定义实现" class="headerlink" title="自定义实现"></a>自定义实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example.my;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> example.framework.Button;</span><br><span class="line"><span class="keyword">import</span> example.framework.Dialog;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 自定义对话框实现 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDialog</span> <span class="keyword">extends</span> <span class="title">Dialog</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建按键组件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 按键组件实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Button <span class="title">createButton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyButton();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example.my;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> example.framework.Button;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 自定义按键产品实现 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyButton</span> <span class="keyword">extends</span> <span class="title">Button</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 展示按键 */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;( &quot;</span> + <span class="keyword">this</span>.label + <span class="string">&quot; )&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> example.concrete.DefaultDialog;</span><br><span class="line"><span class="keyword">import</span> example.framework.Dialog;</span><br><span class="line"><span class="keyword">import</span> example.my.MyDialog;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 测试工厂方法模式 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Dialog defaultDialog = <span class="keyword">new</span> DefaultDialog();</span><br><span class="line">        defaultDialog.show();</span><br><span class="line">        System.out.println(<span class="string">&quot;------------- 分割线 -------------&quot;</span>);</span><br><span class="line">        Dialog myDialog = <span class="keyword">new</span> MyDialog();</span><br><span class="line">        myDialog.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">| Button |</span><br><span class="line">------------- 分割线 -------------</span><br><span class="line">( Button )</span><br></pre></td></tr></table></figure><p>由上述可以看出，我们不需要去修改默认实现类就可以将样式替换成自定义的。</p><br><h3 id="常用场景和解决方案"><a href="#常用场景和解决方案" class="headerlink" title="常用场景和解决方案"></a>常用场景和解决方案</h3><ul><li>有限、可重用的对象，使用工厂方法模式可以有效节约资源，例如：<ul><li>需要使用很多重复代码创建对象时，比如，<code>DAO</code> 层的数据对象、<code>API</code> 层的 <code>VO</code> 对象等。</li><li>创建对象要访问外部信息或资源时，比如，读取数据库字段、获取访问授权 token 信息、配置文件等。</li><li>创建需要统一管理生命周期的对象时，比如，会话信息、用户网页浏览轨迹对象等。</li><li>创建池化对象时，比如，连接池对象、线程池对象、日志对象等。</li></ul></li><li>希望隐藏对象的真实类型时，比如，不希望使用者知道对象的真实构造函数参数等。</li><li>不确定对象确切类别及其依赖关系时，可以使用工厂方法。工厂方法能让你在使用时不考虑它以后可能会拓展的具体实现。</li><li>如果你希望用户能扩展你软件库或框架的内部组件，可使用工厂方法。</li></ul><br><h3 id="模式的优缺点"><a href="#模式的优缺点" class="headerlink" title="模式的优缺点"></a>模式的优缺点</h3><table><thead><tr><th align="left">优点</th><th align="left">缺点</th></tr></thead><tbody><tr><td align="left">你可以避免创建者和具体产品之间的紧密耦合。</td><td align="left">应用工厂方法模式需要引入许多新的子类， 代码可能会因此变得更复杂。 最好的情况是将该模式引入创建者类的现有层次结构中。</td></tr><tr><td align="left">能根据用户的需求定制化地创建对象。</td><td align="left">具体工厂实现逻辑不统一，增加代码理解难度。</td></tr><tr><td align="left">隐藏了具体使用哪种产品来创建对象。</td><td align="left"></td></tr><tr><td align="left"><em>单一职责原则</em>。 你可以将产品创建代码放在程序的单一位置， 从而使得代码更容易维护。</td><td align="left"></td></tr><tr><td align="left"><em>开闭原则</em>。 无需更改现有客户端代码， 你就可以在程序中引入新的产品类型。</td><td align="left"></td></tr></tbody></table><br><h3 id="拓展知识"><a href="#拓展知识" class="headerlink" title="拓展知识"></a>拓展知识</h3><ul><li>在许多设计工作的初期都会使用工厂方法模式（较为简单， 而且可以更方便地通过子类进行定制），随后演化为使用抽象工厂模式、原型模式或生成器模式（更灵活但更加复杂）。</li><li>抽象工厂模式通常基于一组工厂方法，但你也可以使用原型模式来生成这些类的方法。</li><li><strong>工厂方法和抽象工厂的区别：</strong><ol><li>工厂方法模式侧重于继承的连续性，核心为“<strong>里氏替换原则</strong>”；而抽象工厂模式侧重于组合的拓展性，核心为“<strong>分析共性，找出更好的抽象产品</strong>”。</li><li>工厂方法适用单产品，抽象工厂适用于多产品。</li></ol></li></ul><br><br><p>🔙 <a href="/archives/364ea8cc.html" title="设计模式">设计模式</a></p><p><strong>📌最后：希望本文能够给您提供帮助，文章中有不懂或不正确的地方，请在下方评论区💬留言！</strong></p><p><strong>🔗参考文献：</strong></p><p>🌐 <a href="https://refactoringguru.cn/design-patterns#intro-patterns">设计模式 –refactoringguru</a></p><p>▶️ <a href="https://www.bilibili.com/video/BV1hY411Y7zR/?p=1&vd_source=a9a236c4d6e5c5350c70b71ee0727b8c">bilibili-趣学设计模式；黄靖锋. –拉勾教育</a></p><p>📖 图解设计模式 /（日）结城浩著；杨文轩译. –北京：人民邮电出版社，2017.1</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>享元模式Flyweight</title>
      <link href="/archives/ae831028.html"/>
      <url>/archives/ae831028.html</url>
      
        <content type="html"><![CDATA[<h3 id="享元-Flyweight"><a href="#享元-Flyweight" class="headerlink" title="享元 Flyweight"></a>享元 Flyweight</h3><p><strong>享元模式</strong>是一种结构型设计模式，它摒弃了在每个对象中保存所有数据的方式，通过共享多个对象所共有的相同状态，让你能在有限的内存容量中载入更多对象。</p><p>享元模式要解决的问题是<strong>节约内存的空间大小。</strong>它的本质就是在使用时<strong>找到不可变的特征并缓存起来</strong>，当类似对象使用时从缓存中读取以达到节省内存空间的目的。</p><br><h3 id="为什么要使用？"><a href="#为什么要使用？" class="headerlink" title="为什么要使用？"></a>为什么要使用？</h3><p><strong>享元模式的对象职责：</strong></p><p><strong>通过共享多个对象所共有的相同状态，让你能在有限的内存容量中载入更多对象。</strong></p><p>使用享元模式可以减少内存消耗，例如，展示商品的一些固定信息时，不需要重复创建对象。</p><p>使用享元模式还可以聚合同一类的不可变对象，提高对象的复用性。例如，在 <code>Integer</code> 类中使用到的 <code>IntegerCache</code> 类。</p><br><h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><p>享元模式只是一种优化。在应用该模式之前，你要确定程序中存在与大量类似对象同时占用内存相关的内存消耗问题，并且确保该问题无法使用其他更好的方式来解决。</p><ul><li><p><strong>享元</strong>（Flyweight）类包含原始对象中部分能在多个对象中共享的状态。同一享元对象可在许多不同情景中使用。享元中存储的状态被称为“内在状态”。传递给享元方法的状态被称为“外在状态”。</p></li><li><p><strong>情景</strong>（Context）类包含原始对象中各不相同的外在状态。情景与享元对象组合在一起就能表示原始对象的全部状态。<font color="gray">通常情况下，原始对象的行为会保留在享元类中。因此调用享元方法必须提供部分外在状态作为参数。但你也可将行为移动到情景类中，然后将连入的享元作为单纯的数据对象。</font></p></li><li><p><strong>客户端</strong>（Client）负责计算或存储享元的外在状态。在客户端看来，享元是一种可在运行时进行配置的模板对象，具体的配置方式为向其方法中传入一些情景数据参数。</p></li><li><p><strong>享元工厂</strong>（Flyweight Factory）会对已有享元的缓存池进行管理。有了工厂后，客户端就无需直接创建享元，它们只需调用工厂并向其传递目标享元的一些内在状态即可。工厂会根据参数在之前已创建的享元中进行查找，如果找到满足条件的享元就将其返回；如果没有找到就根据参数新建享元。</p></li></ul><p><strong>享元模式的类图：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B12N001.png"></p><p>从类图中，我们可以看出，<code>Client</code> 通过 <code>Context</code> 保存对象，将<strong>不可变特征（内在状态）</strong>通过工厂转换为享元对象 <code>Flyweight</code> ，并注册在工厂内部，需要时通过调用工厂并向其传递目标享元的一些内在状态即可。将<strong>可变特征（外在状态）</strong>保存在 <code>Context</code> 中，使用时通过享元对象的方法调用。</p><br><h3 id="模式实现"><a href="#模式实现" class="headerlink" title="模式实现"></a>模式实现</h3><p>该示例使用享元模式将大字符字母（由 <code>#</code>，<code>.</code>，<code>\n</code> 组成）变为一个个享元，在大字母字符串类中使用它们。将不同的大字符字母存储起来，在使用时不需要生成重复字母，以达到减少内存占用的目的。</p><h4 id="示例程序的类图"><a href="#示例程序的类图" class="headerlink" title="示例程序的类图"></a>示例程序的类图</h4><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B12N002.png"></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="享元"><a href="#享元" class="headerlink" title="享元"></a>享元</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 享元，共享大体积字符 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigChar</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 大体积字符名 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span> charName;</span><br><span class="line">    <span class="comment">/** 大体积字符（由“#”，“.”，“\n”组成） */</span></span><br><span class="line">    <span class="keyword">private</span> String fontData;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据字符名读取文件，生成大体积字符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> charName 字符名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BigChar</span><span class="params">(<span class="keyword">char</span> charName)</span> </span>&#123;</span><br><span class="line">        String path = System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + <span class="string">&quot;\\flyweight\\resource\\&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>.charName = charName;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(path + <span class="string">&quot;big-&quot;</span> + charName + <span class="string">&quot;.txt&quot;</span>));</span><br><span class="line">            String line;</span><br><span class="line">            StringBuffer buf = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">            <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                buf.append(line);</span><br><span class="line">                buf.append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            reader.close();</span><br><span class="line">            <span class="keyword">this</span>.fontData = buf.toString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 打印大体积字符 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(fontData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="享元工厂"><a href="#享元工厂" class="headerlink" title="享元工厂"></a>享元工厂</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 享元工厂，生成大体积字符享元 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigCharFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 管理已经生成的BigChar实例 */</span></span><br><span class="line">    <span class="keyword">private</span> Map pool = <span class="keyword">new</span> HashMap();</span><br><span class="line">    <span class="comment">/** 单例工厂 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BigCharFactory singleton = <span class="keyword">new</span> BigCharFactory();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 单例模式 */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">BigCharFactory</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取享元工厂实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 享元工厂实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BigCharFactory <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 共享大体积字符BigChar实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> charName BigChar字符名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> BigChar实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigChar <span class="title">getBigChar</span><span class="params">(<span class="keyword">char</span> charName)</span> </span>&#123;</span><br><span class="line">        BigChar bigChar = (BigChar) pool.get(<span class="string">&quot;&quot;</span> + charName);</span><br><span class="line">        <span class="keyword">if</span> (bigChar == <span class="keyword">null</span>) &#123;</span><br><span class="line">            bigChar = <span class="keyword">new</span> BigChar(charName);</span><br><span class="line">            pool.put(<span class="string">&quot;&quot;</span> + charName, bigChar);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bigChar;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="情景"><a href="#情景" class="headerlink" title="情景"></a>情景</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 将字符串中的重复字符变成享元，组合享元字符成字符串 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigString</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 享元数组 */</span></span><br><span class="line">    <span class="keyword">private</span> BigChar[] bigChars;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建享元工厂，根据传入的字符串来生成大体积字符串。</span></span><br><span class="line"><span class="comment">     * 将字符串中的重复字符变成大体积字符享元，组合大体积字符享元成大体积字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BigString</span><span class="params">(String string)</span> </span>&#123;</span><br><span class="line">        bigChars = <span class="keyword">new</span> BigChar[string.length()];</span><br><span class="line">        BigCharFactory bigCharFactory = BigCharFactory.getInstance();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bigChars.length; i++) &#123;</span><br><span class="line">            bigChars[i] = bigCharFactory.getBigChar(string.charAt(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 调用具体享元的print()方法 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bigChars.length; i++) &#123;</span><br><span class="line">            bigChars[i].print();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> example.BigString;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 测试享元模式 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BigString hellovie = <span class="keyword">new</span> BigString(<span class="string">&quot;hellovie&quot;</span>);</span><br><span class="line">        hellovie.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h4><p><font color="gray">备注：这里为了展示，手动将字符排成一行。</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.##....##..########..##........##.........######...#......#....####....########.</span><br><span class="line">.##....##..##........##........##........##....##..#......#.....##.....##.......</span><br><span class="line">.########..########..##........##........##....##..#......#.....##.....########.</span><br><span class="line">.########..########..##........##........##....##...#....#......##.....########.</span><br><span class="line">.##....##..##........##........##........##....##....#..#.......##.....##.......</span><br><span class="line">.##....##..########..########..########...######......##.......####....########.</span><br></pre></td></tr></table></figure><p>打印一个大体积的字符串，每个字符的打印样式都存放在文件里，需要从文件中读取。</p><p>如果每打印一个大字符就读取一次文件并写入内存，十分消耗内存。将字符串中不变的 26 个字母抽离成享元共享，就能大大减少内存消耗。</p><p>这里的 <code>BigString</code> 类似一个情景（Context）与享元对象 <code>BigChar</code> 组合在一起就能表示一个完整的大体积字符串对象。</p><br><h3 id="常用场景和解决方案"><a href="#常用场景和解决方案" class="headerlink" title="常用场景和解决方案"></a>常用场景和解决方案</h3><ul><li><p>系统中存在大量重复创建的对象。</p></li><li><p>可以使用外部特定的状态来控制使用的对象。</p></li><li><p>相关性很高并且可以复用的对象。</p></li><li><p><code>JDK 1.8</code> 中 <code>Integer</code> 类中的 <code>valueOf(int i)</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果判断当前 i 的值是否在 -128 到 127 之间。如果存在，则直接返回引用；如果不存在，就创建一个新的对象。</p></li><li><p>仅在程序必须支持大量对象且没有足够的内存容量时使用享元模式。</p><ul><li>程序需要生成数量巨大的相似对象；</li><li>这将耗尽目标设备的所有内存；</li><li>对象中包含可抽取且能在多个对象间共享的重复状态。</li></ul></li></ul><br><h3 id="模式的优缺点"><a href="#模式的优缺点" class="headerlink" title="模式的优缺点"></a>模式的优缺点</h3><table><thead><tr><th align="left">优点</th><th align="left">缺点</th></tr></thead><tbody><tr><td align="left">如果程序中有很多相似对象，那么你将可以节省大量内存。</td><td align="left">你可能需要牺牲执行速度来换取内存，因为他人每次调用享元方法时都需要重新计算部分情景数据。</td></tr><tr><td align="left"></td><td align="left">代码会变得更加复杂。团队中的新成员总是会问：“为什么要像这样拆分一个实体的状态？”。</td></tr></tbody></table><h4 id="使用享元模式的优势"><a href="#使用享元模式的优势" class="headerlink" title="使用享元模式的优势"></a>使用享元模式的优势</h4><ul><li>可以极大减少内存中对象的数量，使得相同对象或相似对象在内存中只保存一份。</li><li>通过封装内存特有的运行状态，达到共享对象之间高效复用的目的。</li></ul><h4 id="使用享元模式的劣势"><a href="#使用享元模式的劣势" class="headerlink" title="使用享元模式的劣势"></a>使用享元模式的劣势</h4><ul><li>以时间换空间，间接增加了系统的实现复杂度。</li><li>运行时间更长，对于一些需要快速响应的系统并不适合。</li></ul><br><h3 id="拓展知识"><a href="#拓展知识" class="headerlink" title="拓展知识"></a>拓展知识</h3><ul><li>用好享元模式的关键是<strong>找到不可变对象</strong>。</li><li>享元模式强调的是空间效率，缓存模式强调的是时间效率。</li><li>对于超大型数据模式，享元模式是非常有效的优化方法之一。</li><li>如果你能将对象的所有共享状态简化为一个享元对象，那么享元就和单例模式类似了。但这两个模式有两个根本性的不同。<ul><li>只会有一个单例实体，但是<em>享元</em>类可以有多个实体，各实体的内在状态也可以不同。</li><li><em>单例</em>对象可以是可变的。享元对象是不可变的。</li></ul></li></ul><br><br><p>🔙 <a href="/archives/364ea8cc.html" title="设计模式">设计模式</a></p><p><strong>📌最后：希望本文能够给您提供帮助，文章中有不懂或不正确的地方，请在下方评论区💬留言！</strong></p><p><strong>🔗参考文献：</strong></p><p>🌐 <a href="https://refactoringguru.cn/design-patterns#intro-patterns">设计模式 –refactoringguru</a></p><p>▶️ <a href="https://www.bilibili.com/video/BV1hY411Y7zR/?p=1&vd_source=a9a236c4d6e5c5350c70b71ee0727b8c">bilibili-趣学设计模式；黄靖锋. –拉勾教育</a></p><p>📖 图解设计模式 /（日）结城浩著；杨文轩译. –北京：人民邮电出版社，2017.1</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解释器模式Interpreter</title>
      <link href="/archives/99128770.html"/>
      <url>/archives/99128770.html</url>
      
        <content type="html"><![CDATA[<h3 id="解释器-Interpreter"><a href="#解释器-Interpreter" class="headerlink" title="解释器 Interpreter"></a>解释器 Interpreter</h3><p><strong>解释器模式</strong>是一种行为设计模式，用于定义语言的语法<a href="%E8%AF%AD%E6%B3%95%E4%B9%9F%E7%A7%B0%E6%96%87%E6%B3%95%EF%BC%8C%E5%9C%A8%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B8%AD%E6%8C%87%E4%BB%BB%E6%84%8F%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E5%8F%A5%E5%AD%90%E3%80%81%E7%9F%AD%E8%AF%AD%E4%BB%A5%E5%8F%8A%E8%AF%8D%E7%AD%89%E8%AF%AD%E6%B3%95%E5%8D%95%E4%BD%8D%E7%9A%84%E8%AF%AD%E6%B3%95%E7%BB%93%E6%9E%84%E4%B8%8E%E8%AF%AD%E6%B3%95%E6%84%8F%E4%B9%89%E7%9A%84%E8%A7%84%E5%BE%8B%E3%80%82%E5%9C%A8%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E4%B8%AD%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%B2%97%E7%95%A5%E5%9C%B0%E7%90%86%E8%A7%A3%E4%B8%BA%E2%80%9C%E7%94%A8%E6%9C%89%E7%A9%B7%E9%9B%86%E5%90%88%E6%9D%A5%E6%8F%8F%E8%BF%B0%E6%97%A0%E7%A9%B7%E4%BA%8B%E7%89%A9%E7%9A%84%E8%A7%84%E5%88%99%E2%80%9D%E3%80%82">^1</a>规则表示，并提供解释器来处理句子中的语法。</p><p>解释器模式描述如何构建一个简单“语言”的语法解释器，通过更简洁的规则来表示复杂的逻辑。它的适用范围很小，只在一些非常特定的领域被用到（编译器、规则引擎、正则表达式、<code>SQL</code> 解析等）。</p><br><h3 id="为什么要使用？"><a href="#为什么要使用？" class="headerlink" title="为什么要使用？"></a>为什么要使用？</h3><p><strong>解释器模式的对象职责：</strong></p><p><strong>通过更简洁的规则来表示复杂的逻辑。</strong></p><p>👉 将领域语言（即问题表征）定义为简单的语言语法。通过多个不同规则的简单组合来映射复杂的模型。</p><p>📜 例如，在开发中使用正则表达式来快速匹配 <code>IP</code> 地址，而不是将所有可能的情况都用 <code>if-else</code> 来进行编写。</p><p>👉 更便捷地提升解释数学公式这一类场景的计算效率。</p><p>📜 例如，需要通过一定的规则运算才能得出最后结果的情况，在使用解释器模式后，能够很好地通过预置地规则来进行判断和解释。</p><br><h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><ul><li><strong>抽象表达式</strong>（Abstract Expression）定义一个解释器有哪些操作，可以是抽象类或接口。同时说明只要继承或实现的子节点都需要实现这些操作方法。</li><li><strong>终结符表达式</strong>（Terminal Expression）用于解释所有终结符<a href="%E7%BB%88%E7%BB%93%E7%AC%A6%EF%BC%8C%E6%98%AF%E4%B8%80%E4%B8%AA%E2%80%9C%E7%A1%AE%E5%AE%9A%E2%80%9D%E7%9A%84%E5%80%BC%EF%BC%8C%E6%97%A0%E6%B3%95%E5%86%8D%E7%BB%A7%E7%BB%AD%E6%8E%A8%E5%AF%BC%E4%B8%8B%E5%8E%BB%E3%80%82">^2</a>的表达式。</li><li><strong>非终结符表达式</strong>（Nonterminal Expression）用于解释所有非终结符<a href="%E9%9D%9E%E7%BB%88%E7%BB%93%E7%AC%A6%EF%BC%8C%E5%8F%88%E6%88%96%E8%80%85%E7%A7%B0%E4%BD%9C%E2%80%9C%E8%AF%AD%E6%B3%95%E5%8F%98%E9%87%8F%E2%80%9D%EF%BC%8C%E4%B8%8D%E6%98%AF%E4%B8%80%E4%B8%AA%E2%80%9C%E7%A1%AE%E5%AE%9A%E2%80%9D%E7%9A%84%E5%80%BC%EF%BC%8C%E5%8F%AF%E4%BB%A5%E8%A2%AB%E7%BB%A7%E7%BB%AD%E6%8E%A8%E5%AF%BC%E4%B8%8B%E5%8E%BB%E3%80%82">^3</a>表达式。</li><li><strong>上下文</strong>（Context）包含解释器全局的信息。</li><li><strong>请求者</strong>（Client）调用终结符表达式和非终结符表达式来推导语法树。</li></ul><p><strong>解释器模式的类图：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B22N001.png"></p><br><h3 id="模式实现"><a href="#模式实现" class="headerlink" title="模式实现"></a>模式实现</h3><p>该示例使用解释器模式实现“判断两个字符串中至少存在一个是输入字符串的子串（或）”和“判断两个字符串是否同时为输入字符串的子串（且）”。在非终结符表达式中做“且”或“或”的操作；在终结符表达式中判断“终结符字符串”是否是“输入字符串”的子串。</p><h4 id="示例程序的类图"><a href="#示例程序的类图" class="headerlink" title="示例程序的类图"></a>示例程序的类图</h4><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B22N002.png"></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="抽象表达式"><a href="#抽象表达式" class="headerlink" title="抽象表达式"></a>抽象表达式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 抽象表达式接口 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解释表达式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> con 表达式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true满足条件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">interpreter</span><span class="params">(String con)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="终结符表达式"><a href="#终结符表达式" class="headerlink" title="终结符表达式"></a>终结符表达式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 终结符 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TerminalExpression</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TerminalExpression</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解释表达式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> con 表达式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true满足条件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">interpreter</span><span class="params">(String con)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(con.contains(data)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="非终结符表达式"><a href="#非终结符表达式" class="headerlink" title="非终结符表达式"></a>非终结符表达式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** “或”非终结符 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrExpression</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Expression expr1;</span><br><span class="line">    <span class="keyword">private</span> Expression expr2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrExpression</span><span class="params">(Expression expr1, Expression expr2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.expr1 = expr1;</span><br><span class="line">        <span class="keyword">this</span>.expr2 = expr2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解释表达式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> con 表达式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true满足条件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">interpreter</span><span class="params">(String con)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> expr1.interpreter(con) || expr2.interpreter(con);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** “且”非终结符 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AndExpression</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Expression expr1;</span><br><span class="line">    <span class="keyword">private</span> Expression expr2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AndExpression</span><span class="params">(Expression expr1, Expression expr2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.expr1 = expr1;</span><br><span class="line">        <span class="keyword">this</span>.expr2 = expr2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解释表达式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> con 表达式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true满足条件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">interpreter</span><span class="params">(String con)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> expr1.interpreter(con) &amp;&amp; expr2.interpreter(con);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 测试解释器模式 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建两个终结符，生成它们的“或”非终结符</span></span><br><span class="line">        Expression mick = <span class="keyword">new</span> TerminalExpression(<span class="string">&quot;mick&quot;</span>);</span><br><span class="line">        TerminalExpression mia = <span class="keyword">new</span> TerminalExpression(<span class="string">&quot;mia&quot;</span>);</span><br><span class="line">        Expression isSingle = <span class="keyword">new</span> OrExpression(mick, mia);</span><br><span class="line">        <span class="comment">// 创建两个终结符，生成它们的“且”非终结符</span></span><br><span class="line">        Expression spike = <span class="keyword">new</span> TerminalExpression(<span class="string">&quot;spike&quot;</span>);</span><br><span class="line">        TerminalExpression mock = <span class="keyword">new</span> TerminalExpression(<span class="string">&quot;mock&quot;</span>);</span><br><span class="line">        Expression isCommitted = <span class="keyword">new</span> AndExpression(spike, mock);</span><br><span class="line">        <span class="comment">// 解释非终结符表达式</span></span><br><span class="line">        System.out.println(<span class="string">&quot;&#x27;mick&#x27;是否包含&#x27;mick&#x27;或&#x27;mia&#x27;：&quot;</span> + isSingle.interpreter(<span class="string">&quot;mick&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;&#x27;mia&#x27;是否包含&#x27;mick&#x27;或&#x27;mia&#x27;：&quot;</span> + isSingle.interpreter(<span class="string">&quot;mia&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;&#x27;max&#x27;是否包含&#x27;mick&#x27;或&#x27;mia&#x27;：&quot;</span> + isSingle.interpreter(<span class="string">&quot;max&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;&#x27;mock-spike&#x27;是否同时包含&#x27;spike&#x27;和&#x27;mock&#x27;：&quot;</span> + isCommitted.interpreter(<span class="string">&quot;mock-spike&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;&#x27;single-mock&#x27;是否同时包含&#x27;spike&#x27;和&#x27;mock&#x27;：&quot;</span> + isCommitted.interpreter(<span class="string">&quot;single-mock&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x27;mick&#x27;是否包含&#x27;mick&#x27;或&#x27;mia&#x27;：true</span><br><span class="line">&#x27;mia&#x27;是否包含&#x27;mick&#x27;或&#x27;mia&#x27;：true</span><br><span class="line">&#x27;max&#x27;是否包含&#x27;mick&#x27;或&#x27;mia&#x27;：false</span><br><span class="line">&#x27;mock-spike&#x27;是否同时包含&#x27;spike&#x27;和&#x27;mock&#x27;：true</span><br><span class="line">&#x27;single-mock&#x27;是否同时包含&#x27;spike&#x27;和&#x27;mock&#x27;：false</span><br></pre></td></tr></table></figure><br><h3 id="常用场景和解决方案"><a href="#常用场景和解决方案" class="headerlink" title="常用场景和解决方案"></a>常用场景和解决方案</h3><ul><li>语言的语法较为简单并且对执行效率要求不高。</li><li>问题重复出现，且可以用一种简单的语言来进行表达。</li><li>一个语言需要解释执行。</li></ul><br><h3 id="模式的优缺点"><a href="#模式的优缺点" class="headerlink" title="模式的优缺点"></a>模式的优缺点</h3><table><thead><tr><th align="left">优点</th><th align="left">缺点</th></tr></thead><tbody><tr><td align="left">很容易改变和扩展语法逻辑。</td><td align="left">维护成本很高。</td></tr><tr><td align="left">更容易实现语法。</td><td align="left">执行效率较低。</td></tr><tr><td align="left"></td><td align="left">应用场景单一，复用性不高。</td></tr></tbody></table><br><h3 id="拓展知识"><a href="#拓展知识" class="headerlink" title="拓展知识"></a>拓展知识</h3><ul><li>在解释器模式中通常会使用树的结构，终端表达式对象是叶对象，非终端表达式是组合对象。</li><li>解释器模式能够通过一些简短的规则来解决复杂的数据匹配问题。</li></ul><br><br><p>🔙 <a href="/archives/364ea8cc.html" title="设计模式">设计模式</a></p><p><strong>📌最后：希望本文能够给您提供帮助，文章中有不懂或不正确的地方，请在下方评论区💬留言！</strong></p><p><strong>🔗参考文献：</strong></p><p>▶️ <a href="https://www.bilibili.com/video/BV1hY411Y7zR/?p=1&vd_source=a9a236c4d6e5c5350c70b71ee0727b8c">bilibili-趣学设计模式；黄靖锋. –拉勾教育</a></p><p>📖 图解设计模式 /（日）结城浩著；杨文轩译. –北京：人民邮电出版社，2017.1</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中介者模式Mediator</title>
      <link href="/archives/301a85f6.html"/>
      <url>/archives/301a85f6.html</url>
      
        <content type="html"><![CDATA[<h3 id="中介者-Mediator"><a href="#中介者-Mediator" class="headerlink" title="中介者 Mediator"></a>中介者 Mediator</h3><p><strong>中介者模式</strong>是一种行为设计模式，能让你减少对象之间混乱无序的依赖关系。该模式会限制对象之间的直接交互，迫使它们通过一个中介者对象进行合作。</p><p>中介者模式提供了一种减少对象之间耦合度的思路。</p><br><h3 id="为什么要使用？"><a href="#为什么要使用？" class="headerlink" title="为什么要使用？"></a>为什么要使用？</h3><p><strong>中介者模式的对象职责：</strong></p><p><strong>迫使对象之间只能通过一个中介者对象进行合作。</strong>减少对象之间混乱无序的依赖关系。</p><p>👉 解决对象之间直接耦合的问题，避免“一处修改多处”的连锁反应出现。</p><p>👉 在结构上作为中转，解耦两个服务或系统之间的直接耦合关系。</p><p>👉 为了更便捷地统一协同对象之间的通信。</p><p>💡 中介者模式的中转作用（结构性）使得对象间的依赖结构变成星型结构，极大地降低对象间的依赖结构耦合度。</p><p>💡 中介者模式的协调作用（行为性）能对同类型的对象请求进行统一的处理。</p><br><h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><ul><li><strong>组件</strong>（Component）是各种包含业务逻辑的类。每个组件都有一个指向中介者的引用，该引用被声明为中介者接口类型。组件不知道中介者实际所属的类，因此你可通过将其连接到不同的中介者以使其能在其他程序中复用。<font color="gray">组件并不知道其他组件的情况。如果组件内发生了重要事件，它只能通知中介者。中介者收到通知后能轻易地确定发送者，这或许已足以判断接下来需要触发的组件了。</font></li><li><strong>中介者</strong>（Mediator）接口声明了与组件交流的方法，但通常仅包括一个通知方法。组件可将任意上下文（包括自己的对象）作为该方法的参数，只有这样接收组件和发送者类之间才不会耦合。<font color="gray">对于组件来说，中介者看上去完全就是一个黑箱。发送者不知道最终会由谁来处理自己的请求，接收者也不知道最初是谁发出了请求。</font></li><li><strong>具体中介者</strong>（Concrete Mediator）封装了多种组件间的关系。具体中介者通常会保存所有组件的引用并对其进行管理，甚至有时会对其生命周期进行管理。</li></ul><p><strong>中介者模式的类图：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B20N001.png"></p><br><h3 id="模式实现"><a href="#模式实现" class="headerlink" title="模式实现"></a>模式实现</h3><p>该示例使用中介者模式为每个组件都绑定了一个中介者，只允许每个组件与中介者进行互动。中介者可以接收到来自各个组件的消息，并得知来自哪个组件。同时，中介者也可以调用相应组件的方法。</p><h4 id="示例程序的类图"><a href="#示例程序的类图" class="headerlink" title="示例程序的类图"></a>示例程序的类图</h4><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B20N002.png"></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="中介者"><a href="#中介者" class="headerlink" title="中介者"></a>中介者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 中介者接口 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收组件发送的信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sender 组件发送的信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">apply</span><span class="params">(Component sender)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="具体中介者"><a href="#具体中介者" class="headerlink" title="具体中介者"></a>具体中介者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 具体中介者类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteMediator</span> <span class="keyword">implements</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收组件发送的信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sender 组件发送的信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(Component sender)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介者接收到来自&lt;&quot;</span> + sender.getClass() + <span class="string">&quot;&gt;的信息...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 抽象组件类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 关联的中介者 */</span></span><br><span class="line">    <span class="keyword">private</span> Mediator m;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Component</span><span class="params">(Mediator m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.m = m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mediator <span class="title">getMediator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 组件方法 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="具体组件"><a href="#具体组件" class="headerlink" title="具体组件"></a>具体组件</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 组件A实现类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComponentA</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ComponentA</span><span class="params">(Mediator m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(m);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 组件方法 */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用ComponentA的exec方法...&quot;</span>);</span><br><span class="line">        <span class="keyword">super</span>.getMediator().apply(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 组件B实现类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComponentB</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ComponentB</span><span class="params">(Mediator m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(m);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 组件方法 */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用ComponentB的exec方法...&quot;</span>);</span><br><span class="line">        <span class="keyword">super</span>.getMediator().apply(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> example.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 测试中介者模式 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Mediator mediator = <span class="keyword">new</span> ConcreteMediator();</span><br><span class="line">        Component componentA = <span class="keyword">new</span> ComponentA(mediator);</span><br><span class="line">        Component componentB = <span class="keyword">new</span> ComponentB(mediator);</span><br><span class="line">        componentA.exec();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\n---------------------- 分割线 ----------------------\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        componentB.exec();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">调用ComponentA的exec方法...</span><br><span class="line">中介者接收到来自&lt;class example.ComponentA&gt;的信息...</span><br><span class="line"></span><br><span class="line">---------------------- 分割线 ----------------------</span><br><span class="line"></span><br><span class="line">调用ComponentB的exec方法...</span><br><span class="line">中介者接收到来自&lt;class example.ComponentB&gt;的信息...</span><br></pre></td></tr></table></figure><br><h3 id="常用场景和解决方案"><a href="#常用场景和解决方案" class="headerlink" title="常用场景和解决方案"></a>常用场景和解决方案</h3><ul><li>系统中对象之间存在复杂的引用关系时，中介者模式能让你将对象间的所有关系抽取成为一个单独的类，以使对于特定组件的修改工作独立于其他组件。</li><li>在不同情景下复用一些基本行为，导致你需要被迫创建大量组件子类时。中介者模式通过一个中间对象来封装多个类中的共有行为，能让你不需要生成太多的子类。</li><li>当组件因过于依赖其他组件而无法在不同应用中复用时，中介者模式能让你将所有组件间的关系都包含在中介者中，因此你无需修改组件就能方便地新建中介者类以定义新的组件合作方式。</li></ul><br><h3 id="模式的优缺点"><a href="#模式的优缺点" class="headerlink" title="模式的优缺点"></a>模式的优缺点</h3><table><thead><tr><th align="left">优点</th><th align="left">缺点</th></tr></thead><tbody><tr><td align="left"><em>单一职责原则</em>。你可以将多个组件间的交流抽取到同一位置，使其更易于理解和维护。</td><td align="left">一段时间后，中介者可能会演化成为上帝对象。</td></tr><tr><td align="left"><em>开闭原则</em>。你无需修改实际组件就能增加新的中介者。</td><td align="left"></td></tr><tr><td align="left">你可以减轻应用中多个组件间的耦合情况。</td><td align="left"></td></tr><tr><td align="left">你可以更方便地复用各个组件。</td><td align="left"></td></tr></tbody></table><h4 id="使用中介者模式的优势"><a href="#使用中介者模式的优势" class="headerlink" title="使用中介者模式的优势"></a>使用中介者模式的优势</h4><ul><li>减少对象之间的直接交互，间接解耦过多依赖。</li><li>减少子类的创建数量。例如，在不同情景下复用一些基本行为，导致你需要被迫创建大量组件子类时。</li><li>简化各系统的设计和实现。</li><li>通过新建中间层快速扩展新功能，提升代码扩展性。</li></ul><h4 id="使用中介者模式的劣势"><a href="#使用中介者模式的劣势" class="headerlink" title="使用中介者模式的劣势"></a>使用中介者模式的劣势</h4><ul><li>中介者类中的交互逻辑可能变得非常复杂且难以维护。</li><li>变成了新的重度依赖对象。</li><li>需要知道所有对象的交互逻辑。</li></ul><br><h3 id="拓展知识"><a href="#拓展知识" class="headerlink" title="拓展知识"></a>拓展知识</h3><ul><li>外观模式和中介者的职责类似：它们都尝试在大量紧密耦合的类中组织起合作。<ul><li><em>外观</em>为子系统中的所有对象定义了一个简单接口，但是它不提供任何新功能。子系统本身不会意识到外观的存在。子系统中的对象可以直接进行交流。</li><li><em>中介者</em>将系统中组件的沟通行为中心化。各组件只知道中介者对象，无法直接相互交流。</li></ul></li><li>中介者和观察者之间的区别：<ul><li><em>中介者</em>的主要目标是消除一系列系统组件之间的相互依赖。这些组件将依赖于同一个中介者对象。</li><li><em>观察者</em>的目标是在对象之间建立动态的单向连接，使得部分对象可作为其他对象的附属发挥作用。</li></ul></li><li> 对于中介者和观察者，在大部分情况下，你可以使用其中一种模式，而有时可以同时使用。</li></ul><ul><li>有一种流行的中介者模式实现方式依赖于<em>观察者</em>。中介者对象担当发布者的角色，其他组件则作为订阅者，可以订阅中介者的事件或取消订阅。当<em>中介者</em>以这种方式实现时，它可能看上去与<em>观察者</em>非常相似。你也可以永久性地将所有组件链接到同一个中介者对象。这种实现方式和<em>观察者</em>并不相同，但这仍是一种中介者模式。</li><li>假设有一个程序，其所有的组件都变成了发布者，它们之间可以相互建立动态连接。这样程序中就没有中心化的中介者对象，而只有一些分布式的观察者。</li></ul><br><br><p>🔙 <a href="/archives/364ea8cc.html" title="设计模式">设计模式</a></p><p><strong>📌最后：希望本文能够给您提供帮助，文章中有不懂或不正确的地方，请在下方评论区💬留言！</strong></p><p><strong>🔗参考文献：</strong></p><p>🌐 <a href="https://refactoringguru.cn/design-patterns#intro-patterns">设计模式 –refactoringguru</a></p><p>▶️ <a href="https://www.bilibili.com/video/BV1hY411Y7zR/?p=1&vd_source=a9a236c4d6e5c5350c70b71ee0727b8c">bilibili-趣学设计模式；黄靖锋. –拉勾教育</a></p><p>📖 图解设计模式 /（日）结城浩著；杨文轩译. –北京：人民邮电出版社，2017.1</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迭代器模式Iterator</title>
      <link href="/archives/db977c49.html"/>
      <url>/archives/db977c49.html</url>
      
        <content type="html"><![CDATA[<h3 id="迭代器-Iterator"><a href="#迭代器-Iterator" class="headerlink" title="迭代器 Iterator"></a>迭代器 Iterator</h3><p><strong>迭代器模式</strong>是一种行为设计模式，让你能在不暴露集合底层表现形式（列表、 栈和树等）的情况下遍历集合中所有的元素。</p><br><h3 id="为什么要使用？"><a href="#为什么要使用？" class="headerlink" title="为什么要使用？"></a>为什么要使用？</h3><p><strong>迭代器模式的对象职责：</strong></p><p><strong>在不暴露对象内部细节的情况下，提供对容器对象中各个元素进行访问的方法。</strong></p><p>👉 减少程序中重复的遍历代码。</p><p>🎈 使用迭代器模式是将遍历算法作为容器对象自身的一种“属性方法”来使用，能够有效地避免写很多重复的代码，不会暴露其内部结构。</p><p>👉 隐藏统一遍历集合的方法逻辑。</p><p>🎈 迭代器模式把对不同集合类的访问逻辑抽象出来，在不同暴露集合内部结构的情况下，隐藏不同集合遍历需要使用的算法，同时能够对外提供更为简便的访问算法接口。</p><br><h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><ul><li><strong>迭代器</strong>（Iterator）接口声明了遍历集合所需的操作：获取下一个元素、获取当前位置和重新开始迭代等。</li><li><strong>具体迭代器</strong>（Concrete Iterators）实现遍历集合的一种特定算法。迭代器对象必须跟踪自身遍历的进度。这使得多个迭代器可以相互独立地遍历同一集合。</li><li><strong>集合</strong>（Collection）接口声明一个或多个方法来获取与集合兼容的迭代器。请注意，返回方法的类型必须被声明为迭代器接口，因此具体集合可以返回各种不同种类的迭代器。</li><li><strong>具体集合</strong>（Concrete Collections）会在客户端请求迭代器时返回一个特定的具体迭代器类实体。</li><li><strong>客户端</strong>（Client）通过集合和迭代器的接口与两者进行交互。这样一来客户端无需与具体类进行耦合，允许同一客户端代码使用各种不同的集合和迭代器。<font color="gray">客户端通常不会自行创建迭代器，而是会从集合中获取。但在特定情况下，客户端可以直接创建一个迭代器（例如当客户端需要自定义特殊迭代器时）。</font></li></ul><p><strong>迭代器模式的类图：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B21N001.png"></p><br><h3 id="模式实现"><a href="#模式实现" class="headerlink" title="模式实现"></a>模式实现</h3><p>该示例使用迭代器模式为 <code>BookShelf</code> 书架类提供了一个迭代器 <code>BookShelfIterator</code>，实现了遍历书架的功能。</p><h4 id="示例程序的类图"><a href="#示例程序的类图" class="headerlink" title="示例程序的类图"></a>示例程序的类图</h4><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B21N002.png"></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 迭代器接口 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否存在下一个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取下一个对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 下一个对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Object <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="具体迭代器"><a href="#具体迭代器" class="headerlink" title="具体迭代器"></a>具体迭代器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 书架类迭代器具体实现 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookShelfIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BookShelf bookShelf;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BookShelfIterator</span><span class="params">(BookShelf bookShelf)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookShelf = bookShelf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否存在下一个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= bookShelf.size())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取下一个对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 下一个对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Book book = bookShelf.get(index);</span><br><span class="line">        index++;</span><br><span class="line">        <span class="keyword">return</span> book;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 集合接口 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Aggregate</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取集合的迭代器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 迭代器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Iterator <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="具体集合"><a href="#具体集合" class="headerlink" title="具体集合"></a>具体集合</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 书架类具体集合实现 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookShelf</span> <span class="keyword">implements</span> <span class="title">Aggregate</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 存储的书籍信息 */</span></span><br><span class="line">    <span class="keyword">private</span> Book[] books;</span><br><span class="line">    <span class="comment">/** 书籍数量（当前书籍数组中最后一本书籍的下标） */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> last = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/** 书籍数组能容纳数量 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BookShelf</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.size = maxSize;</span><br><span class="line">        <span class="keyword">this</span>.books = <span class="keyword">new</span> Book[maxSize];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据下标获取书籍</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 指定下标书籍</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; size) &#123;</span><br><span class="line">            <span class="keyword">return</span> books[index];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在最后一本书籍上添加</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> book 需要添加的书籍</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">append</span><span class="params">(Book book)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 扩充</span></span><br><span class="line">        <span class="keyword">if</span> (last &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">this</span>.size = <span class="number">2</span> * <span class="keyword">this</span>.size;</span><br><span class="line">            Book[] expBooks = <span class="keyword">new</span> Book[<span class="keyword">this</span>.size];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.books.length; i++) &#123;</span><br><span class="line">                expBooks[i] = <span class="keyword">this</span>.books[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.books = expBooks;</span><br><span class="line">        &#125;</span><br><span class="line">        books[last] = book;</span><br><span class="line">        last++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前书架的书籍数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取集合的迭代器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 迭代器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BookShelfIterator(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 书籍类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> example.Book;</span><br><span class="line"><span class="keyword">import</span> example.BookShelf;</span><br><span class="line"><span class="keyword">import</span> example.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 测试迭代器模式 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BookShelf bookShelf = <span class="keyword">new</span> BookShelf(<span class="number">2</span>);</span><br><span class="line">        bookShelf.append(<span class="keyword">new</span> Book(<span class="string">&quot;设计模式&quot;</span>));</span><br><span class="line">        bookShelf.append(<span class="keyword">new</span> Book(<span class="string">&quot;数据结构&quot;</span>));</span><br><span class="line">        <span class="comment">// BookShelf的append方法会自动扩充。</span></span><br><span class="line">        bookShelf.append(<span class="keyword">new</span> Book(<span class="string">&quot;软件工程&quot;</span>));</span><br><span class="line">        bookShelf.append(<span class="keyword">new</span> Book(<span class="string">&quot;软件建模&quot;</span>));</span><br><span class="line">        Iterator it = bookShelf.iterator();</span><br><span class="line">        <span class="keyword">int</span> stop = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            stop++;</span><br><span class="line">            Book book = (Book) it.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;1: &quot;</span> + book.getName());</span><br><span class="line">            <span class="keyword">if</span> (stop == <span class="number">2</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;-- 中断遍历，但是迭代器仍保留遍历时中断的下标！ --&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            Book book = (Book) it.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;2: &quot;</span> + book.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1: 设计模式</span><br><span class="line">1: 数据结构</span><br><span class="line">-- 中断遍历，但是迭代器仍保留遍历时中断的下标！ --</span><br><span class="line">2: 软件工程</span><br><span class="line">2: 软件建模</span><br></pre></td></tr></table></figure><p>从测试和结果中可以得出，迭代器模式能让我们暂停遍历并在需要时继续。</p><br><h3 id="常用场景和解决方案"><a href="#常用场景和解决方案" class="headerlink" title="常用场景和解决方案"></a>常用场景和解决方案</h3><ul><li>出于便利性或安全性等原因，希望对客户端隐藏其遍历算法复杂性时。</li><li>需要简化重复的循环遍历逻辑时，使用该模式可以减少程序中重复的遍历代码。</li><li>如果你希望代码能够遍历不同的甚至是无法预知的数据结构，可以使用迭代器模式。该模式为集合和迭代器提供了一些通用接口。如果你在代码中使用了这些接口，那么将其他实现了这些接口的集合和迭代器传递给它时，它仍将可以正常运行。</li></ul><br><h3 id="模式的优缺点"><a href="#模式的优缺点" class="headerlink" title="模式的优缺点"></a>模式的优缺点</h3><table><thead><tr><th align="left">优点</th><th align="left">缺点</th></tr></thead><tbody><tr><td align="left"><em>单一职责原则</em>。通过将体积庞大的遍历算法代码抽取为独立的类，你可对客户端代码和集合进行整理。</td><td align="left">如果你的程序只与简单的集合进行交互，应用该模式可能会矫枉过正。</td></tr><tr><td align="left"><em>开闭原则</em>。你可实现新型的集合和迭代器并将其传递给现有代码，无需修改现有代码。</td><td align="left">对于某些特殊集合，使用迭代器可能比直接遍历的效率低。</td></tr><tr><td align="left">你可以并行遍历同一集合，因为每个迭代器对象都包含其自身的遍历状态。</td><td align="left">增加子类数量或系统复杂性。</td></tr><tr><td align="left">相似的，你可以暂停遍历并在需要时继续。</td><td align="left"></td></tr></tbody></table><br><h3 id="拓展知识"><a href="#拓展知识" class="headerlink" title="拓展知识"></a>拓展知识</h3><ul><li>你可以使用迭代器模式来遍历组合模式树。</li><li>你可以同时使用工厂方法模式和迭代器来让子类集合返回不同类型的迭代器，并使得迭代器与集合相匹配。</li><li>你可以同时使用备忘录模式和迭代器来获取当前迭代器的状态，并且在需要的时候进行回滚。</li><li>可以同时使用访问者模式和迭代器来遍历复杂数据结构，并对其中的元素执行所需操作，即使这些元素所属的类完全不同。</li></ul><br><br><p>🔙 <a href="/archives/364ea8cc.html" title="设计模式">设计模式</a></p><p><strong>📌最后：希望本文能够给您提供帮助，文章中有不懂或不正确的地方，请在下方评论区💬留言！</strong></p><p><strong>🔗参考文献：</strong></p><p>🌐 <a href="https://refactoringguru.cn/design-patterns#intro-patterns">设计模式 –refactoringguru</a></p><p>▶️ <a href="https://www.bilibili.com/video/BV1hY411Y7zR/?p=1&vd_source=a9a236c4d6e5c5350c70b71ee0727b8c">bilibili-趣学设计模式；黄靖锋. –拉勾教育</a></p><p>📖 图解设计模式 /（日）结城浩著；杨文轩译. –北京：人民邮电出版社，2017.1</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>备忘录模式Memento</title>
      <link href="/archives/d7446d4.html"/>
      <url>/archives/d7446d4.html</url>
      
        <content type="html"><![CDATA[<h3 id="备忘录-Memento"><a href="#备忘录-Memento" class="headerlink" title="备忘录 Memento"></a>备忘录 Memento</h3><p><strong>备忘录模式</strong>（也称快照模式）是一种行为设计模式，允许在不暴露对象实现细节的情况下保存和恢复对象之前的状态。</p><br><h3 id="为什么要使用？"><a href="#为什么要使用？" class="headerlink" title="为什么要使用？"></a>为什么要使用？</h3><p><strong>备忘录模式的对象职责：</strong></p><p><strong>捕获并外部化对象的内部状态，以便以后可以恢复。</strong></p><p>👉 为了记录多个时间点的备份数据。备忘录模式更多的是用来记录多个时间点的对象状态数据。可以通过多次记录的数据进行数据分析或防止客户端篡改数据。</p><p>📜 比如，编辑器、聊天会话中会涉及多次操作和多次交互对话。</p><p>👉 需要快速撤销当前操作并恢复到某个对象状态。</p><p>📜 微信中的撤回功能其实就是备忘录模式的一种体现。用户发错信息后，需要立即恢复到未发送状态。</p><br><h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><hr><h4 id="基于嵌套类的实现"><a href="#基于嵌套类的实现" class="headerlink" title="基于嵌套类的实现"></a>基于嵌套类的实现</h4><p>该模式的经典实现方式依赖于许多流行编程语言（例如 <code>C++</code>、 <code>C#</code> 和 <code>Java</code>）所支持的嵌套类。</p><ul><li><p><strong>原发器</strong>（Originator）类可以生成自身状态的快照（用自身状态创建一个备忘录），也可以在需要时通过快照恢复自身状态（用备忘录里保存的状态给自身状态赋值）。</p></li><li><p><strong>备忘录</strong>（Memento）是原发器状态快照的值对象（value object）。通常做法是将备忘录设为不可变的，并通过构造函数一次性传递数据。</p></li><li><p><strong>负责人</strong>（Caretaker）仅知道“何时”和“为何”捕捉原发器的状态，以及何时恢复状态。<font color="gray">负责人通过保存备忘录栈来记录原发器的历史状态。当原发器需要回溯历史状态时，负责人将从栈中获取最顶部（最后一个记录的）的备忘录，并将其传递给原发器的恢复（restoration）方法。</font></p></li></ul><p>🔖 在该实现方法中，备忘录类将被嵌套在原发器中。这样原发器就可访问备忘录的成员变量和方法，即使这些方法被声明为私有。另一方面，负责人对于备忘录的成员变量和方法的访问权限非常有限：它们只能在栈中保存备忘录，而不能修改其状态。</p><p><strong>备忘录模式的类图：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B19N001.png"></p><hr><h4 id="基于中间接口的实现"><a href="#基于中间接口的实现" class="headerlink" title="基于中间接口的实现"></a>基于中间接口的实现</h4><p>另外一种实现方法适用于不支持嵌套类的编程语言 （没错，<em>REFACTORING ·GURU·</em> 说的就是 <code>PHP</code>，本人没用过）。</p><ul><li><p>在没有嵌套类的情况下，你可以规定负责人仅可通过明确声明的中间接口与备忘录互动，该接口仅声明与备忘录元数据相关的方法，限制其对备忘录成员变量的直接访问权限。</p></li><li><p>另一方面，原发器可以直接与备忘录对象进行交互，访问备忘录类中声明的成员变量和方法。这种方式的缺点在于你需要将备忘录的所有成员变量声明为公有。</p></li></ul><p><strong>备忘录模式的类图：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B19N002.png"></p><hr><h4 id="封装更加严格的实现"><a href="#封装更加严格的实现" class="headerlink" title="封装更加严格的实现"></a>封装更加严格的实现</h4><p>如果你不想让其他类有任何机会通过备忘录来访问原发器的状态，那么还有另一种可用的实现方式。</p><ul><li><p>这种实现方式允许存在多种不同类型的原发器和备忘录。每种原发器都和其相应的备忘录类进行交互。原发器和备忘录都不会将其状态暴露给其他类。</p></li><li><p>负责人此时被明确禁止修改存储在备忘录中的状态。但负责人类将独立于原发器，因为此时恢复方法被定义在了备忘录类中。</p></li><li><p>每个备忘录将与创建了自身的原发器连接。原发器会将自己及状态传递给备忘录的构造函数。由于这些类之间的紧密联系，只要原发器定义了合适的设置器（setter），备忘录就能恢复其状态。</p></li></ul><p><strong>备忘录模式的类图：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B19N003.png"></p><hr><br><h3 id="模式实现"><a href="#模式实现" class="headerlink" title="模式实现"></a>模式实现</h3><p>该示例使用备忘录模式实现了博客编辑器的回退功能。使用 <code>BlogOriginator</code> 类来存放博客当前记录（博客内容的编辑操作），使用 <code>BlogCaretaker</code> 类来控制博客历史记录（编辑器的保存操作和回退操作）。每当用户执行 <code>BlogCaretaker</code> 类的 <code>save</code> 操作时，<code>BlogCaretaker</code> 会自动将当前的博客内容保存在历史信息栈中（用 <code>BlogMemento</code> 类型存储）。每当用户执行 <code>BlogCaretaker</code> 类的 <code>undo</code> 操作时，如果存在历史记录则回退到上一个保存的记录中。</p><h4 id="示例程序的类图"><a href="#示例程序的类图" class="headerlink" title="示例程序的类图"></a>示例程序的类图</h4><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B19N004.png"></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="原发器（内嵌备忘录）"><a href="#原发器（内嵌备忘录）" class="headerlink" title="原发器（内嵌备忘录）"></a>原发器（内嵌备忘录）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 博客原发器 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlogOriginator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BlogOriginator</span><span class="params">(String title, String author, String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">        <span class="keyword">this</span>.author = author;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取博客原发器的快照</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 博客备忘录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BlogMemento <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BlogMemento(<span class="keyword">this</span>.title, <span class="keyword">this</span>.author, <span class="keyword">this</span>.content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 恢复博客记录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> m 博客备忘录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restore</span><span class="params">(BlogMemento m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = m.title;</span><br><span class="line">        <span class="keyword">this</span>.author = m.author;</span><br><span class="line">        <span class="keyword">this</span>.content = m.content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 展示博客页面（markdown格式） */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showBlog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;title: &quot;</span> + <span class="keyword">this</span>.title);</span><br><span class="line">        System.out.println(<span class="string">&quot;author: &quot;</span> + <span class="keyword">this</span>.author);</span><br><span class="line">        System.out.println(<span class="string">&quot;---&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;## &quot;</span> + <span class="keyword">this</span>.title);</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthor</span><span class="params">(String author)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 博客备忘录，用于回退博客记录 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlogMemento</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String title;</span><br><span class="line">        <span class="keyword">private</span> String author;</span><br><span class="line">        <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">BlogMemento</span><span class="params">(String title, String author, String content)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.title = title;</span><br><span class="line">            <span class="keyword">this</span>.author = author;</span><br><span class="line">            <span class="keyword">this</span>.content = content;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="负责人"><a href="#负责人" class="headerlink" title="负责人"></a>负责人</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Deque;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 博客管理者类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlogCaretaker</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 博客原发器 */</span></span><br><span class="line">    <span class="keyword">private</span> BlogOriginator originator;</span><br><span class="line">    <span class="comment">/** 博客原发器的历史记录信息栈 */</span></span><br><span class="line">    <span class="keyword">private</span> Deque&lt;BlogOriginator.BlogMemento&gt; history = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BlogCaretaker</span><span class="params">(BlogOriginator originator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.originator = originator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 保存历史信息 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BlogOriginator.BlogMemento currentState = originator.save();</span><br><span class="line">        history.push(currentState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 回退记录 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!history.isEmpty()) &#123;</span><br><span class="line">            BlogOriginator.BlogMemento m = history.pop();</span><br><span class="line">            originator.restore(m);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> example.BlogCaretaker;</span><br><span class="line"><span class="keyword">import</span> example.BlogOriginator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 测试备忘录模式 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化博客内容并保存</span></span><br><span class="line">        BlogOriginator blogOriginator = <span class="keyword">new</span> BlogOriginator(<span class="string">&quot;备忘录模式&quot;</span>, <span class="string">&quot;Hellovie&quot;</span>, <span class="string">&quot;初始化备忘录模式的内容！&quot;</span>);</span><br><span class="line">        BlogCaretaker blogCaretaker = <span class="keyword">new</span> BlogCaretaker(blogOriginator);</span><br><span class="line">        blogCaretaker.save();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一次修改博客内容并保存</span></span><br><span class="line">        blogOriginator.setContent(<span class="string">&quot;第一次修改博客内容！&quot;</span>);</span><br><span class="line">        blogCaretaker.save();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二次修改博客内容，最新修改未保存</span></span><br><span class="line">        blogOriginator.setContent(<span class="string">&quot;第二次修改博客内容！&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 此时历史记录中存放两个记录（下列序号从栈顶开始）</span></span><br><span class="line">        <span class="comment">// 1. 第一次修改博客内容（最后一次保存记录）</span></span><br><span class="line">        <span class="comment">// 2. 初始化博客内容</span></span><br><span class="line">        System.out.println(<span class="string">&quot;打印最新的博客内容：&quot;</span>);</span><br><span class="line">        blogOriginator.showBlog();</span><br><span class="line">        System.out.println(<span class="string">&quot;\n------------------- 分割线 -------------------\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;回退一次：&quot;</span>);</span><br><span class="line">        blogCaretaker.undo();</span><br><span class="line">        blogOriginator.showBlog();</span><br><span class="line">        System.out.println(<span class="string">&quot;\n------------------- 分割线 -------------------\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;回退两次：&quot;</span>);</span><br><span class="line">        blogCaretaker.undo();</span><br><span class="line">        blogOriginator.showBlog();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">打印最新的博客内容：</span><br><span class="line">---</span><br><span class="line">title: 备忘录模式</span><br><span class="line">author: Hellovie</span><br><span class="line">---</span><br><span class="line">## 备忘录模式</span><br><span class="line">第二次修改博客内容！</span><br><span class="line"></span><br><span class="line">------------------- 分割线 -------------------</span><br><span class="line"></span><br><span class="line">回退一次：</span><br><span class="line">---</span><br><span class="line">title: 备忘录模式</span><br><span class="line">author: Hellovie</span><br><span class="line">---</span><br><span class="line">## 备忘录模式</span><br><span class="line">第一次修改博客内容！</span><br><span class="line"></span><br><span class="line">------------------- 分割线 -------------------</span><br><span class="line"></span><br><span class="line">回退两次：</span><br><span class="line">---</span><br><span class="line">title: 备忘录模式</span><br><span class="line">author: Hellovie</span><br><span class="line">---</span><br><span class="line">## 备忘录模式</span><br><span class="line">初始化备忘录模式的内容！</span><br></pre></td></tr></table></figure><br><h3 id="常用场景和解决方案"><a href="#常用场景和解决方案" class="headerlink" title="常用场景和解决方案"></a>常用场景和解决方案</h3><ul><li>需要保存一个对象在某一个时刻的状态或者恢复对象之前的状态时。</li><li>当直接访问对象的成员变量、获取器或设置器将导致封装被突破时。或者是不希望外界直接访问对象的内部状态时。</li><li>备忘录模式的应用场景比较局限，主要是用来备份、撤销、恢复等。</li></ul><br><h3 id="模式的优缺点"><a href="#模式的优缺点" class="headerlink" title="模式的优缺点"></a>模式的优缺点</h3><table><thead><tr><th align="left">优点</th><th align="left">缺点</th></tr></thead><tbody><tr><td align="left">你可以在不破坏对象封装情况的前提下创建对象状态快照。</td><td align="left">如果客户端过于频繁地创建备忘录，程序将消耗大量内存。</td></tr><tr><td align="left">你可以通过让负责人维护原发器状态历史记录来简化原发器代码。</td><td align="left">负责人必须完整跟踪原发器的生命周期，这样才能销毁弃用的备忘录。</td></tr><tr><td align="left"></td><td align="left">绝大部分动态编程语言（例如 <code>PHP</code>、<code>Python</code> 和 <code>JavaScript</code>）不能确保备忘录中的状态不被修改。</td></tr></tbody></table><h4 id="使用备忘录模式的优势"><a href="#使用备忘录模式的优势" class="headerlink" title="使用备忘录模式的优势"></a>使用备忘录模式的优势</h4><ul><li>能够快速撤销对对象状态的更改。例如，在编辑器中不小心删除了一段重要文字，使用回退操作能够快速复原。</li><li>能够帮助缓解记录历史对象状态。使用备忘录模式能够记录一些重要的数据信息（用户提供的订单数据）而不需要反复查询接口，提高效率。</li><li>能够提升代码的扩展性。备忘录模式是通过外部对象来保存原始对象的状态，而不是在原始对象中新增状态记录。</li></ul><h4 id="使用备忘录模式的劣势"><a href="#使用备忘录模式的劣势" class="headerlink" title="使用备忘录模式的劣势"></a>使用备忘录模式的劣势</h4><ul><li>备忘录会破坏封装性。当备忘录在进行恢复的过程中遇见错误时，可能会恢复错误的状态。</li><li>备忘录的对象数据很大时，读取数据可能出现内存用尽的情况。例如，在编辑器中加入高清的图片，如果直接记录图片本身可能会导致内存被用尽。</li></ul><br><h3 id="拓展知识"><a href="#拓展知识" class="headerlink" title="拓展知识"></a>拓展知识</h3><ul><li>你可以同时使用命令模式和备忘录模式来实现“撤销”。在这种情况下，命令用于对目标对象执行各种不同的操作，备忘录用来保存一条命令执行前该对象的状态。</li><li>你可以同时使用备忘录和迭代器模式来获取当前迭代器的状态，并且在需要的时候进行回滚。</li></ul><br><br><p>🔙 <a href="/archives/364ea8cc.html" title="设计模式">设计模式</a></p><p><strong>📌最后：希望本文能够给您提供帮助，文章中有不懂或不正确的地方，请在下方评论区💬留言！</strong></p><p><strong>🔗参考文献：</strong></p><p>🌐 <a href="https://refactoringguru.cn/design-patterns#intro-patterns">设计模式 –refactoringguru</a></p><p>▶️ <a href="https://www.bilibili.com/video/BV1hY411Y7zR/?p=1&vd_source=a9a236c4d6e5c5350c70b71ee0727b8c">bilibili-趣学设计模式；黄靖锋. –拉勾教育</a></p><p>📖 图解设计模式 /（日）结城浩著；杨文轩译. –北京：人民邮电出版社，2017.1</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>观察者模式Observer</title>
      <link href="/archives/c36f3b40.html"/>
      <url>/archives/c36f3b40.html</url>
      
        <content type="html"><![CDATA[<h3 id="观察者-Observer"><a href="#观察者-Observer" class="headerlink" title="观察者 Observer"></a>观察者 Observer</h3><p><strong>观察者模式</strong>（也称事件订阅者、监听者。）是一种行为设计模式，允许你定义一种订阅机制，可在对象事件发生时通知多个“观察”该对象的其他对象。这是对象之间的一对多依赖关系，这样当一个对象改变状态时，它的所有依赖项都会自动得到通知和更新。</p><p><strong>观察者模式</strong>的特点在于<strong>找到合适的被观察者</strong>。</p><p>定义一个通知列表，将需要通知的对象放到这个通知列表中，当被观察者需要发起通知时，就会通知这个列表中的所有对象。</p><br><h3 id="为什么要使用？"><a href="#为什么要使用？" class="headerlink" title="为什么要使用？"></a>为什么要使用？</h3><p><strong>观察者模式的对象职责：</strong></p><p><strong>当一个对象改变状态时，它的所有依赖项对象都会自动得到通知和更新。</strong></p><p>观察者模式🔎能够方便我们捕获观察对象的变化并及时做出相应的操作，同时还能提升代码扩展性。</p><p>例如，当用户🙆‍♂️（订阅者）关注的博主💃（发布者）更新时，能够及时收到更新的内容📄。使用观察者模式🔎我们可以任意扩展新的发布者或新的订阅者。</p><p>假设现在需要添加“专栏📢”这个模块，希望它能像“关注博主的用户🙆‍♂️能在博主💃更新后及时收到更新内容📄”一样。那么只需要在“发布者接口”下实现一个“专栏发布者”，就能让“订阅专栏的用户👨‍💻及时收到更新内容📄”。</p><br><h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><ul><li><p><strong>发布者</strong>（Publisher）会向其他对象发送值得关注的事件。事件会在发布者自身状态改变或执行特定行为后发生。发布者中包含一个允许新订阅者加入和当前订阅者离开列表的订阅构架。<font color="gray">当新事件发生时，发送者会遍历订阅列表并调用每个订阅者对象的通知方法。该方法是在订阅者接口中声明的。</font></p></li><li><p><strong>订阅者</strong>（Subscriber）接口声明了通知接口。在绝大多数情况下，该接口仅包含一个 <code>update</code> 更新方法。该方法可以拥有多个参数，使发布者能在更新时传递事件的详细信息。</p></li><li><p><strong>具体订阅者</strong>（Concrete Subscribers）可以执行一些操作来回应发布者的通知。所有具体订阅者类都实现了同样的接口，因此发布者不需要与具体类相耦合。<font color="gray">订阅者通常需要一些上下文信息来正确地处理更新。因此，发布者通常会将一些上下文数据作为通知方法的参数进行传递。发布者也可将自身作为参数进行传递，使订阅者直接获取所需的数据。</font></p></li><li><p><strong>客户端</strong>（Client）会分别创建发布者和订阅者对象，然后为订阅者注册发布者更新。</p></li></ul><p><strong>观察者模式的类图：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B18N001.png"></p><br><h3 id="模式实现"><a href="#模式实现" class="headerlink" title="模式实现"></a>模式实现</h3><p>该示例使用观察者模式定义两个观察者类 <code>DigitObserver</code>、<code>GraphObserver</code> 和一个发布者类 <code>RandomNumberGenerator</code>。实现每当发布者类 <code>RandomNumberGenerator</code> 执行 <code>execute</code> 方法生成数值时。两个观察者类 <code>DigitObserver</code>、<code>GraphObserver</code> 会自动根据发布者类生成的数值分别生成“数字版数值”和“数值数量的‘*’”。</p><h4 id="示例程序的类图"><a href="#示例程序的类图" class="headerlink" title="示例程序的类图"></a>示例程序的类图</h4><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B18N002.png"></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="发布者抽象类"><a href="#发布者抽象类" class="headerlink" title="发布者抽象类"></a>发布者抽象类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 数字生成器发布者抽象类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">NumberGenerator</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 观察者列表 */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加观察者到观察者列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> observer 要添加的观察者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        observers.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除观察者列表的观察者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> observer 要删除的观察者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        observers.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 发送通知给所有观察者 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Observer observer : observers) &#123;</span><br><span class="line">            observer.update(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取生成的数值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 生成的数值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 生成数值 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="发布者具体实现"><a href="#发布者具体实现" class="headerlink" title="发布者具体实现"></a>发布者具体实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 随机数生成器发布者具体实现 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomNumberGenerator</span> <span class="keyword">extends</span> <span class="title">NumberGenerator</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 随机数生成器 */</span></span><br><span class="line">    <span class="keyword">private</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="comment">/** 当前数值 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取生成的数值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 生成的数值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 每隔1秒生成一个1~9的数值 */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            number = random.nextInt(<span class="number">10</span>);</span><br><span class="line">            notifyObservers();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="观察者接口"><a href="#观察者接口" class="headerlink" title="观察者接口"></a>观察者接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 观察者接口 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字生成后自动更新</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> generator 数字生成器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(NumberGenerator generator)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="观察者具体实现"><a href="#观察者具体实现" class="headerlink" title="观察者具体实现"></a>观察者具体实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 数字形式显示数值，具体观察者实现类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DigitObserver</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字生成后自动更新</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> generator 数字生成器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(NumberGenerator generator)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;DigitObserver：&quot;</span> + generator.getNumber());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 图形形式显示数值，具体观察者实现类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GraphObserver</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字生成后自动更新</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> generator 数字生成器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(NumberGenerator generator)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;GraphObserver：&#x27;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; generator.getNumber(); i++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> example.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 测试观察者模式 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        NumberGenerator generator = <span class="keyword">new</span> RandomNumberGenerator();</span><br><span class="line">        Observer digitObserver = <span class="keyword">new</span> DigitObserver();</span><br><span class="line">        GraphObserver graphObserver = <span class="keyword">new</span> GraphObserver();</span><br><span class="line">        generator.addObserver(digitObserver);</span><br><span class="line">        generator.addObserver(graphObserver);</span><br><span class="line">        generator.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DigitObserver：9</span><br><span class="line">GraphObserver：&#x27;*********&#x27;</span><br><span class="line">DigitObserver：0</span><br><span class="line">GraphObserver：&#x27;&#x27;</span><br><span class="line">DigitObserver：2</span><br><span class="line">GraphObserver：&#x27;**&#x27;</span><br><span class="line">DigitObserver：9</span><br><span class="line">GraphObserver：&#x27;*********&#x27;</span><br><span class="line">DigitObserver：7</span><br><span class="line">GraphObserver：&#x27;*******&#x27;</span><br></pre></td></tr></table></figure><br><h3 id="常用场景和解决方案"><a href="#常用场景和解决方案" class="headerlink" title="常用场景和解决方案"></a>常用场景和解决方案</h3><ul><li>当一个对象状态的改变需要改变其他对象时，或实际对象是事先未知的或动态变化的时。</li><li>一个对象发生改变时只想要发生通知，而不需要知道接收者是谁。</li><li>需要创建一种链式触发机制时。</li><li>微博或微信朋友圈发送的场景。</li><li>需要建立基于事件触发的场景。</li></ul><br><h3 id="模式的优缺点"><a href="#模式的优缺点" class="headerlink" title="模式的优缺点"></a>模式的优缺点</h3><table><thead><tr><th align="left">优点</th><th align="left">缺点</th></tr></thead><tbody><tr><td align="left"><em>开闭原则</em>。你无需修改发布者代码就能引入新的订阅者类（如果是发布者接口则可轻松引入发布者类）。</td><td align="left">订阅者的通知顺序是随机的。</td></tr><tr><td align="left">你可以在运行时建立对象之间的联系。</td><td align="left"></td></tr></tbody></table><h4 id="使用观察者模式的优势"><a href="#使用观察者模式的优势" class="headerlink" title="使用观察者模式的优势"></a>使用观察者模式的优势</h4><ul><li>能够降低系统与系统之间的耦合性。</li><li>提高代码的扩展性，能够任意引入新的订阅者类或发布者类。</li><li>可以建立一套基于目标对象特定操作或数据的触发机制。</li></ul><h4 id="使用观察者模式的劣势"><a href="#使用观察者模式的劣势" class="headerlink" title="使用观察者模式的劣势"></a>使用观察者模式的劣势</h4><ul><li>增加代码的理解难度。</li><li>降低了系统的性能。</li></ul><br><h3 id="拓展知识"><a href="#拓展知识" class="headerlink" title="拓展知识"></a>拓展知识</h3><p>责任链模式、命令模式、中介者模式和观察者模式用于处理请求发送者和接收者之间的不同连接方式：</p><ul><li><em>责任链</em>按照顺序将请求动态传递给一系列的潜在接收者，直至其中一名接收者对请求进行处理。</li><li><em>命令</em>在发送者和请求者之间建立单向连接。</li><li><em>中介者</em>清除了发送者和请求者之间的直接连接，强制它们通过一个中介对象进行间接沟通。</li><li><em>观察者</em>允许接收者动态地订阅或取消接收请求。</li></ul><br><br><p>🔙 <a href="/archives/364ea8cc.html" title="设计模式">设计模式</a></p><p><strong>📌最后：希望本文能够给您提供帮助，文章中有不懂或不正确的地方，请在下方评论区💬留言！</strong></p><p><strong>🔗参考文献：</strong></p><p>🌐 <a href="https://refactoringguru.cn/design-patterns#intro-patterns">设计模式 –refactoringguru</a></p><p>▶️ <a href="https://www.bilibili.com/video/BV1hY411Y7zR/?p=1&vd_source=a9a236c4d6e5c5350c70b71ee0727b8c">bilibili-趣学设计模式；黄靖锋. –拉勾教育</a></p><p>📖 图解设计模式 /（日）结城浩著；杨文轩译. –北京：人民邮电出版社，2017.1</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原型模式 Prototype</title>
      <link href="/archives/e3c62fc2.html"/>
      <url>/archives/e3c62fc2.html</url>
      
        <content type="html"><![CDATA[<h3 id="原型-Prototype"><a href="#原型-Prototype" class="headerlink" title="原型 Prototype"></a>原型 Prototype</h3><p><strong>原型模式</strong>是一种创建型设计模式，使你能够复制已有对象，而又无需使代码依赖它们所属的类。</p><br><h3 id="为什么要使用？"><a href="#为什么要使用？" class="headerlink" title="为什么要使用？"></a>为什么要使用？</h3><p><strong>原型模式的对象职责：</strong></p><p><strong>复制已有对象无需使代码依赖它们所属的类。</strong></p><p>使用原型实例指定创建对象的种类，然后通过拷贝这些原型来创建新的对象。</p><p>在现实开发中，我们可以会遇到一些情况，无法根据类来生成实例，而要根据现有的实例来生成新的实例。如以下情况：</p><ol><li>对象种类繁多，无法将它们整合到一个类中时。</li><li>难以根据类生成实例时，或者说生成实例的过程太过复杂。</li><li>想解耦框架与生成的实例时，让生成实例的框架不依赖于具体的类。</li></ol><p>那么，我们可以使用原型模式来生成新的类，使被复制的具体的类与复制解耦。</p><br><h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><ul><li><p><strong>原型</strong> （Prototype）接口将对克隆方法进行声明。在绝大多数情况下，其中只会有一个名为 <code>clone</code> 克隆的方法。</p></li><li><p><strong>具体原型</strong>（Concrete Prototype）类将实现克隆方法。除了将原始对象的数据复制到克隆（需要考虑浅拷贝还是深拷贝）体中之外，该方法有时还需处理克隆过程中的极端情况，例如克隆关联对象和梳理递归依赖等等。</p></li><li><p><strong>客户端</strong>（Client）可以复制实现了原型接口的任何对象。</p></li></ul><p><strong>原型模式的类图：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B06N001.png"></p><p>通过一个声明 <code>clone</code> 的接口作为原型，让其他需要被克隆的对象实现它。这样使你能够克隆对象，但又不需要将代码和对象所属类耦合。</p><br><h3 id="模式实现"><a href="#模式实现" class="headerlink" title="模式实现"></a>模式实现</h3><p>该示例使用原型模式构建一个注册原型的工厂和下划线类原型。将原型注册到工厂中，需要克隆原型时，只需要使用相应的原型 <code>key</code>，即可获取相应原型克隆实例。</p><h4 id="示例程序的类图"><a href="#示例程序的类图" class="headerlink" title="示例程序的类图"></a>示例程序的类图</h4><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B06N002.png"></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="原型接口"><a href="#原型接口" class="headerlink" title="原型接口"></a>原型接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 原型接口 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IPrototype</span> <span class="keyword">extends</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 克隆接口</span></span><br><span class="line"><span class="comment">     * 如果在没有实现 Cloneable 接口的实例上调用 Object 的 clone 方法，则会导致抛出 CloneNotSupportedException 异常。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> IPrototype</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> CloneNotSupportedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">IPrototype <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="具体原型"><a href="#具体原型" class="headerlink" title="具体原型"></a>具体原型</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 具体原型 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnderlinePen</span> <span class="keyword">implements</span> <span class="title">IPrototype</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 下划线符号 */</span></span><br><span class="line">    <span class="keyword">private</span> String ulChar;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UnderlinePen</span><span class="params">(String ulChar)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ulChar = ulChar;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 打印下划线 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ulChar != <span class="keyword">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(ulChar)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                System.out.print(ulChar);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 克隆接口</span></span><br><span class="line"><span class="comment">     * 如果在没有实现 Cloneable 接口的实例上调用 Object 的 clone 方法，则会导致抛出 CloneNotSupportedException 异常。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> IPrototype 克隆后的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> CloneNotSupportedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IPrototype <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        IPrototype prototype = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            prototype = (IPrototype) <span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prototype;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="原型工厂"><a href="#原型工厂" class="headerlink" title="原型工厂"></a>原型工厂</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 原型工厂 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrototypeFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 原型注册表 */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, IPrototype&gt; prototypeMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(String name, IPrototype prototype)</span> </span>&#123;</span><br><span class="line">        prototypeMap.put(name, prototype);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据原型注册表，拷贝原型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 原型注册表key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 拷贝原型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IPrototype <span class="title">getPrototypeInstance</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        IPrototype prototype = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            prototype = prototypeMap.get(name).clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prototype;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> example.IPrototype;</span><br><span class="line"><span class="keyword">import</span> example.PrototypeFactory;</span><br><span class="line"><span class="keyword">import</span> example.UnderlinePen;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 测试原型模式 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PrototypeFactory prototypeFactory = <span class="keyword">new</span> PrototypeFactory();</span><br><span class="line">        UnderlinePen plus = <span class="keyword">new</span> UnderlinePen(<span class="string">&quot;+&quot;</span>);</span><br><span class="line">        UnderlinePen minus = <span class="keyword">new</span> UnderlinePen(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        prototypeFactory.register(<span class="string">&quot;plus&quot;</span>, plus);</span><br><span class="line">        prototypeFactory.register(<span class="string">&quot;minus&quot;</span>, minus);</span><br><span class="line">        UnderlinePen plusClone = (UnderlinePen) prototypeFactory.getPrototypeInstance(<span class="string">&quot;plus&quot;</span>);</span><br><span class="line">        UnderlinePen minusClone = (UnderlinePen) prototypeFactory.getPrototypeInstance(<span class="string">&quot;minus&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;原生“+”对象(&quot;</span> + System.identityHashCode(plus) + <span class="string">&quot;)输出：&quot;</span>);</span><br><span class="line">        plus.print();</span><br><span class="line">        System.out.print(<span class="string">&quot;克隆“+”对象(&quot;</span> + System.identityHashCode(plusClone) + <span class="string">&quot;)输出：&quot;</span>);</span><br><span class="line">        plusClone.print();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\n------------------- 分割线 -------------------\n&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.print(<span class="string">&quot;原生“-”对象(&quot;</span> + System.identityHashCode(minus) + <span class="string">&quot;)输出：&quot;</span>);</span><br><span class="line">        minus.print();</span><br><span class="line">        System.out.print(<span class="string">&quot;克隆“-”对象(&quot;</span> + System.identityHashCode(minusClone) + <span class="string">&quot;)输出：&quot;</span>);</span><br><span class="line">        minusClone.print();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">原生“+”对象(460141958)输出：++++++++++</span><br><span class="line">克隆“+”对象(1163157884)输出：++++++++++</span><br><span class="line"></span><br><span class="line">------------------- 分割线 -------------------</span><br><span class="line"></span><br><span class="line">原生“-”对象(1956725890)输出：----------</span><br><span class="line">克隆“-”对象(356573597)输出：----------</span><br></pre></td></tr></table></figure><p>从上述结果不难看出，我们用原型模式创建的对象和原来的对象并非同个对象，但是属性又完全一致。</p><br><h3 id="常用场景和解决方案"><a href="#常用场景和解决方案" class="headerlink" title="常用场景和解决方案"></a>常用场景和解决方案</h3><ul><li>资源优化场景。当对象初始化需要借助许多外部资源时，如 <code>IO</code> 资源。</li><li>复制的依赖场景。创建对象时需要多个对象相互依赖。</li><li>性能和安全要求的场景。</li><li>同一个对象可能被多个修改者使用的场景。</li><li>需要保存原始对象状态的场景。例如记录历史操作。</li><li>结合工厂模式使用。用原型注册表来记录每个原型，让使用者能克隆所需的原型。</li></ul><br><h3 id="模式的优缺点"><a href="#模式的优缺点" class="headerlink" title="模式的优缺点"></a>模式的优缺点</h3><table><thead><tr><th align="left">优点</th><th align="left">缺点</th></tr></thead><tbody><tr><td align="left">你可以克隆对象，而无需与它们所属的具体类相耦合。</td><td align="left">克隆包含循环引用的复杂对象可能会非常麻烦。</td></tr><tr><td align="left">你可以克隆预生成原型，避免反复运行初始化代码。</td><td align="left"></td></tr><tr><td align="left">你可以更方便地生成复杂对象。</td><td align="left"></td></tr><tr><td align="left">你可以用继承以外的方式来处理复杂对象的不同配置。</td><td align="left"></td></tr></tbody></table><h4 id="使用原型模式的优势"><a href="#使用原型模式的优势" class="headerlink" title="使用原型模式的优势"></a>使用原型模式的优势</h4><ul><li>减少每次创建对象的资源消耗。使用对象拷贝是在内存中进行二进制流的拷贝，资源消耗更少、速度更快。</li><li>减低对象创建的时间消耗，在需要查询数据库创建对象时，如果数据库繁忙，就需要等待，那么这个创建过程就可能出现长时间等待。使用原型模式创建对象就相当于进行一次缓存读取，大大加快了创建对象时间。</li><li>快速复制对象运行时的状态，不需要了解创建过程也能快速创建对象。</li><li>能保存原始对象的副本，方便快速回滚到上一次保存或最初的状态。</li><li>可以快速扩展运行时对象的属性和方法。</li></ul><h4 id="使用原型模式的劣势"><a href="#使用原型模式的劣势" class="headerlink" title="使用原型模式的劣势"></a>使用原型模式的劣势</h4><ul><li>需要一个被初始化过的正确对象。</li><li>复制大对象时，可能出现内存溢出的 <code>OOM</code>（Out Of Memory） 错误。</li><li>动态扩展对象功能时可能会掩盖新的风险。</li></ul><br><h3 id="拓展知识"><a href="#拓展知识" class="headerlink" title="拓展知识"></a>拓展知识</h3><ul><li>原型可用于保存命令模式的历史记录。</li><li>大量使用组合模式和装饰模式的设计通常可从对于原型的使用中获益。你可以通过该模式来复制复杂结构，而非从零开始重新构造。</li><li>原型并不基于继承，因此没有继承的缺点。另一方面，<em>原型</em>需要对被复制对象进行复杂的初始化。工厂方法基于继承， 但是它不需要初始化步骤。</li><li>Java 中的 <code>Cloneable</code> 接口是一个<strong>标记接口</strong>，用来标记可以使用 <code>clone</code> 方法进行复制。其内部根本没有声明 <code>clone</code> 方法。<code>clone</code> 方法的定义在 <code>java.lang.Object</code> 中。</li><li>clone 方法进行的复制是浅复制。它只是<strong>将被复制实例的字段值直接复制到新的实例中</strong>。如果字段保存的是数组，那么它只会复制该数组的引用，并不会复制数组中的元素。</li><li>使用原型模式时可能需要我们对 <code>IO</code> 流、内存和 <code>JVM</code> 等一些底层的原理有更加深入的理解才行。</li></ul><br><br><p>🔙 <a href="/archives/364ea8cc.html" title="设计模式">设计模式</a></p><p><strong>📌最后：希望本文能够给您提供帮助，文章中有不懂或不正确的地方，请在下方评论区💬留言！</strong></p><p><strong>🔗参考文献：</strong></p><p>🌐 <a href="https://refactoringguru.cn/design-patterns#intro-patterns">设计模式 –refactoringguru</a></p><p>▶️ <a href="https://www.bilibili.com/video/BV1hY411Y7zR/?p=1&vd_source=a9a236c4d6e5c5350c70b71ee0727b8c">bilibili-趣学设计模式；黄靖锋. –拉勾教育</a></p><p>📖 图解设计模式 /（日）结城浩著；杨文轩译. –北京：人民邮电出版社，2017.1</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理模式Proxy</title>
      <link href="/archives/9339e2b1.html"/>
      <url>/archives/9339e2b1.html</url>
      
        <content type="html"><![CDATA[<h3 id="代理-Proxy"><a href="#代理-Proxy" class="headerlink" title="代理 Proxy"></a>代理 Proxy</h3><p><strong>代理模式</strong>是一种结构型设计模式，让你能够提供对象的替代品或其占位符。代理控制着对于原对象的访问，并允许在将请求提交给对象前后进行一些处理。</p><p>代理模式的基本理念是作为一个外包装的中间层，享有控制住访问对象的权力，同时也能扩展一些功能。其核心能力在于对某一个具体的功能进行增强和补充。</p><br><h3 id="为什么要使用？"><a href="#为什么要使用？" class="headerlink" title="为什么要使用？"></a>为什么要使用？</h3><p><strong>代理模式的对象职责：</strong></p><p><strong>能够提供对象的替代品或其占位符。</strong>代理模式是将“原对象的控制权”委托给“代理”，让“代理”能够将请求提交给“原对象”前后进行一些处理。</p><p>在现实生活中，房东🙍‍♂️因为某些事情无法处理出售或出租房子🏠的时候，就会委托房产中介👨‍💼去帮他们进行出售或出租。这就是代理模式的一种真实世界类比。</p><p><strong>❔为什么要使用代理模式，而不直接使用“原对象”呢？</strong></p><p><strong>👉 客户端有时无法直接操作某些对象。</strong></p><p>📜 在分布式应用中，你需要调用的对象运行在另外一台服务器上。如果直接调用“原对象”，就需要处理网络服务，通过网络进行访问。我们可以使用代理模式，建立一个网络代理对象，就只需要调用代理对象就可以进行访问。</p><p><strong>👉 客户端执行某些耗时操作容易造成服务端阻塞。</strong></p><p>📜 在云编辑器里进行文案编写时，使用者不希望在执行拷贝图片的操作后，打字无法正常操作，甚至无法查看其他页面。我们可以使用代理模式，通过标示图片所在地址，用代理对象去读取图片资源。</p><p><strong>👉 服务端需要控制客户端的访问权限。</strong></p><p>📜 某一项业务由于安全原因只能让一部分特定的用户去访问。我们可以使用代理模式，让代理对象去接收所有请求，再有代理对象做权限判断。</p><p>💡 还有“某个接口可能需要外部额外操作”、“系统一直保存无用的、占用大资源的对象”等情况，也能考虑使用代理模式。</p><br><h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><ul><li><p><strong>服务接口</strong>（Service Interface）声明了服务接口。代理必须遵循该接口才能伪装成服务对象。</p></li><li><p><strong>服务</strong>（Service）类提供了一些实用的业务逻辑。</p></li><li><p><strong>代理</strong>（Proxy）类包含一个指向服务对象的引用成员变量。代理完成其任务（例如延迟初始化、记录日志、访问控制和缓存等）后会将请求传递给服务对象。<font color="gray">通常情况下， 代理会对其服务对象的整个生命周期进行管理。</font></p></li><li><p><strong>客户端</strong>（Client）能通过同一接口与服务或代理进行交互，所以你可在一切需要服务对象的代码中使用代理。</p></li></ul><p><strong>代理模式的类图：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B13N001.png"></p><br><h3 id="模式实现"><a href="#模式实现" class="headerlink" title="模式实现"></a>模式实现</h3><p>该示例使用代理模式将耗时的打印机实例初始化交由代理类负责。代理类让其只有在需要打印的时候才会开始实例化打印机。</p><h4 id="示例程序的类图"><a href="#示例程序的类图" class="headerlink" title="示例程序的类图"></a>示例程序的类图</h4><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B13N002.png"></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="服务接口"><a href="#服务接口" class="headerlink" title="服务接口"></a>服务接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 打印机服务接口 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Printable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置打印机名字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 打印机名字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setPrinterName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取打印机名字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 打印机名字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">getPrinterName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 要打印的内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(String value)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 打印机服务 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Printer</span> <span class="keyword">implements</span> <span class="title">Printable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 打印机名字 */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 生成实例需要5秒 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Printer</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在生成Printer实例...&quot;</span>);</span><br><span class="line">        heavyJob();</span><br><span class="line">        System.out.println(<span class="string">&quot;已生成Printer实例！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置打印机名字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 打印机名字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrinterName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取打印机名字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 打印机名字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPrinterName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 要打印的内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----* &quot;</span> + <span class="keyword">this</span>.name + <span class="string">&quot; *-----&quot;</span>);</span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 模拟生成实例需要耗费大量时间 */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">heavyJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(i + <span class="number">1</span> + <span class="string">&quot;秒...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 打印机代理 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrinterProxy</span> <span class="keyword">implements</span> <span class="title">Printable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 打印机名字 */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">/** 打印机服务对象 */</span></span><br><span class="line">    <span class="keyword">private</span> Printer real;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PrinterProxy</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置打印机名字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 打印机名字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setPrinterName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取打印机名字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 打印机名字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPrinterName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 要打印的内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        realize();</span><br><span class="line">        real.print(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 生成实例 */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">realize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (real == <span class="keyword">null</span>) &#123;</span><br><span class="line">            real = <span class="keyword">new</span> Printer(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> example.Printable;</span><br><span class="line"><span class="keyword">import</span> example.PrinterProxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 测试代理模式 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Printable p = <span class="keyword">new</span> PrinterProxy(<span class="string">&quot;Hellovie&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化打印机名字为：&quot;</span> + p.getPrinterName());</span><br><span class="line">        p.setPrinterName(<span class="string">&quot;The Hellovie&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;修改打印机名字为：&quot;</span> + p.getPrinterName());</span><br><span class="line">        p.print(<span class="string">&quot;代理模式测试&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">初始化打印机名字为：Hellovie</span><br><span class="line">修改打印机名字为：The Hellovie</span><br><span class="line">正在生成Printer实例...</span><br><span class="line">1秒...</span><br><span class="line">2秒...</span><br><span class="line">3秒...</span><br><span class="line">已生成Printer实例！</span><br><span class="line">-----* The Hellovie *-----</span><br><span class="line">代理模式测试</span><br></pre></td></tr></table></figure><p>生成 <code>Printer</code> 实例需要耗时 3 秒，使用 <code>PrinterProxy</code> 代理类让生成实例的时机放在调用 <code>print</code> 方法的时候。实现打印机只有在打印的时候才会生成实例。</p><br><h3 id="常用场景和解决方案"><a href="#常用场景和解决方案" class="headerlink" title="常用场景和解决方案"></a>常用场景和解决方案</h3><ul><li>Virtual Proxy（虚拟代理），适用于延迟初始化，用小对象表示大对象的场景。<font color="gray">真正需要原对象实例时，才生成和初始化。</font></li><li>Access Proxy（保护代理），适用于服务端对客户端的访问控制场景。<font color="gray">为原对象的功能做一些访问限制。</font></li><li>Remote Proxy（远程代理），适用于需要本地执行远程服务代码的场景。<font color="gray">调用远程原对象如同在身边一样。</font></li><li>日志记录代理，适用于需要保存请求对象历史记录的场景。<font color="gray">在原对象周围添加日志监控。</font></li><li>缓存代理，适用于缓存客户请求结果并对缓存生命周期进行管理的场景。<font color="gray">对重复请求的相同结果进行缓存。</font></li><li>智能引用，适用于在没有客户端使用某个重量级对象时立即销毁该对象。<font color="gray">代理会将所有获取了指向服务对象或其结果的客户端记录在案。代理会时不时地遍历各个客户端，检查它们是否仍在运行。如果相应的客户端列表为空，代理就会销毁该服务对象，释放底层系统资源。代理还可以记录客户端是否修改了服务对象。其他客户端还可以复用未修改的对象。</font></li></ul><br><h3 id="模式的优缺点"><a href="#模式的优缺点" class="headerlink" title="模式的优缺点"></a>模式的优缺点</h3><table><thead><tr><th align="left">优点</th><th align="left">缺点</th></tr></thead><tbody><tr><td align="left">你可以在客户端毫无察觉的情况下控制服务对象。</td><td align="left">代码可能会变得复杂，因为需要新建许多类。</td></tr><tr><td align="left">如果客户端对服务对象的生命周期没有特殊要求，你可以对生命周期进行管理。</td><td align="left">服务响应可能会延迟。</td></tr><tr><td align="left">即使服务对象还未准备好或不存在，代理也可以正常工作。</td><td align="left"></td></tr><tr><td align="left"><em>开闭原则</em>。你可以在不对服务或客户端做出修改的情况下创建新代理。</td><td align="left"></td></tr></tbody></table><h4 id="使用代理模式的优势"><a href="#使用代理模式的优势" class="headerlink" title="使用代理模式的优势"></a>使用代理模式的优势</h4><ul><li>作为接口的特定中间层能够降低对象间的直接耦合。</li><li>虚拟代理通过延迟加载以及使用小对象代表大对象的方式，帮助减少系统资源的损耗，提升系统运行速度。</li><li>保护代理可以控制客户端对服务端的访问权限。</li><li>远程代理帮助客户端快速访问分布式机器上的对象，分布式服务器可以提供集群负载均衡、故障容错和高性能的计算能力。</li><li>日志代理记录能记录每次操作的信息，对于用户使用轨迹跟踪、数据统计、定位问题等都有重要作用。</li><li>缓存代理能够提供各式各样的缓存结果，对于需要高频读取重复数据的系统来说，能极大地提升系统性能。</li><li>智能引用能够销毁长时间未被使用却占用大量资源的对象，释放底层资源。还能为原对象提供一些额外的操作被使用。</li></ul><h4 id="使用代理模式的劣势"><a href="#使用代理模式的劣势" class="headerlink" title="使用代理模式的劣势"></a>使用代理模式的劣势</h4><ul><li>因为在客户端和服务器之间增加了代理对象，所以增加了系统的复杂度。</li><li>实现代理模式的服务，如果处理请求时间过长，容易造成多个服务调用阻塞，从而影响整体系统的处理速度。</li><li>对于一些偏操作系统或标准协议等底层的代理服务而言，代码实现可能很复杂。</li></ul><br><h3 id="拓展知识"><a href="#拓展知识" class="headerlink" title="拓展知识"></a>拓展知识</h3><ul><li>适配器模式能为被封装对象提供不同的接口，代理模式能为对象提供相同的接口，装饰模式则能为对象提供加强的接口。</li><li>装饰和代理两者之间的不同之处在于<em>代理</em>通常自行管理其服务对象的生命周期，而<em>装饰</em>的生成则总是由客户端进行控制。</li><li>代理模式的应用比装饰模式更广泛，代理模式不执着于链式结构，而是采用更为灵活的单一结构。</li></ul><br><br><p>🔙 <a href="/archives/364ea8cc.html" title="设计模式">设计模式</a></p><p><strong>📌最后：希望本文能够给您提供帮助，文章中有不懂或不正确的地方，请在下方评论区💬留言！</strong></p><p><strong>🔗参考文献：</strong></p><p>🌐 <a href="https://refactoringguru.cn/design-patterns#intro-patterns">设计模式 –refactoringguru</a></p><p>▶️ <a href="https://www.bilibili.com/video/BV1hY411Y7zR/?p=1&vd_source=a9a236c4d6e5c5350c70b71ee0727b8c">bilibili-趣学设计模式；黄靖锋. –拉勾教育</a></p><p>📖 图解设计模式 /（日）结城浩著；杨文轩译. –北京：人民邮电出版社，2017.1</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>访问者模式Visitor</title>
      <link href="/archives/6ebc1a4e.html"/>
      <url>/archives/6ebc1a4e.html</url>
      
        <content type="html"><![CDATA[<h3 id="访问者-Visitor"><a href="#访问者-Visitor" class="headerlink" title="访问者 Visitor"></a>访问者 Visitor</h3><p><strong>访问者模式</strong>是一种行为设计模式，它能将算法与其所作用的对象隔离开来。允许在运行时将一个或多个操作应用于一组对象，将<strong>操作</strong>与<strong>对象结构</strong>分离。</p><p>访问者模式是以行为（某一个操作）作为扩展对象功能的出发点，在不改变已有类的功能的前提下进行批量扩展。</p><p><strong>🎈 在学习访问者模式之前，需要想搞清楚以下概念：</strong></p><p>📜 <strong>双分派</strong>是在执行一个方法时，不仅要根据对象运行时的类型来决定，还要根据方法参数<font color="red">运行时</font>的类型来决定。</p><p>📜 <strong>单分派</strong>是在执行一个方法时，不仅要根据对象运行时的类型来决定，还要根据方法参数<font color="blue">编译时</font>的类型来决定。</p><p>💡 Java 支持单分派不支持多分派！Java 重载方法的参数类型在编译时就已经确定了。就算我们使用 <code>Parent value = new Child()</code> 去调用重载方法 <code>method(value)</code>（🎗️ <code>method(Parent)</code>、🎗️  <code>method(Child)</code>），执行的也只会是 <code>method(Parent)</code>。因为单分派在编译时方法参数类型就已经确定，所以就算使用父类类型来保存子类对象，也只能调用父类参数类型的重载方法。</p><br><h3 id="为什么要使用？"><a href="#为什么要使用？" class="headerlink" title="为什么要使用？"></a>为什么要使用？</h3><p><strong>访问者模式的对象职责：</strong></p><p><strong>在运行时能够将一个或多个操作应用于一组对象，将操作与对象结构分离。</strong></p><p>👉 解决编程部分语言不支持动态双分派的能力。</p><p>👉 需要动态绑定不同的对象和对象操作。</p><p>👉 通过行为与对象结构的分离实现对象的职责分离，提高代码复用性。</p><p>💡 对于一些数据元素相对稳定，而访问方法或操作方法多变的情况，访问者模式是一个好的解决方案。</p><br><h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><ul><li><strong>访问者</strong>（Visitor）接口声明了一系列以对象结构的具体元素为参数的访问者方法。如果编程语言支持重载，这些方法的名称可以是相同的，但是其参数一定是不同的。</li><li><strong>具体访问者</strong>（Concrete Visitor）会为不同的具体元素类实现相同行为的几个不同版本。</li><li><strong>元素</strong>（Element）接口声明了一个方法来“接收”访问者。该方法必须有一个参数被声明为访问者接口类型。</li><li><strong>具体元素</strong>（Concrete Element）必须实现接收方法。该方法的目的是根据当前元素类将其调用重定向到相应访问者的方法。请注意，即使元素基类实现了该方法，所有子类都必须对其进行重写并调用访问者对象中的合适方法。</li><li><strong>客户端</strong>（Client）通常会作为集合或其他复杂对象（例如一个组合树）的代表。客户端通常不知晓所有的具体元素类，因为它们会通过抽象接口与集合中的对象进行交互。</li></ul><p><strong>访问者模式的类图：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B14N001.png"></p><p>访问者模式是一种双分派模式，所以对于 <code>visit(element: ConcreteElementA)</code>，它知道 <code>ConcreteElementA</code> 中独有的 <code>featureA</code> 方法。<code>Client</code> 通过 <code>element.accept(new ConcreteVisitor())</code>，为需要访问的 <code>element</code> 传入指定的 <code>Visitor</code>。那么通过在 <code>accept(visitor: Visitor)</code> 中执行 <code>visitor.visit(this)</code> 来实现传入可变类型的参数。</p><br><h3 id="模式实现"><a href="#模式实现" class="headerlink" title="模式实现"></a>模式实现</h3><p>该示例使用访问者模式来实现双分派效果，使其对象类型和方法参数类型都在运行时决定。</p><h4 id="示例程序的类图"><a href="#示例程序的类图" class="headerlink" title="示例程序的类图"></a>示例程序的类图</h4><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B14N002.png"></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="访问者"><a href="#访问者" class="headerlink" title="访问者"></a>访问者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 访问者 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为ConcreteElementA定制访问方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(ConcreteElementA element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为ConcreteElementB定制访问方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(ConcreteElementB element)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="具体访问者"><a href="#具体访问者" class="headerlink" title="具体访问者"></a>具体访问者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 具体访问者 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteVisitor</span> <span class="keyword">implements</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为ConcreteElementA定制访问方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(ConcreteElementA element)</span> </span>&#123;</span><br><span class="line">        element.featureA();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为ConcreteElementB定制访问方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(ConcreteElementB element)</span> </span>&#123;</span><br><span class="line">        element.featureB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 元素 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 元素访问入口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> visitor 访问者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="具体元素"><a href="#具体元素" class="headerlink" title="具体元素"></a>具体元素</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 具体元素A */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteElementA</span> <span class="keyword">implements</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 元素访问入口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> visitor 访问者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        visitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** ConcreteElementA特有方法 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">featureA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行ConcreteElementA特有方法featureA...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 具体元素B */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteElementB</span> <span class="keyword">implements</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 元素访问入口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> visitor 访问者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        visitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** ConcreteElementB特有方法 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">featureB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行ConcreteElementB特有方法featureB...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> example.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 测试访问者模式 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Element elementA = <span class="keyword">new</span> ConcreteElementA();</span><br><span class="line">        Element elementB = <span class="keyword">new</span> ConcreteElementB();</span><br><span class="line">        Visitor visitor = <span class="keyword">new</span> ConcreteVisitor();</span><br><span class="line">        elementA.accept(visitor);</span><br><span class="line">        elementB.accept(visitor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">执行ConcreteElementA特有方法featureA...</span><br><span class="line">执行ConcreteElementB特有方法featureB...</span><br></pre></td></tr></table></figure><p>从案例中，我们可以得出访问者模式的几点特征：</p><ol><li>这是一种双分派模式，我们的变量类型均为接口（即父类），却可以调用不同子类的不同方法。</li><li>我们可以给 <code>Element</code> 类添加任意多个操作（即添加 <code>ConcreteVisitor</code>）。这不会影响到原有的代码结构。</li><li>这种模式无法自由添加或删除 <code>ConcreteElement</code> 类。因为一旦有新的 <code>ConcreteElement</code>，那么每个 <code>Visitor</code> 都要添加新的 <code>visit</code> 方法。</li></ol><br><h3 id="常用场景和解决方案"><a href="#常用场景和解决方案" class="headerlink" title="常用场景和解决方案"></a>常用场景和解决方案</h3><ul><li>对象的数据结构相对稳定，而操作却经常变化的时候。</li><li>需要将数据结构与不常用的操作进行分离的时候。</li><li>需要在运行时动态决定使用哪些对象和方法的时候。</li><li>需要在不同类的一组对象上执行同一个操作。</li><li>当某个行为仅在类层次结构中的一些类中有意义，而在其他类中没有意义时，可使用该模式。你只需实现接收相关类的对象作为参数的访问者方法并将其他方法留空即可。</li></ul><br><h3 id="模式的优缺点"><a href="#模式的优缺点" class="headerlink" title="模式的优缺点"></a>模式的优缺点</h3><table><thead><tr><th align="left">优点</th><th align="left">缺点</th></tr></thead><tbody><tr><td align="left"><em>开闭原则</em>。你可以引入在不同类对象上执行的新行为，且无需对这些类做出修改。</td><td align="left">每次在元素层次结构中添加或移除一个类时，你都要更新所有的访问者。</td></tr><tr><td align="left"><em>单一职责原则</em>。可将同一行为的不同版本移到同一个类中。</td><td align="left">在访问者同某个元素进行交互时，它们可能没有访问元素私有成员变量和方法的必要权限。</td></tr><tr><td align="left">访问者对象可以在与各种对象交互时收集一些有用的信息。当你想要遍历一些复杂的对象结构（例如对象树），并在结构中的每个对象上应用访问者时，这些信息可能会有所帮助。</td><td align="left"></td></tr></tbody></table><h4 id="使用访问者模式的优势"><a href="#使用访问者模式的优势" class="headerlink" title="使用访问者模式的优势"></a>使用访问者模式的优势</h4><ul><li>简化客户端操作。比如，扫描文件时，对客户端来说只需要执行扫描，不需要知道文件类型、如何读取文件等操作。</li><li>增加新的访问操作和访问者会非常便捷。</li><li>通过行为能够快速组合一组复杂的对象结构。</li></ul><h4 id="使用访问者模式的劣势"><a href="#使用访问者模式的劣势" class="headerlink" title="使用访问者模式的劣势"></a>使用访问者模式的劣势</h4><ul><li>增加新的数据结构困难，需要变更操作。</li><li>具体元素在变更时需要修改代码，容易引入问题。</li></ul><br><h3 id="拓展知识"><a href="#拓展知识" class="headerlink" title="拓展知识"></a>拓展知识</h3><ul><li>可以使用访问者对整个组合模式树执行操作。</li><li>可以同时使用访问者和迭代器模式来遍历复杂数据结构，并对其中的元素执行所需操作，即使这些元素所属的类完全不同。</li></ul><br><br><p>🔙 <a href="/archives/364ea8cc.html" title="设计模式">设计模式</a></p><p><strong>📌最后：希望本文能够给您提供帮助，文章中有不懂或不正确的地方，请在下方评论区💬留言！</strong></p><p><strong>🔗参考文献：</strong></p><p>🌐 <a href="https://refactoringguru.cn/design-patterns#intro-patterns">设计模式 –refactoringguru</a></p><p>▶️ <a href="https://www.bilibili.com/video/BV1hY411Y7zR/?p=1&vd_source=a9a236c4d6e5c5350c70b71ee0727b8c">bilibili-趣学设计模式；黄靖锋. –拉勾教育</a></p><p>📖 图解设计模式 /（日）结城浩著；杨文轩译. –北京：人民邮电出版社，2017.1</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式Singleton</title>
      <link href="/archives/7f38056c.html"/>
      <url>/archives/7f38056c.html</url>
      
        <content type="html"><![CDATA[<h3 id="单例-Singleton"><a href="#单例-Singleton" class="headerlink" title="单例 Singleton"></a>单例 Singleton</h3><p><strong>单例模式</strong>是一种创建型设计模式， 让你能够保证一个类只有一个实例， 并提供一个访问该实例的全局节点。</p><br><h3 id="为什么要使用？"><a href="#为什么要使用？" class="headerlink" title="为什么要使用？"></a>为什么要使用？</h3><p><strong>单例模式的对象职责：</strong></p><ul><li><strong>保证一个类只有一个实例。</strong>有时候我们需要控制一个类所拥有的实例数量，例如控制某些共享资源（数据库或文件）的访问权限。但是如果使用构造函数创建对象，它总是返回一个新的对象，不符合我们的需求。</li><li><strong>为该实例提供一个全局访问节点。</strong>我们常常会使用一些全局变量来让任何地方能够访问到，它很方便但是也会带来一些麻烦，例如会被其他代码覆盖掉那些变量的内容。但单例模式不会，它可以保护实例不被其他代码覆盖，同时它类似于全局变量或全局函数的角色可以在程序的任何地方被访问。</li></ul><br><h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><ul><li>一个单例类只能有一个实例；（对象实例数量受到限制的事实）</li><li>单例类必须自行创建这个实例；（对象实例的构造与销毁）</li><li>单例类必须保证全局其他对象都能唯一访问到它。（需要保证对象实例成为“线程安全”的某种机制）</li></ul><p><strong>单例模式的类图：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B02N001.png"></p><p>通过一个私有的类变量来保存实例，再使用私有构造方法来确保外部无法通过 <code>new</code> 的方式创建新的实例。最后再为这个私有变量实例提供一个外部都能访问的方法。这样就保证了一个类只有一个实例， 并且全局都能访问到它。</p><br><h3 id="模式实现"><a href="#模式实现" class="headerlink" title="模式实现"></a>模式实现</h3><p>该示例使用饿汉式单例模式实现，通过判断两个实例是否相同来验证是否为单例模式。</p><h4 id="示例程序的类图"><a href="#示例程序的类图" class="headerlink" title="示例程序的类图"></a>示例程序的类图</h4><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B02N002.png"></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example.simple;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 简单单例模式实现（饿汉式） */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 唯一实例 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 禁止外部使用构造函数创建对象 */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Singleton类内部生成了一个实例！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 提供外部可访问唯一实例的节点 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> example.simple.Singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 测试 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 第一次获取实例</span></span><br><span class="line">        Singleton s1 = Singleton.getInstance();</span><br><span class="line">        <span class="comment">// 第二次获取实例</span></span><br><span class="line">        Singleton s2 = Singleton.getInstance();</span><br><span class="line">        <span class="keyword">if</span> (s1 == s2) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;s1和s2是同一个实例！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;s1和s2不是同一个实例！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Singleton类内部生成了一个实例！</span><br><span class="line">s1和s2是同一个实例！</span><br></pre></td></tr></table></figure><p>输出结果说明对象只被创建了一次，同时外部多次访问的实例都是同一实例。</p><br><h3 id="常用场景和解决方案"><a href="#常用场景和解决方案" class="headerlink" title="常用场景和解决方案"></a>常用场景和解决方案</h3><p><strong>常见的单例模式应用和使用的解决方案：</strong></p><ul><li><strong>饿汉式初始化：</strong>初始化的时候就创建对象。饿汉式创建对象的性能比较低但不存在线程同步问题，开发常用。</li><li><strong>懒汉式初始化：</strong>对象被调用时才创建对象。在单线程环境没有问题，但在多线程环境下就会出现问题，存在创建多个对象的风险。</li><li><strong>同步信号：</strong>懒汉单例模式在单线程环境没有问题，但在多线程环境下就会出现问题，存在创建多个对象的风险。所以就需要加锁同步。加锁也有两种方案：<ol><li>锁方法：由于初始化实例就执行一次，所以锁方法会导致效率低下。</li><li>锁实例化代码块：在判空之后加入锁，锁住实例化代码块。但是这样也会造成同步问题，如果有多个线程进入了判空之后拿锁的阶段，此时第一个拿到锁的线程实例化后，第二个拿到锁的又能再实例化，不符合单例模式的设计。我们可以使用双重锁定来解决。</li></ol></li><li><strong>双重锁定：</strong>双重锁定是一种较为实用、安全的方案，就是在同步产生实例化的代码块里再判断，进行两次检查。在双重检查锁中，代码会检查两次单例类是否有已存在的实例，一次加锁一次不加锁，一次确保不会有多个实例被创建。</li><li><strong>使用 <code>ThreadLocal</code>：</strong>最常用的方式。<code>ThreadLocal</code> 会为每个线程提供一个独立的对象副本，从而解决多个线程对数据的访问冲突问题。</li></ul><br><h3 id="模式的优缺点"><a href="#模式的优缺点" class="headerlink" title="模式的优缺点"></a>模式的优缺点</h3><table><thead><tr><th align="left">优点</th><th align="left">缺点</th></tr></thead><tbody><tr><td align="left">你可以保证一个类只有一个实例。</td><td align="left">违反了<em>单一职责原则</em>。 该模式同时解决了两个问题。</td></tr><tr><td align="left">你获得了一个指向该实例的全局访问节点。</td><td align="left">单例模式可能掩盖不良设计， 比如程序各组件之间相互了解过多等。</td></tr><tr><td align="left">仅在首次请求单例对象时对其进行初始化。</td><td align="left">该模式在多线程环境下需要进行特殊处理， 避免多个线程多次创建单例对象。</td></tr><tr><td align="left"></td><td align="left">单例的客户端代码单元测试可能会比较困难， 因为许多测试框架以基于继承的方式创建模拟对象。 由于单例类的构造函数是私有的， 而且绝大部分语言无法重写静态方法， 所以你需要想出仔细考虑模拟单例的方法。 要么干脆不编写测试代码， 或者不使用单例模式。</td></tr></tbody></table><h4 id="使用单例模式的优势"><a href="#使用单例模式的优势" class="headerlink" title="使用单例模式的优势"></a>使用单例模式的优势</h4><ul><li>对有限资源的合理利用，保护有限的资源，防止资源重复竞抢。</li><li>更高内聚的代码组件，能提高代码复用性。</li><li>具备全局唯一访问点的权限控制，方便按照统一规则管控权限。</li><li>从负载均衡的角度考虑，可以轻松将 Singleton 扩展成两个、三个或更多个实例。由于封装了基数问题，所以在适当的时候可以自由更改实例的数量。</li></ul><h4 id="使用单例模式的劣势"><a href="#使用单例模式的劣势" class="headerlink" title="使用单例模式的劣势"></a>使用单例模式的劣势</h4><ul><li>作为全局变量使用时，引用的对象越多，代码修改影响的范围就越大。</li><li>作为全局变量时，在全局变量中使用状态变量时，会造成加/解锁的性能损耗。</li><li>即便能扩展多实例，但耦合度依然很高，因为隐蔽了不同对象之间的调用关系。</li><li>不支持有参数的构造函数。</li></ul><br><h3 id="拓展知识"><a href="#拓展知识" class="headerlink" title="拓展知识"></a>拓展知识</h3><p>在多数情况下，以下模式只会生成一个实例。</p><ul><li>抽象工程 Abstract Factory</li><li>生成器 Builder</li><li>外观 Facade</li><li>原型 Prototype</li></ul><br><br><p>🔙 <a href="/archives/364ea8cc.html" title="设计模式">设计模式</a></p><p><strong>📌最后：希望本文能够给您提供帮助，文章中有不懂或不正确的地方，请在下方评论区💬留言！</strong></p><p><strong>🔗参考文献：</strong></p><p>🌐 <a href="https://refactoringguru.cn/design-patterns#intro-patterns">设计模式 –refactoringguru</a></p><p>▶️ <a href="https://www.bilibili.com/video/BV1hY411Y7zR/?p=1&vd_source=a9a236c4d6e5c5350c70b71ee0727b8c">bilibili-趣学设计模式；黄靖锋. –拉勾教育</a></p><p>📖 图解设计模式 /（日）结城浩著；杨文轩译. –北京：人民邮电出版社，2017.1</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板方法模式Template Method</title>
      <link href="/archives/f8dc46f4.html"/>
      <url>/archives/f8dc46f4.html</url>
      
        <content type="html"><![CDATA[<h3 id="模板方法-Template-Method"><a href="#模板方法-Template-Method" class="headerlink" title="模板方法 Template Method"></a>模板方法 Template Method</h3><p><strong>模板方法模式</strong>是一种行为设计模式，它在超类中定义了一个算法的框架，允许子类在<strong>不修改结构</strong>的情况下重写算法的特定步骤。</p><p>🔖 通常是对算法的特定步骤进行优化，而不是对整个算法进行修改。</p><br><h3 id="为什么要使用？"><a href="#为什么要使用？" class="headerlink" title="为什么要使用？"></a>为什么要使用？</h3><p><strong>模板方法模式的对象职责：</strong></p><p><strong>在父类中定义处理流程的框架，在子类中实现具体处理。</strong></p><p>👉 期望在一个通用的算法或流程框架下进行自定义开发。</p><p>👉 避免同样的代码逻辑进行重复编码。</p><p>💡 模板方法模式将通用操作和流程处理交给父类处理，其他具体操作交由子类实现。</p><br><h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><ul><li><strong>抽象类</strong>（Abstract Class）会声明作为算法步骤的方法，以及依次调用它们的实际模板方法。算法步骤可以被声明为 <code>abstract</code> 类型，也可以提供一些默认实现。</li><li><strong>具体类</strong>（Concrete ­Class）可以重写所有步骤，但不能重写模板方法自身。</li></ul><p><strong>模板方法模式的类图：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B15N001.png"></p><br><h3 id="模式实现"><a href="#模式实现" class="headerlink" title="模式实现"></a>模式实现</h3><p>该示例使用模板方法模式将 <code>display</code> 操作交由父类实现，其他操作由子类（显示单个字符的类 <code>CharDisplay</code> 和显示整个字符串的类 <code>StringDisplay</code> ）实现，<code>display</code> 主要负责控制 <code>open</code>，<code>print</code>，<code>close</code> 的调用顺序。</p><h4 id="示例程序的类图"><a href="#示例程序的类图" class="headerlink" title="示例程序的类图"></a>示例程序的类图</h4><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B15N002.png"></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 抽象模板类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractDisplay</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 子类需要实现的方法 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 子类需要实现的方法 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 子类需要实现的方法 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 模板方法，处理流程 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        open();</span><br><span class="line">        print();</span><br><span class="line">        close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="具体类"><a href="#具体类" class="headerlink" title="具体类"></a>具体类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 具体子类，字符方式打印 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharDisplay</span> <span class="keyword">extends</span> <span class="title">AbstractDisplay</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span> ch;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CharDisplay</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ch = ch;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 子类需要实现的方法 */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;&lt;&lt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 子类需要实现的方法 */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(ch);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 子类需要实现的方法 */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;&gt;&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 具体子类，字符串方式打印 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDisplay</span> <span class="keyword">extends</span> <span class="title">AbstractDisplay</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StringDisplay</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.str = str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 子类需要实现的方法 */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;+&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;+&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 子类需要实现的方法 */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        printLine();</span><br><span class="line">        System.out.print(<span class="string">&quot;|&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            System.out.print(str.charAt(i));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;|&quot;</span>);</span><br><span class="line">        printLine();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 子类需要实现的方法 */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;+&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;+&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 子类特有的私有方法 */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printLine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;|&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;|&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> example.AbstractDisplay;</span><br><span class="line"><span class="keyword">import</span> example.CharDisplay;</span><br><span class="line"><span class="keyword">import</span> example.StringDisplay;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 测试模板方法模式 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AbstractDisplay charDisplay = <span class="keyword">new</span> CharDisplay(<span class="string">&#x27;H&#x27;</span>);</span><br><span class="line">        AbstractDisplay stringDisplay = <span class="keyword">new</span> StringDisplay(<span class="string">&quot;Hellovie&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;CharDisplay实现&quot;</span>);</span><br><span class="line">        charDisplay.display();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;\n----------------- 分割线 -----------------\n&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;StringDisplay实现&quot;</span>);</span><br><span class="line">        stringDisplay.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CharDisplay实现:</span><br><span class="line">&lt;&lt;H&gt;&gt;</span><br><span class="line"></span><br><span class="line">----------------- 分割线 -----------------</span><br><span class="line"></span><br><span class="line">StringDisplay实现:</span><br><span class="line">+--------+</span><br><span class="line">|--------|</span><br><span class="line">|Hellovie|</span><br><span class="line">|--------|</span><br><span class="line">+--------+</span><br></pre></td></tr></table></figure><br><h3 id="常用场景和解决方案"><a href="#常用场景和解决方案" class="headerlink" title="常用场景和解决方案"></a>常用场景和解决方案</h3><ul><li>多个类有相同的方法并且逻辑可以共用时。</li><li>将通用的算法或固定流程设计为模板，在每一个具体的子类中再继续优化算法步骤或流程步骤时。</li><li>重构超长代码时，发现某一个经常使用的共有方法。</li><li>当你只希望客户端扩展某个特定算法步骤，而不是整个算法或其结构时。</li></ul><br><h3 id="模式的优缺点"><a href="#模式的优缺点" class="headerlink" title="模式的优缺点"></a>模式的优缺点</h3><table><thead><tr><th align="left">优点</th><th align="left">缺点</th></tr></thead><tbody><tr><td align="left">你可仅允许客户端重写一个大型算法中的特定部分，使得算法其他部分修改对其所造成的影响减小。</td><td align="left">部分客户端可能会受到算法框架的限制。</td></tr><tr><td align="left">你可将重复代码提取到一个超类中，有效去除重复代码。</td><td align="left">通过子类抑制默认步骤实现可能会导致违反<em>里氏替换原则</em>。</td></tr><tr><td align="left">有助于找到更通用的模板。</td><td align="left">模板方法中的步骤越多，其维护工作就可能会越困难。</td></tr></tbody></table><br><h3 id="拓展知识"><a href="#拓展知识" class="headerlink" title="拓展知识"></a>拓展知识</h3><ul><li>工厂方法模式是模板方法模式的一种特殊形式。同时，<em>工厂方法</em>可以作为一个大型<em>模板方法</em>中的一个步骤。</li><li>继承的结构容易带来“修改一个类而影响所有类”的情况。</li></ul><br><br><p>🔙 <a href="/archives/364ea8cc.html" title="设计模式">设计模式</a></p><p><strong>📌最后：希望本文能够给您提供帮助，文章中有不懂或不正确的地方，请在下方评论区💬留言！</strong></p><p><strong>🔗参考文献：</strong></p><p>🌐 <a href="https://refactoringguru.cn/design-patterns#intro-patterns">设计模式 –refactoringguru</a></p><p>▶️ <a href="https://www.bilibili.com/video/BV1hY411Y7zR/?p=1&vd_source=a9a236c4d6e5c5350c70b71ee0727b8c">bilibili-趣学设计模式；黄靖锋. –拉勾教育</a></p><p>📖 图解设计模式 /（日）结城浩著；杨文轩译. –北京：人民邮电出版社，2017.1</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>状态模式State</title>
      <link href="/archives/6547f9e5.html"/>
      <url>/archives/6547f9e5.html</url>
      
        <content type="html"><![CDATA[<h3 id="状态-State"><a href="#状态-State" class="headerlink" title="状态 State"></a>状态 State</h3><p><strong>状态模式</strong>是一种行为设计模式，让你能在一个对象的内部状态变化时改变其行为，使其看上去就像改变了自身所属的类一样。或者说通过控制状态的变化使其行为发生变化。</p><br><h3 id="为什么要使用？"><a href="#为什么要使用？" class="headerlink" title="为什么要使用？"></a>为什么要使用？</h3><p><strong>状态模式的对象职责：</strong></p><p><strong>通过控制状态的变化使其行为发生变化。</strong>找到合适的抽象状态以及状态之间的转移关系，通过改变状态来达到改变行为的目的。</p><p>当要设计的业务具有复杂的状态变迁时，期望通过状态变化来快速进行变更操作，并降低代码耦合性，避免增加代码的复杂性。</p><p>例如，一首歌曲的状态可以是“📝草稿”、“🔬审核中”、“📤上架”、“📥下架”。</p><ol><li>“草稿状态”只能跃迁到“审核状态”；</li><li>“审核状态”如果审核成功可以跃迁到“上架状态”；如果审核失败则跃迁到“草稿状态”；</li><li>“上架状态”和“下架状态”可以任意切换；</li><li>“下架状态”可以选择永久下架，即一首歌曲的生命周期结束。</li></ol><br><h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><ul><li><p><strong>上下文</strong>（Context）保存了一个具体的状态对象，并会将所有与该状态相关的工作委派给它。上下文通过状态接口与状态对象交互，且会向外界提供一个更新状态的操作。</p></li><li><p><strong>状态</strong>（State）接口会声明特定于状态的方法，这些方法应该适用于每个具体状态。</p></li><li><p><strong>具体状态</strong>（Concrete States）会自行实现特定于状态的方法。为了避免多个状态中包含相似代码，你可以提供一个封装有部分通用行为的中间抽象类。<font color="gray">状态对象可存储对于上下文对象的反向引用。状态可以通过该引用从上下文处获取所需信息，并且能触发状态转移。上下文和具体状态都可以设置上下文的下个状态，并可通过替换连接到上下文的状态对象来完成实际的状态转换。</font></p></li></ul><p><strong>状态模式的类图：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B17N001.png"></p><br><h3 id="模式实现"><a href="#模式实现" class="headerlink" title="模式实现"></a>模式实现</h3><p>该示例使用状态模式把包裹的状态分为 6 个部分，分别为“已下单”、“仓库处理中”、“运输中”、“派送中”、“待取件”、“已签收”。每个状态按顺序更新。每次调用 <code>PackageContext</code> 的 <code>update</code> 方法时，它就会根据当前状态，去调用当前状态的 <code>updateState</code> 方法。每个状态的 <code>updateState</code> 方法中会设置下一个状态为当前状态，以便下次调用 <code>PackageContext</code> 的 <code>update</code> 方法时，能够调用新状态的 <code>updateState</code> 方法。</p><h4 id="示例程序的类图"><a href="#示例程序的类图" class="headerlink" title="示例程序的类图"></a>示例程序的类图</h4><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B17N002.png"></p><h4 id="示例程序的状态图"><a href="#示例程序的状态图" class="headerlink" title="示例程序的状态图"></a>示例程序的状态图</h4><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B17N003.png"></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 包裹上下文 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PackageContext</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 当前状态 */</span></span><br><span class="line">    <span class="keyword">private</span> PackageState currentState;</span><br><span class="line">    <span class="comment">/** 包裹ID */</span></span><br><span class="line">    <span class="keyword">private</span> String packageId;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PackageContext</span><span class="params">(PackageState currentState, String packageId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.currentState = currentState;</span><br><span class="line">        <span class="keyword">this</span>.packageId = packageId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCurrentState</span><span class="params">(PackageState currentState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.currentState = currentState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 更新状态 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;当前包裹id：&quot;</span> + packageId + <span class="string">&quot; --&gt; 包裹状态：&quot;</span>);</span><br><span class="line">        currentState.updateState(<span class="keyword">this</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="状态接口"><a href="#状态接口" class="headerlink" title="状态接口"></a>状态接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 包裹状态接口 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PackageState</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新包裹状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx 包裹上下文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateState</span><span class="params">(PackageContext ctx)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="具体状态"><a href="#具体状态" class="headerlink" title="具体状态"></a>具体状态</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 已下单包裹状态 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Acknowledged</span> <span class="keyword">implements</span> <span class="title">PackageState</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Acknowledged instance = <span class="keyword">new</span> Acknowledged();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Acknowledged</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 单例状态 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Acknowledged <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新包裹状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx 包裹上下文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateState</span><span class="params">(PackageContext ctx)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;包裹已下单...&quot;</span>);</span><br><span class="line">        ctx.setCurrentState(WarehouseProcessing.getInstance());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 仓库处理中包裹状态 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WarehouseProcessing</span> <span class="keyword">implements</span> <span class="title">PackageState</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> WarehouseProcessing instance = <span class="keyword">new</span> WarehouseProcessing();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">WarehouseProcessing</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 单例状态 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> WarehouseProcessing <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新包裹状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx 包裹上下文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateState</span><span class="params">(PackageContext ctx)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;包裹正在仓库处理中...&quot;</span>);</span><br><span class="line">        ctx.setCurrentState(InTransition.getInstance());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 运输中包裹状态 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InTransition</span> <span class="keyword">implements</span> <span class="title">PackageState</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> InTransition instance = <span class="keyword">new</span> InTransition();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">InTransition</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 单例状态 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InTransition <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新包裹状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx 包裹上下文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateState</span><span class="params">(PackageContext ctx)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;包裹正在运输中...&quot;</span>);</span><br><span class="line">        ctx.setCurrentState(Delivering.getInstance());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 派送中包裹状态 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Delivering</span> <span class="keyword">implements</span> <span class="title">PackageState</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Delivering instance = <span class="keyword">new</span> Delivering();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Delivering</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 单例状态 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Delivering <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新包裹状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx 包裹上下文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateState</span><span class="params">(PackageContext ctx)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;包裹已下单...&quot;</span>);</span><br><span class="line">        ctx.setCurrentState(WaitForPickUp.getInstance());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 待取件包裹状态 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitForPickUp</span> <span class="keyword">implements</span> <span class="title">PackageState</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> WaitForPickUp instance = <span class="keyword">new</span> WaitForPickUp();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">WaitForPickUp</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 单例状态 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> WaitForPickUp <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新包裹状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx 包裹上下文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateState</span><span class="params">(PackageContext ctx)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;包裹待取件...&quot;</span>);</span><br><span class="line">        ctx.setCurrentState(Received.getInstance());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 签收包裹状态 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Received</span> <span class="keyword">implements</span> <span class="title">PackageState</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Received instance = <span class="keyword">new</span> Received();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Received</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 单例状态 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Received <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新包裹状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx 包裹上下文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateState</span><span class="params">(PackageContext ctx)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;包裹已签收...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> example.Acknowledged;</span><br><span class="line"><span class="keyword">import</span> example.PackageContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 测试状态模式 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PackageContext context = <span class="keyword">new</span> PackageContext(Acknowledged.getInstance(), <span class="string">&quot;9527&quot;</span>);</span><br><span class="line">        context.update();</span><br><span class="line">        context.update();</span><br><span class="line">        context.update();</span><br><span class="line">        context.update();</span><br><span class="line">        context.update();</span><br><span class="line">        context.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">当前包裹id：9527 --&gt; 包裹状态：包裹已下单...</span><br><span class="line"></span><br><span class="line">当前包裹id：9527 --&gt; 包裹状态：包裹正在仓库处理中...</span><br><span class="line"></span><br><span class="line">当前包裹id：9527 --&gt; 包裹状态：包裹正在运输中...</span><br><span class="line"></span><br><span class="line">当前包裹id：9527 --&gt; 包裹状态：包裹已下单...</span><br><span class="line"></span><br><span class="line">当前包裹id：9527 --&gt; 包裹状态：包裹待取件...</span><br><span class="line"></span><br><span class="line">当前包裹id：9527 --&gt; 包裹状态：包裹已签收...</span><br></pre></td></tr></table></figure><br><h3 id="常用场景和解决方案"><a href="#常用场景和解决方案" class="headerlink" title="常用场景和解决方案"></a>常用场景和解决方案</h3><ul><li>对象根据自身状态的变化来进行不同行为的操作，同时状态的数量非常多且与状态相关的代码会频繁变更的话，可以使用状态模式。</li><li>对象需要根据自身变量的当前值改变行为，但不期望使用大量 <code>if-else</code> 语句时。</li><li>对于某些确定的状态和行为，不想使用重复代码时。</li></ul><br><h3 id="模式的优缺点"><a href="#模式的优缺点" class="headerlink" title="模式的优缺点"></a>模式的优缺点</h3><table><thead><tr><th align="left">优点</th><th align="left">缺点</th></tr></thead><tbody><tr><td align="left"><em>单一职责原则</em>。将与特定状态相关的代码放在单独的类中。</td><td align="left">如果状态机只有很少的几个状态，或者很少发生改变， 那么应用该模式可能会显得小题大作。</td></tr><tr><td align="left"><em>开闭原则</em>。无需修改已有状态类和上下文就能引入新状态。</td><td align="left">如果要修改当前状态类，就有可能要修改前一个状态类和后一个状态类。</td></tr><tr><td align="left">通过消除臃肿的状态机条件语句简化上下文代码。</td><td align="left"></td></tr></tbody></table><h4 id="使用状态模式的优势"><a href="#使用状态模式的优势" class="headerlink" title="使用状态模式的优势"></a>使用状态模式的优势</h4><ul><li>提前定好可能的状态，降低代码实现复杂度。</li><li>快速理解状态和行为之间的关系。</li><li>避免写大量的 <code>if-else</code> 条件语句。</li><li>可以让多个环境对象共享一个状态对象，从而减少重复代码。</li></ul><h4 id="使用状态模式的劣势"><a href="#使用状态模式的劣势" class="headerlink" title="使用状态模式的劣势"></a>使用状态模式的劣势</h4><ul><li>造成很多零散类。</li><li>状态切换关系越复杂，代码实现难度越高。</li></ul><br><h3 id="拓展知识"><a href="#拓展知识" class="headerlink" title="拓展知识"></a>拓展知识</h3><ul><li>状态可被视为策略的扩展。两者都基于组合机制：它们都通过将部分工作委派给“帮手”对象来改变其在不同情景下的行为。<em>策略</em>使得这些对象相互之间完全独立，它们不知道其他对象的存在。但<em>状态</em>模式没有限制具体状态之间的依赖，且允许它们自行改变在不同情景下的状态。</li><li>状态模式类似于面向对象的“关注点分离”，即将问题分解，让每个对象专注于每个问题。状态模式将一个对象的每种状态分离，使每个状态对象只专注于当前状态。而至于状态间的转换则交给上下文去处理。</li></ul><br><br><p>🔙 <a href="/archives/364ea8cc.html" title="设计模式">设计模式</a></p><p><strong>📌最后：希望本文能够给您提供帮助，文章中有不懂或不正确的地方，请在下方评论区💬留言！</strong></p><p><strong>🔗参考文献：</strong></p><p>🌐 <a href="https://refactoringguru.cn/design-patterns#intro-patterns">设计模式 –refactoringguru</a></p><p>▶️ <a href="https://www.bilibili.com/video/BV1hY411Y7zR/?p=1&vd_source=a9a236c4d6e5c5350c70b71ee0727b8c">bilibili-趣学设计模式；黄靖锋. –拉勾教育</a></p><p>📖 图解设计模式 /（日）结城浩著；杨文轩译. –北京：人民邮电出版社，2017.1</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>策略模式Strategy</title>
      <link href="/archives/ddad16ac.html"/>
      <url>/archives/ddad16ac.html</url>
      
        <content type="html"><![CDATA[<h3 id="策略-Strategy"><a href="#策略-Strategy" class="headerlink" title="策略 Strategy"></a>策略 Strategy</h3><p><strong>策略模式</strong>是一种行为设计模式，它能让你定义一系列算法，并将每种算法分别放入独立的类中，以使算法的对象能够相互替换。</p><br><h3 id="为什么要使用？"><a href="#为什么要使用？" class="headerlink" title="为什么要使用？"></a>为什么要使用？</h3><p><strong>策略模式的对象职责：</strong></p><p><strong>定义一系列算法，并将每种算法分别放入独立的类中，以使算法的对象能够相互替换。</strong></p><p>👉 为了提高代码的可维护性。</p><p>👉 为了动态快速地替换更多的算法。</p><p>👉 为了应对需要频繁更换策略的场景。</p><p>💡 策略模式对算法起到了很好的封装作用，对于一些老旧的算法可以很方便地进行替换和升级。</p><br><h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><ul><li><strong>上下文</strong>（Context）维护指向具体策略的引用，且仅通过策略接口与该对象进行交流。<font color="gray">当上下文需要运行算法时，它会在其已连接的策略对象上调用执行方法。上下文不清楚其所涉及的策略类型与算法的执行方式。</font></li><li><strong>策略</strong>（Strategy）接口是所有具体策略的通用接口，它声明了一个上下文用于执行策略的方法。</li><li><strong>具体策略</strong>（Concrete Strategies）实现了上下文所用算法的各种不同变体。</li><li><strong>客户端</strong>（Client）会创建一个特定策略对象并将其传递给上下文。上下文则会提供一个设置器以便客户端在运行时替换相关联的策略。</li></ul><p><strong>策略模式的类图：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B16N001.png"></p><br><h3 id="模式实现"><a href="#模式实现" class="headerlink" title="模式实现"></a>模式实现</h3><p>该示例使用策略模式将不同的排序算法（冒泡排序和插入排序）变为一个个单独的类。通过在 <code>IntTypeSort</code> 类中注入不同的策略，来调用不同的排序算法。</p><h4 id="示例程序的类图"><a href="#示例程序的类图" class="headerlink" title="示例程序的类图"></a>示例程序的类图</h4><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230226B16N002.png"></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** int类型排序的上下文 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntTypeSort</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 排序策略 */</span></span><br><span class="line">    <span class="keyword">private</span> ISort sortStrategy;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IntTypeSort</span><span class="params">(ISort sortStrategy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sortStrategy = sortStrategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从小到大顺序排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arrays 待排序数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 排序好的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] getOrder(<span class="keyword">int</span>[] arrays) &#123;</span><br><span class="line">        <span class="keyword">return</span> sortStrategy.sort(arrays, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从大到小逆序排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arrays 待排序数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 排序好的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] getReverseOrder(<span class="keyword">int</span>[] arrays) &#123;</span><br><span class="line">        <span class="keyword">return</span> sortStrategy.sort(arrays, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="策略接口"><a href="#策略接口" class="headerlink" title="策略接口"></a>策略接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 排序策略接口 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ISort</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 排序算法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arrays 待排序数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> flag true从小到大顺序排序，false从大到小逆序排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 排序好的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] arrays, <span class="keyword">boolean</span> flag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="具体策略"><a href="#具体策略" class="headerlink" title="具体策略"></a>具体策略</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 冒泡排序策略 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> <span class="keyword">implements</span> <span class="title">ISort</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 排序算法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arrays 待排序数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> flag   true从小到大顺序排序，false从大到小逆序排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 排序好的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] arrays, <span class="keyword">boolean</span> flag) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arrays.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> arrays;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrays.length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arrays.length - <span class="number">1</span> - i; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (arrays[j + <span class="number">1</span>] &lt; arrays[j]) &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = arrays[j + <span class="number">1</span>];</span><br><span class="line">                    arrays[j + <span class="number">1</span>] = arrays[j];</span><br><span class="line">                    arrays[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 从大到小排序</span></span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            <span class="keyword">int</span> len = arrays.length;</span><br><span class="line">            <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                temp[i] = arrays[len - i - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arrays;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 插入排序策略 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertionSort</span> <span class="keyword">implements</span> <span class="title">ISort</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 排序算法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arrays 待排序数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> flag   true从小到大顺序排序，false从大到小逆序排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 排序好的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] arrays, <span class="keyword">boolean</span> flag) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arrays.length == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> arrays;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> current;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrays.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            current = arrays[i + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> preIndex = i;</span><br><span class="line">            <span class="keyword">while</span> (preIndex &gt;= <span class="number">0</span> &amp;&amp; current &lt; arrays[preIndex]) &#123;</span><br><span class="line">                arrays[preIndex + <span class="number">1</span>] = arrays[preIndex];</span><br><span class="line">                preIndex--;</span><br><span class="line">            &#125;</span><br><span class="line">            arrays[preIndex + <span class="number">1</span>] = current;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 从大到小排序</span></span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            <span class="keyword">int</span> len = arrays.length;</span><br><span class="line">            <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                temp[i] = arrays[len - i - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arrays;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> example.IntTypeSort;</span><br><span class="line"><span class="keyword">import</span> example.BubbleSort;</span><br><span class="line"><span class="keyword">import</span> example.InsertionSort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 测试策略模式 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arrays = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">6</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">8</span>&#125;;</span><br><span class="line">        System.out.print(<span class="string">&quot;原始数组为：&quot;</span>);</span><br><span class="line">        Arrays.stream(arrays).forEach(item -&gt; System.out.print(item + <span class="string">&quot; &quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        IntTypeSort bubbleSort = <span class="keyword">new</span> IntTypeSort(<span class="keyword">new</span> BubbleSort());</span><br><span class="line">        IntTypeSort insertionSort = <span class="keyword">new</span> IntTypeSort(<span class="keyword">new</span> InsertionSort());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;冒泡排序策略：&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;从小到大顺序排序：&quot;</span>);</span><br><span class="line">        Arrays.stream(bubbleSort.getOrder(arrays)).forEach(item -&gt; System.out.print(item + <span class="string">&quot; &quot;</span>));</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.print(<span class="string">&quot;从大到小逆序排序：&quot;</span>);</span><br><span class="line">        Arrays.stream(bubbleSort.getReverseOrder(arrays)).forEach(item -&gt; System.out.print(item + <span class="string">&quot; &quot;</span>));</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\n----------------------- 分割线 -----------------------\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;插入排序策略：&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;从小到大顺序排序：&quot;</span>);</span><br><span class="line">        Arrays.stream(insertionSort.getOrder(arrays)).forEach(item -&gt; System.out.print(item + <span class="string">&quot; &quot;</span>));</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.print(<span class="string">&quot;从大到小逆序排序：&quot;</span>);</span><br><span class="line">        Arrays.stream(insertionSort.getReverseOrder(arrays)).forEach(item -&gt; System.out.print(item + <span class="string">&quot; &quot;</span>));</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">原始数组为：6 1 4 9 2 3 7 5 8 </span><br><span class="line"></span><br><span class="line">冒泡排序策略：</span><br><span class="line">从小到大顺序排序：1 2 3 4 5 6 7 8 9 </span><br><span class="line">从大到小逆序排序：9 8 7 6 5 4 3 2 1 </span><br><span class="line"></span><br><span class="line">----------------------- 分割线 -----------------------</span><br><span class="line"></span><br><span class="line">插入排序策略：</span><br><span class="line">从小到大顺序排序：1 2 3 4 5 6 7 8 9 </span><br><span class="line">从大到小逆序排序：9 8 7 6 5 4 3 2 1 </span><br></pre></td></tr></table></figure><p>使用 <code>IntTypeSort bubbleSort = new IntTypeSort(new BubbleSort());</code> 和 <code>IntTypeSort insertionSort = new IntTypeSort(new InsertionSort());</code> 注入不同策略，再根据不同策略执行排序。</p><br><h3 id="常用场景和解决方案"><a href="#常用场景和解决方案" class="headerlink" title="常用场景和解决方案"></a>常用场景和解决方案</h3><ul><li>系统中需要动态切换几种算法的场景。</li><li>使用多重的条件选择语句来实现的业务场景。例如，当类中使用了复杂条件运算符以在同一算法的不同变体中切换时。</li><li>只希望客户端选择已经封装好的算法场景而不关心算法实现细节。</li><li>如果算法在上下文的逻辑不是非常重要，策略模式可以让你分离使用策略和创建策略的场景。</li><li>当你有许多仅在执行某些行为时略有不同的相似类时，可使用策略模式。策略模式让你能将不同行为抽取到一个独立类层次结构中，并将原始类组合成同一个，从而减少重复代码。</li></ul><br><h3 id="模式的优缺点"><a href="#模式的优缺点" class="headerlink" title="模式的优缺点"></a>模式的优缺点</h3><table><thead><tr><th align="left">优点</th><th align="left">缺点</th></tr></thead><tbody><tr><td align="left">你可以在运行时切换对象内的算法，提升代码灵活性。</td><td align="left">如果你的算法极少发生改变，那么没有任何理由引入新的类和接口。使用该模式只会让程序过于复杂。</td></tr><tr><td align="left">你可以将算法的实现和使用算法的代码隔离开来。</td><td align="left">客户端必须知晓策略间的不同——它需要选择合适的策略。客户端的学习成本变高。</td></tr><tr><td align="left">提供了一种管理多个不同算法策略的方法，能够降低使用多重 <code>if-else</code> 嵌套语句的理解难度。</td><td align="left">许多现代编程语言支持函数类型功能，允许你在一组匿名函数中实现不同版本的算法。这样，你使用这些函数的方式就和使用策略对象时完全相同，无需借助额外的类和接口来保持代码简洁。</td></tr><tr><td align="left"><em>开闭原则</em>。你无需对上下文进行修改就能够引入新的策略，提供良好的代码扩展性。</td><td align="left">具体策略类的数量会剧增，增加维护成本。</td></tr><tr><td align="left">你可以使用组合来代替继承。</td><td align="left"></td></tr></tbody></table><br><h3 id="拓展知识"><a href="#拓展知识" class="headerlink" title="拓展知识"></a>拓展知识</h3><ul><li>装饰模式可让你更改对象的外表，策略则让你能够改变其本质。</li><li>桥接模式、状态模式和策略模式（在某种程度上包括适配器模式）模式的接口非常相似。实际上，它们都基于组合模式——即将工作委派给其他对象，不过也各自解决了不同的问题。模式并不只是以特定方式组织代码的配方，你还可以使用它们来和其他开发者讨论模式所解决的问题。</li><li>模板方法模式基于继承机制：它允许你通过扩展子类中的部分内容来改变部分算法。策略基于组合机制：你可以通过对相应行为提供不同的策略来改变对象的部分行为。<em>模板方法</em>在类层次上运作，因此它是静态的。<em>策略</em>在对象层次上运作，因此允许在运行时切换行为。</li></ul><br><br><p>🔙 <a href="/archives/364ea8cc.html" title="设计模式">设计模式</a></p><p><strong>📌最后：希望本文能够给您提供帮助，文章中有不懂或不正确的地方，请在下方评论区💬留言！</strong></p><p><strong>🔗参考文献：</strong></p><p>🌐 <a href="https://refactoringguru.cn/design-patterns#intro-patterns">设计模式 –refactoringguru</a></p><p>▶️ <a href="https://www.bilibili.com/video/BV1hY411Y7zR/?p=1&vd_source=a9a236c4d6e5c5350c70b71ee0727b8c">bilibili-趣学设计模式；黄靖锋. –拉勾教育</a></p><p>📖 图解设计模式 /（日）结城浩著；杨文轩译. –北京：人民邮电出版社，2017.1</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UML之顺序图</title>
      <link href="/archives/6ff5f77.html"/>
      <url>/archives/6ff5f77.html</url>
      
        <content type="html"><![CDATA[<h3 id="顺序图（sequence-diagram）"><a href="#顺序图（sequence-diagram）" class="headerlink" title="顺序图（sequence diagram）"></a>顺序图（sequence diagram）</h3><blockquote><p><strong>交互序列图（sequence diagram）</strong>也称顺序图，捕捉一段时间范围内多个对象之间的交互信息，强调消息交互的时间顺序，将一个用例详细的记录出来。用于处理行为较为简单的用例。</p></blockquote><p><strong>序列图用于向团队展示程序中的对象（可能是程序中的类，也可能是一个参与者）如何相互交互以完成任务。</strong>简单地说，把序列图想象成不同人之间的对话表，这张对话表中记录着他们之间发送的所有消息。</p><p>序列图通常用作开发团队开始编程之前的规划工具，或者用来描述一个系统是如何设计的。他们可以让你更轻松简单的完成你的功能设计。甚至可以帮助你发现系统中以前没有发现的问题。序列图非常强大，是软件建模中不可缺少的一环。</p><p>🎈一个用例通常会细化为一个或多个顺序图，是用例需求过渡到下一个更细化的级别的工具。<font color="red">注意：顺序图作用于单用例多对象。</font></p><br><h3 id="顺序图的模型元素"><a href="#顺序图的模型元素" class="headerlink" title="顺序图的模型元素"></a>顺序图的模型元素</h3><p><strong>1️⃣参与者（Actor）：</strong><font color="green">使用一个小人来表示。</font>参与者是在系统之外与系统交互的某人或某事物。</p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230205B01N001.png"></p><p><strong>2️⃣对象（Object）：</strong><font color="green">使用一个长方形来表示。</font>在对象名称中带有下划线，说明它是系统中声明的实体（特定类，例如“Student 类”）。而系统中未声明的实体不带有下划线（特定种类，例如“人”）。关于对象的命名有以下三种形式：</p><table><thead><tr><th align="center">对象名: 类名</th><th align="center">对象名</th><th align="center">:类名</th></tr></thead><tbody><tr><td align="center"><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230205B01N002.png"></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230205B01N003.png"></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230205B01N004.png"></td></tr></tbody></table><p>对于不同类型的对象还有不同的表示形式，如下：</p><table><thead><tr><th align="center">实体对象</th><th align="center">边界对象</th><th align="center">控制对象</th></tr></thead><tbody><tr><td align="center"><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230205B01N005.png"></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230205B01N006.png"></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230205B01N007.png"></td></tr></tbody></table><p><strong>3️⃣生命线（Lifeline）：</strong><font color="green">生命线是垂直的虚线，从对象或者参与者开始。</font>它显示了一个对象或参与者存在的时间。</p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230205B01N008.png"></p><p><strong>4️⃣激活框（Activation Box）：</strong><font color="green">用一个细长方形表示，附着在生命线上，系统外部对象不需要激活框，例如参与者。</font>激活框显示对象进程开始时间和对象进程的执行时间。有利于我们分析对象何时处于运行状态、何时处于空闲状态。</p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230205B01N009.png"></p><p><strong>5️⃣消息（Message）：</strong>一般分为同步消息、异步消息和返回消息。<font color="green">把一个对象的生命线用带箭头的线连接到另一个对象的生命线，并在上面写上执行的操作。消息按时间顺序从上到下。</font>消息可以描述信息在对象之间传递，描述对象间的相互作用或序列。</p><ul><li>同步消息：<font color="green">用实线箭头表示。</font>发送消息的对象需要等待接收消息的对象执行完所有操作后才能继续执行自己的操作。</li><li>异步消息：<font color="green">用实线棍状箭头表示。</font>发送消息的对象发送消息后，无需等待可以继续执行自己的操作。</li><li>返回消息：<font color="green">用虚线棍状箭头表示。</font>当对象将消息发送回去时称消息为返回消息。</li></ul><table><thead><tr><th align="center">同步消息</th><th align="center">异步消息</th><th align="center">返回消息</th></tr></thead><tbody><tr><td align="center"><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230205B01N010.png"></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230205B01N011.png"></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230205B01N012.png"></td></tr></tbody></table><p>✨消息也有许多表现形式，如下：</p><table><thead><tr><th align="center">不知来源的对象</th><th align="center">不知消息来源的消息</th><th align="center">消息未到达目的地</th></tr></thead><tbody><tr><td align="center"><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230205B01N013.png"></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230205B01N014.png"></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230205B01N015.png"></td></tr></tbody></table><table><thead><tr><th align="center">生命线终止</th><th align="center">创建消息</th><th align="center">删除消息</th><th align="center">自关联消息</th></tr></thead><tbody><tr><td align="center"><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230205B01N016.png"></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230205B01N017.png"></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230205B01N018.png"></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230205B01N019.png"></td></tr></tbody></table><p><font color="red">注意：创建消息的符号和返回消息的符号相同，并且指着被创建对象。</font></p><p><strong>6️⃣约束条件（Guards）：</strong><font color="green">用 <code>[Boolean Test]</code> 表示。</font>可以与消息和交互片段结合使用。</p><p>例如，只有“a &gt; 0”时，才发送消息。如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230205B01N020.png"></p><p><strong>7️⃣交互片段（Frame）：</strong><font color="green">用一个长方形表示，在左上角写上交互操作名称。</font>包含多种操作指令。</p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230205B01N021.png"></p><p>✨常用的交互片段：</p><table><thead><tr><th align="center">交互操作</th><th align="center">图形</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>Alt</code> 分支</td><td align="center"><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230205B01N022.png"></td><td align="center">只执行一个分支</td></tr><tr><td align="center"><code>Opt</code> 选择</td><td align="center"><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230205B01N023.png"></td><td align="center">满足条件执行</td></tr><tr><td align="center"><code>Loop</code> 循环</td><td align="center"><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230205B01N024.png"></td><td align="center">重复执行一定次数</td></tr><tr><td align="center"><code>Par</code> 并行</td><td align="center"><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230205B01N025.png"></td><td align="center">并行执行</td></tr></tbody></table><p>✨引用另一个顺序图：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sequence diagram name[(arguments)] [: return value]</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230205B01N026.png"></p><br><h3 id="如何使用顺序图？"><a href="#如何使用顺序图？" class="headerlink" title="如何使用顺序图？"></a>如何使用顺序图？</h3><p><strong>假如我们现在要用顺序图描述去 ATM 机🏧取现金💵时发生的所有步骤，脚本如下：</strong></p><ol><li>当用户到达 ATM 机时，先要插入银行卡。</li><li>ATM 机要向银行验证用户的银行卡是否有效？<ul><li>验证成功，ATM 机提醒用户需要输入密码。</li><li>验证失败，ATM 机弹出银行卡。</li></ul></li><li>用户输入密码。</li><li>ATM 机要向银行验证用户输入的密码是否正确？<ul><li>密码正确，ATM 机提醒用户输入金额。</li><li>密码错误，ATM 机弹出银行卡。</li></ul></li><li>用户输入金额。</li><li>ATM 机向银行请求交易。</li><li>银行向银行账户系统验证账户金额是否充足？<ul><li>金额充足：<ol><li>银行向银行账户系统请求提现。</li><li>银行账户系统提示银行提现成功。</li><li>银行提示 ATM 机交易成功。</li><li>ATM 机将现金推出。</li></ol></li><li>金额不足：<ol><li>银行账户系统提示银行用户的金额不足。</li><li>银行提示 ATM 机当前交易失败。</li></ol></li></ul></li><li>ATM 机弹出银行卡。</li></ol><p><strong>顺序图如下：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230205B01N027.png"></p><br><br><p><strong>📌最后：希望本文能够给您提供帮助，文章中有不懂或不正确的地方，请在下方评论区💬留言！</strong></p><p><strong>🔗参考文献：</strong></p><p>🌐 <a href="https://developer.ibm.com/articles/the-sequence-diagram/">Explore the UML sequence diagram –IBM Developer</a></p><p>🌐 <a href="https://www.uml-diagrams.org/interaction-message.html">UML Message</a></p><p>▶️ <a href="https://www.bilibili.com/video/BV1TK4y1Y7Jq/?spm_id_from=333.788.top_right_bar_window_default_collection.content.click&vd_source=a9a236c4d6e5c5350c70b71ee0727b8c">bilibili - UML序列图</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 软件建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UML </tag>
            
            <tag> 软件建模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UML之用例图</title>
      <link href="/archives/42efb629.html"/>
      <url>/archives/42efb629.html</url>
      
        <content type="html"><![CDATA[<h3 id="用例图（use-case-diagram）"><a href="#用例图（use-case-diagram）" class="headerlink" title="用例图（use case diagram）"></a>用例图（use case diagram）</h3><p>用例图可以让其他人更直观的了解一个系统。假如我们现在有一个 APP 方案📝想让其他人了解它，但是无论怎么表达他们都无法理解，那么我们可以使用用例图去表示它，这样能让其他人更加直观的了解它。下面是关于百度百科🌐对它的描述：</p><blockquote><p><strong>用例图</strong>（use case diagram）是用户与系统交互的最简表示形式，展现了<a href="https://baike.baidu.com/item/%E7%94%A8%E6%88%B7/3621489?fromModule=lemma_inlink">用户</a>和与他相关的<a href="https://baike.baidu.com/item/%E7%94%A8%E4%BE%8B?fromModule=lemma_inlink">用例</a>之间的关系。通过用例图，人们可以获知系统不同种类的用户和用例。用例图也经常和其他图表配合使用。</p></blockquote><p>用例图是静态模型，是需求分析中的产物。其主要作用是描述参与者和用例之间的关系，帮助开发人员能够可视化了解系统的功能。</p><br><h3 id="用例图的模型元素"><a href="#用例图的模型元素" class="headerlink" title="用例图的模型元素"></a>用例图的模型元素</h3><p><strong>1️⃣系统（System）：</strong><font color="green">使用一个矩形框表示一个系统，并将系统的名称放在顶部。</font>在矩形内的所有东西都属于这个系统，而在矩形外的任何东西都能够使用这个系统。</p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230203B01N001.png"></p><p><strong>2️⃣参与者（Actor）：</strong><font color="green">使用一个小人图形表示参与者。参与者放置在矩形框外部。</font>参与者是使用系统的人或物，它可能是个人、一个组织、其他系统或者外部设备。参与者有三个重点因素：</p><ol><li>参与者是系统的外部对象，需要放置在系统之外；</li><li>参与者需要被视为类型或类别，它们不是特定的个人或者特定的组织。例如顾客指代的是所有顾客，而并非某个人；又或者银行指代的是所有银行，而并非某个银行。</li><li>参与者分为主要参与者（Primary Actor）和次要参与者（Secondary Actor）。主要参与者是主动发起行为，而次要参与者往往更为被动。一般将<font color="green">主要参与者放置在系统左边</font>，<font color="green">次要参与者放置在系统右边。</font></li></ol><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230203B01N002.png"></p><p><strong>3️⃣用例（Use Case）：</strong><font color="green">使用一个椭圆形来表示一个用例，在椭圆形内写上用例完成的动作。用例放置在矩形框内部。</font>用例代表完成的系统中某种任务的一个动作，所以用例属于系统内部。用例的描述应着重于系统从外界来看有什么样的行为，而不管该行为在系统内部是如何具体实现的。<font color="green">用例都以动词开头并强化所发生的操作，且最好按照逻辑排列用例。</font></p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230203B01N003.png"></p><p><strong>✨关系（relationship）</strong></p><p><strong>4️⃣关联（Association）：</strong><font color="green">使用一根实线连接参与者和用例，表示参与者和用例在进行一种基本的交流或互动。</font><font color="red">注意：关联关系只用在执行者和用例之间，用例和用例之间不会存在关联关系。</font></p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230203B01N004.png"></p><p><strong>5️⃣包含（Include）：</strong><font color="green">使用一根带有箭头的虚线，由基本用例指向包含用例。</font>包含关系表示基本用例和包含用例之间的依赖关系，每次执行基本用例的时候，也会执行包含用例。又或者说基本用例依赖包含用例。<font color="red">注意：每次调用基本用例时都必须同时执行包含用例。</font></p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230203B01N005.png"></p><p><strong>6️⃣扩展（Extend）：</strong><font color="green">使用一根带有箭头的虚线，由扩展用例指向基本用例。</font>扩展关系由基本用例和扩展用例组成。当执行基本用例时，扩展用例不是一定要执行。它们只有在满足某些条件时才会执行。又或者说你可以使用扩展用例去扩展基本用例的行为。</p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230203B01N006.png"></p><p><strong>7️⃣带扩展点的用例（Extension Point）：</strong><font color="green">用一根实线把用例分成两部分，上半部分写用例的名称，下半部分写用例的扩展点。</font>扩展点只是扩展关系的详细版本。</p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230203B01N007.png"></p><p><strong>8️⃣泛化（Generalization）：</strong><font color="green">使用一个带实线的三角形空心箭头来表示泛化关系，三角形箭头由子指向父。</font>子参与者继承父参与者的所有关系、子用例继承父用例的所有结构、行为和关系。</p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230203B01N008.png"></p><p><strong>示例用例图：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230203B01N009.png"></p><br><h3 id="包含关系和扩展关系的区别"><a href="#包含关系和扩展关系的区别" class="headerlink" title="包含关系和扩展关系的区别"></a>包含关系和扩展关系的区别</h3><p>每次执行基本用例时，包含关系一定执行，扩展关系可能执行。这两种关系的箭头指向不同。基本用例依赖包含用例，而扩展用例依赖基本用例。<font color="red">注意：多个基本用例可以指向同一个包含或扩展用例。</font></p><p>例如，每次打喷嚏眼睛都会闭上，但不是每次打喷嚏都会说“不好意思”，说“不好意思”只是对于打喷嚏行为的补充。如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230203B01N010.png"></p><br><br><p><strong>📌最后：希望本文能够给您提供帮助，文章中有不懂或不正确的地方，请在下方评论区💬留言！</strong></p><p><strong>🔗参考文献：</strong></p><p>🌐 <a href="https://baike.baidu.com/item/%E7%94%A8%E4%BE%8B%E5%9B%BE/9531932">用例图 –百度百科</a></p><p>▶️ <a href="https://www.bilibili.com/video/BV1Bz4y1Z7ZV/?spm_id_from=333.788.top_right_bar_window_default_collection.content.click&vd_source=a9a236c4d6e5c5350c70b71ee0727b8c">bilibili - UML用例图</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 软件建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UML </tag>
            
            <tag> 软件建模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>E-R图</title>
      <link href="/archives/a747c9f1.html"/>
      <url>/archives/a747c9f1.html</url>
      
        <content type="html"><![CDATA[<h3 id="E-R-图"><a href="#E-R-图" class="headerlink" title="E-R 图"></a>E-R 图</h3><p>想要了解数据库中有多少元素和这些元素之间的关联是非常复杂的，所以我们需要一种更加直观的方式来理解这些独立元素元素是如何相互关联的，以及它们是如何合作的。这种方法就是 E-R 图。下面是一段来自百度百科🌐对 E-R 图的描述：</p><blockquote><p>E-R图也称实体-联系图(Entity Relationship Diagram)，提供了表示实体类型、属性和联系的方法，用来描述现实世界的概念模型。</p><p>用“矩形框”表示实体型，矩形框内写明实体名称；用“椭圆图框”或圆角矩形表示实体的属性，并用“实心线段”将其与相应关系的“实体型”连接起来；</p><p>用”菱形框“表示实体型之间的联系成因，在菱形框内写明联系名，并用”实心线段“分别与有关实体型连接起来，同时在”实心线段“旁标上联系的类型（1 : 1, 1 : n 或 m : n ）。</p></blockquote><p>👉 这是一种较为老式的 E-R 图画法由 Peter Chen👨‍💻 提出。由下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230201B01N001.png"></p><p>如果当我们的实体属性有很多时，就会造成图上的椭圆图框太多，E-R 图也变得混乱起来。所以我们要用一种改进的 E-R 图画法。下面就来分享一下这种改进的 E-R 图画法。</p><p>👉 这是一种Information Engineering - IE模型，改进的 E-R 图关系如下：</p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230201B01N002.png"></p><p>👉 改进的 E-R 图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230201B01N003.png"></p><p>从上图可以得出，我们可以用 <code>PK</code> 标记为主键（📕特征：必须唯一、永不改变、不能为空），<code>FK</code> 标记为外键。将外键和其对应的其他表的字段连接起来。不同的画图软件可能对于表的画法不同，但如果是 IE 模型，那么表与表之间的关系的画法是不变的。</p><p>👉 对于复合主键（📕原则：使用尽可能少的属性、不要使用容易改变的属性。），我们可以按下图表示：</p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230201B01N004.png"></p><p>👉 在我们需要详细构建数据表的时候，我们可以为它们指定类型，如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230201B01N005.png"></p><br><br><p><strong>📌最后：希望本文能够给您提供帮助，文章中有不懂或不正确的地方，请在下方评论区💬留言！</strong></p><p><strong>🔗参考文献：</strong></p><p>🌐 <a href="https://baike.baidu.com/item/E-R%E5%9B%BE/304954">E-R图 –百度百科</a></p><p>▶️ <a href="https://www.bilibili.com/video/BV1tK411P7N2/?spm_id_from=333.1007.top_right_bar_window_default_collection.content.click&vd_source=a9a236c4d6e5c5350c70b71ee0727b8c">bilibili - UML ER图 part1</a></p><p>▶️ <a href="https://www.bilibili.com/video/BV1uK411V7gz/?spm_id_from=333.788.recommend_more_video.-1&vd_source=a9a236c4d6e5c5350c70b71ee0727b8c">bilibili - UML ER图 part2</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 软件建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库设计 </tag>
            
            <tag> E-R图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UML之类图</title>
      <link href="/archives/9ff5e7c2.html"/>
      <url>/archives/9ff5e7c2.html</url>
      
        <content type="html"><![CDATA[<h3 id="类图（class-diagram）"><a href="#类图（class-diagram）" class="headerlink" title="类图（class diagram）"></a>类图（class diagram）</h3><p>类图（class diagram）是一种静态模型。它可以帮助开发者👨‍💻利用面向对象思维进行软件建模。</p><p>类图中的每个类都由一个框表示。每个盒子🗃️分为<strong>三个部分</strong>。</p><p><strong>🥇顶部是类名</strong>，对应 Java 中的类名，如果是抽象类则用斜体表示。</p><p><strong>🥈中间部分是属性部分</strong>，对应 Java 中的成员变量，用于抽象出事物的属性。主要由作用域、变量名和变量类型组成。</p><p><strong>🥉底部是操作部分</strong>，对应 Java 中的成员方法，用于抽象出事物的行为。主要由作用域、操作名称、参数列表和返回类型组成。如果是抽象方法则用斜体表示；如果是静态方法则用下划线表示。</p><table><thead><tr><th align="center">类</th><th align="center">抽象类</th><th align="center">接口</th></tr></thead><tbody><tr><td align="center"><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230131B02N001.png"></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230131B02N002.png"></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230131B02N003.png"></td></tr></tbody></table><p><strong>✨作用域表示如下：</strong></p><table><thead><tr><th align="center">符号</th><th align="center">作用域</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><strong>-</strong></td><td align="center"><code>private</code></td><td align="center">当前类</td></tr><tr><td align="center"><strong>~</strong></td><td align="center"><code>default</code> 或者 <code>package</code></td><td align="center">当前类、同一包下</td></tr><tr><td align="center"><strong>#</strong></td><td align="center"><code>protected</code></td><td align="center">当前类、同一包下、子类</td></tr><tr><td align="center"><strong>+</strong></td><td align="center"><code>public</code></td><td align="center">当前类、同一包下、子类、其他包下</td></tr></tbody></table><br><h3 id="类图中的关系"><a href="#类图中的关系" class="headerlink" title="类图中的关系"></a>类图中的关系</h3><p>面向对象设计中的分解与 <code>UML</code> 中的关系对应。其中类间的关系分为 6 种。分别是<strong>依赖</strong>、<strong>关联</strong>、<strong>泛化</strong>（继承）、<strong>实现</strong>（接口）、<strong>聚合</strong>和<strong>组合</strong>。</p><table><thead><tr><th align="center">关系</th><th align="center">图像</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center"><strong>依赖</strong></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230131B02N004.png"></td><td align="center">箭头指向被依赖的部分</td></tr><tr><td align="center"><strong>关联</strong></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230131B02N005.png"></td><td align="center">单向关联的箭头指向被关联的部分</td></tr><tr><td align="center"><strong>泛化</strong></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230131B02N006.png"></td><td align="center">空心三角形指向父类</td></tr><tr><td align="center"><strong>实现</strong></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230131B02N007.png"></td><td align="center">空心三角形指向接口</td></tr><tr><td align="center"><strong>聚合</strong></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230131B02N008.png"></td><td align="center">菱形指向整体</td></tr><tr><td align="center"><strong>组合</strong></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230131B02N009.png"></td><td align="center">菱形指向整体</td></tr></tbody></table><p><strong>1️⃣依赖（dependency）：</strong>依赖是一种 use-a 的关系。<strong>依赖表示一个类为其他类提供它的服务。</strong></p><p>例如，一架客机需要依赖跑道起飞。</p><p><strong>2️⃣关联（association）：</strong>一种简单的关联关系，并不存在依赖关系。在类中，关联是一种拥有关系。<strong>关联关系意味着两个对象之间存在松散的关系。这些对象可能会在一段时间内相互交互。</strong></p><p>例如，一个类的对象可以使用另一个类的对象提供的服务/方法。 这就像人与航空公司之间的关系。一个人通常不拥有航空公司，但可以与一家航空公司互动。航空公司还可以与许多人对象进行交互。</p><p><strong>3️⃣泛化（inheritance）：泛化表示子类拥有父类的所有属性和方法。</strong>在绘制类图时，不需要在子类写出父类已有的属性或方法。</p><p>例如，猫对象和狗对象都拥有动物对象的年龄属性和吃饭行为。</p><p><strong>4️⃣实现（implementation）：</strong>实现和泛化一样，但是实现接口使用虚线加空心三角形表示。</p><p><strong>5️⃣聚合（aggregation）：</strong>聚合是一种弱 has-a 的关系，部分可以属于整体，但它们也可以独立存在。<strong>聚合关系是一种弱关系，一种生命周期不同步的关系。</strong></p><p>例如，这就像客机与其机组人员之间的关系。客机的一个重要部分是它的机组人员。没有机组人员，客机将无法飞行。但是，如果机上没有机组人员，客机也不会不存在。机组人员也是如此，他们是客机运营的一部分，但如果机组人员不在客机上，他们也不会消失或被摧毁。</p><p><strong>6️⃣组合（composition）：</strong>组成是对部分的排他性包含，也称为强 has-a 关系。这意味着整体不能没有它的部分而存在。如果失去了它的任何部分，整体就不复存在了。如果整体被摧毁，那么它的所有部分也被摧毁。通常只能通过其整体访问部分。包含的部分是整体独有的。<strong>组合关系是一种强关系，一种生命周期同步的关系。</strong></p><p>例如，大脑是人类组成的一部分，人没有大脑会死，大脑没有人也不能存在。</p><p><strong>✨多重性：</strong></p><table><thead><tr><th align="center">基数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><strong>0 .. 1</strong></td><td align="center">表示 0 到 1 个</td></tr><tr><td align="center"><strong>n</strong></td><td align="center">表示任意个</td></tr><tr><td align="center"><strong>0 .. *</strong></td><td align="center">表示 0 到任意多个</td></tr><tr><td align="center"><strong>1 .. *</strong></td><td align="center">表示 1 到任意多个</td></tr><tr><td align="center"><strong>m .. n</strong></td><td align="center">表示任意多个到任意多个</td></tr></tbody></table><p><strong>示例类图 1：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230131B02N010.png"></p><p><strong>示例类图 2：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230131B02N011.png"></p><br><h3 id="关系间的区别"><a href="#关系间的区别" class="headerlink" title="关系间的区别"></a>关系间的区别</h3><p><strong>🔖依赖和关联的区别：</strong></p><p>👉<strong>依赖关系</strong> 是一种 <strong>短期的</strong> 、 <strong>临时性的</strong> 、 <strong>弱的</strong> 关系，一般来说是 <strong>单向的</strong> ，常出现在方法参数和局部变量中。例如，一架客机需要依赖跑道起飞。每架客机并不需要配有专门的跑道，它只有在需要起飞时才需要依赖到跑道。转换成代码思维就是：客机类不需要有跑道类类型的成员变量，只需要在起飞行为时，传入指定的跑道类类型参数即可。</p><p>👉<strong>关联关系</strong> 是一种 <strong>长期的</strong> 、 <strong>表示拥有的</strong> 、 <strong>强的</strong> 关系，可以是 <strong>单向或者双向的</strong> ，常出现在成员变量和全局变量中，它意味着两个对象可能在一段时间内会进行交互。例如，人与航空公司之间的关系，人可以与多个航空公司互动，航空公司也可以跟多个人互动。转换成代码思维就是：用户类中可以用成员变量保存自己注册过的航空公司类对象，航空公司类也可以用成员变量保存注册过会员的用户信息。</p><p><strong>🔖关联、聚合和组合的区别：</strong></p><p>👉<strong>关联关系</strong> 是一种 <strong>平等的</strong> 、 <strong>较弱的</strong> 关系，是 <strong>个体与个体</strong> 的。例如，人与航空公司之间的关系是平等的。</p><p>👉<strong>聚合关系</strong> 是一种 <strong>不平等的</strong> 、 <strong>较强的</strong> 关系，是 <strong>整体与部分</strong> 的，并且 <strong>生命周期不同步</strong> ，部分可以离开整体存在。例如，显示器是台式电脑的一部分，但是显示器除了作为电脑屏幕还可以作为监控屏幕，离开了电脑依旧能存在，生命周期是不同步的。</p><p>👉<strong>组合关系</strong> 是一种 <strong>不平等的</strong> 、 <strong>最强的</strong> 关系，是 <strong>整体与部分</strong> 的，并且 <strong>生命周期同步</strong> ，部分无法离开整体存在。例如，眼睛是人的一部分，但是人死了眼睛也就自然死了，生命周期是同步的。</p><br><br><p><strong>📌最后：希望本文能够给您提供帮助，文章中有不懂或不正确的地方，请在下方评论区💬留言！</strong></p><p><strong>🔗参考文献：</strong></p><p>▶️ <a href="https://www.bilibili.com/video/BV1HJ411c7qo/?spm_id_from=333.1007.top_right_bar_window_default_collection.content.click&vd_source=a9a236c4d6e5c5350c70b71ee0727b8c">bilibili - UML类图</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 软件建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UML </tag>
            
            <tag> 软件建模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象设计</title>
      <link href="/archives/f28a8c2c.html"/>
      <url>/archives/f28a8c2c.html</url>
      
        <content type="html"><![CDATA[<h3 id="面向对象设计"><a href="#面向对象设计" class="headerlink" title="面向对象设计"></a>面向对象设计</h3><p><strong>面向对象设计</strong>是一种新的软件设计思想，意在模拟真实的世界🌏运作。通过面向对象设计衍生出来的面向对象程序设计能让我们尽可能模拟人类👶的思维方式，使得软件的开发方法与过程尽可能接近人类认识世界。</p><p>下面是<strong>百度百科</strong>关于<strong>面向对象程序设计</strong>的介绍：</p><blockquote><p>面向对象程序设计(Object Oriented Programming)作为一种新方法，其本质是以建立模型体现出来的抽象思维过程和<a href="https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/2262089?fromModule=lemma_inlink">面向对象</a>的方法。模型是用来反映现实世界中事物特征的。任何一个模型都不可能反映客观事物的一切具体特征，只能对事物特征和变化规律的一种抽象，且在它所涉及的范围内更普遍、更集中、更深刻地描述客体的特征。通过建立模型而达到的抽象是人们对客体认识的深化。</p><ol><li>面向对象程序设计（Object Oriented Programming，OOP）是一种计算机编程架构。OOP 的一条基本原则是计算机程序由单个能够起到子程序作用的单元或对象组合而成。OOP 达到了软件工程的三个主要目标：重用性、灵活性和扩展性。OOP = 对象 + 类 + 继承 + 多态 + 消息，其中核心概念是类和对象。</li><li>面向对象程序设计方法是尽可能模拟人类的思维方式，使得软件的开发方法与过程尽可能接近人类认识世界、解决现实问题的方法和过程，也即使得描述问题的问题空间与问题的解决方案空间在结构上尽可能一致，把客观世界中的实体抽象为问题域中的对象。</li><li>面向对象程序设计以对象为核心，该方法认为程序由一系列对象组成。类是对现实世界的抽象，包括表示静态属性的数据和对数据的操作，对象是类的实例化。对象间通过消息传递相互通信，来模拟现实世界中不同实体间的联系。在面向对象的程序设计中，对象是组成程序的基本模块。</li></ol></blockquote><p>对于面向对象程序设计，百度百科的介绍还是不够具体。如果我们想要使用面向对象的思维进行程序设计，还是会无从下手。所以在开始学习面向对象设计之前，我们还需要了解以下概念：<a href="###_%E8%BD%AF%E4%BB%B6%E8%A6%81%E6%B1%82%E3%80%81%E6%A6%82%E5%BF%B5%E5%92%8C%E6%8A%80%E6%9C%AF%E8%AE%BE%E8%AE%A1">软件要求、概念和技术设计</a>、<a href="###_%E7%94%A8%E6%88%B7%E6%95%85%E4%BA%8B">用户故事</a>、<a href="###_%E8%80%A6%E5%90%88%E5%92%8C%E5%86%85%E8%81%9A">耦合和内聚</a>、<a href="###_%E5%85%B3%E6%B3%A8%E7%82%B9%E5%88%86%E7%A6%BB">关注点分离</a>、<a href="###_%E4%BF%A1%E6%81%AF%E9%9A%90%E8%97%8F">信息隐藏</a>、<a href="###_%E6%A6%82%E5%BF%B5%E5%AE%8C%E6%95%B4%E6%80%A7">概念完整性</a>、<a href="###_%E6%A8%A1%E5%9E%8B%E6%A3%80%E6%9F%A5">模型检查</a>。如果你了解这些概念，也可以直接从<a href="###_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%BB%BA%E6%A8%A1">面向对象建模</a>开始。</p><br><h3 id="软件要求、概念和技术设计"><a href="#软件要求、概念和技术设计" class="headerlink" title="软件要求、概念和技术设计"></a>软件要求、概念和技术设计</h3><p>🔖 我们可以将开发软件视为一个处理问题并产生涉及软件的解决方案的过程。通常，这是一个迭代的过程，每次迭代都将一组需求带到工作和测试的实现中，并最终构建一个完整的解决方案。在每一次迭代中，我们需要完成以下步骤：</p><p><strong>👉引出需求：</strong>当我们有了一组初始需求时，需要将它概述为解决方案。就是将一组初始需求变成一个解决整体问题的方案，确保能够加以快速有效的执行。在此活动中需要生成“概念设计”，然后再生成“详细设计”。</p><p><strong>👉概念设计：</strong>概念设计是我们对如何满足需求的初步想法，不涉及任何技术细节。</p><p><strong>👉详细设计：</strong>在详细设计中，我们需要开始考虑每个组件的技术细节，可以通过将组件拆分为越来越小的组件来完成。如果这些组件不够具体、有结构需要调整、不能够进行详细设计，则需要重新回到“概念设计”进行调整。</p><p>❗<strong>开发软件的步骤分为需求分析、概念设计、详细设计。</strong></p><br><h3 id="用户故事"><a href="#用户故事" class="headerlink" title="用户故事"></a>用户故事</h3><p>🔖 用户故事是从用户的角度来描述用户渴望得到的功能，我们可以利用它去更好的表述我们的需求。</p><blockquote><p><em>作为一个______，我想______，以便______。</em></p></blockquote><p><em>作为</em> <strong>在线购物者</strong>，<em>我想</em> <strong>将商品添加到我的购物车中</strong>，<em>以便</em> <strong>我可以购买它。</strong></p><p>🔖 通常，名词对应软件中的对象。因此，在此示例中，我们标识了三个对象：</p><ol><li>用户角色与软件中的对象（在线购物者）相关联。</li><li>商品对象可以是商店中的任何产品。</li><li>购物车对象是用于跟踪要购买的商品的。</li></ol><p>🔖 谓词可以帮助我们确定对象可能具有的责任或者识别对象之间的联系。因此，在此示例中，我们可以得出：</p><ol><li>添加和购买可能是购物车的职责。</li><li>一个在线购物者通常与一个购物车相关联，同时购物车应该能够容纳多个商品。</li></ol><p><strong>❗用户故事是可用于表达软件系统需求的众多技术之一。它们易于使用，可以让我们在使用面向对象的思维时发现对象和进一步的需求。</strong></p><br><h3 id="耦合和内聚"><a href="#耦合和内聚" class="headerlink" title="耦合和内聚"></a>耦合和内聚</h3><blockquote><p>乔治·米勒（George Miller）在一篇心理学论文中观察到了这一点，其中受试者必须回忆 1 到 14 个随机的声音和图像。当人数达到 7 左右时，受试者开始回忆失败。在编程时，保持模块简单至关重要。一旦你的设计复杂性超过了开发人员的心理处理能力，错误就会更频繁地发生。我们将用耦合和内聚评估设计的复杂性。耦合侧重于模块与其他模块之间的复杂性。内聚侧重于模块内的复杂性。</p></blockquote><p>在设计系统时，我们需要将各种模块组合在一起。</p><p>❎ 把一个糟糕的设计想象成拼图，你的模块就是拼图。你只能将一个拼图连接到另一个特定的拼图，而不能连接其他拼图。</p><p>✅ 一个设计良好的系统就像乐高积木。你可以毫不费力地连接任意两个乐高积木，并且所有乐高积木都相互兼容。</p><p>🔖 在设计系统时，我们应该让它像乐高一样。这样就可以轻松地将模块连接在一起并重复使用。 </p><p><strong>❗模块的耦合表示模块连接到其他模块的复杂性。</strong></p><p>❎ 如果一个模块高度依赖其他模块，那么就说明这个模块与其他模块紧密耦合，就像拼图一样；</p><p>✅ 如果一个模块很容易连接到其他模块，那么就说明这个模块与其他模块松散耦合。就像乐高。</p><p><strong>❗内聚力表示模块职责的明确性，它是描述模块内部的。</strong></p><p>❎ 如果一个模块试图封装多个任务或目的不明确，则该模块的内聚力较低。</p><p>✅ 如果一个模块只执行一项任务而不执行其他任务或有明确的目的，则该模块具有高内聚力。</p><p>🔖 我们不仅需要考虑模块与模块间的耦合度，还需要注意模块内的内聚力。如果你发现你的模块中有多个职责，那么你就需要拆分你的模块。</p><p>例如，现在有个传感器类，有个 <code>getter</code> 方法，1️⃣标志位代表获取温度，0️⃣标志位代表获取湿度。那么从内聚角度看，这个类低内聚，因为它没有指出明确的用途。从耦合角度看，这个类高耦合，因为我们如果不阅读它的接口文档，就不知道如何获取温度湿度。</p><p>🎈 接下来我们来重新设计这个类。</p><p>传感器类现在被湿度传感器类和温度传感器类所取代。这两个类都有一个明确定义的用途。由于每个类都有明确的目的，因此可以说这些类具有高度的凝聚力。湿度传感器的 <code>getter</code> 方法返回湿度，温度传感器的 <code>getter</code> 方法返回温度。这使得其他类使用它们其中的任何一个类时都是松散耦合的。</p><p><strong>❗一般来说，在设计中，需要在低耦合和高内聚之间取得平衡。对于复杂的系统，复杂性可以分布在模块之间或者模块内部。随着模块的简化以实现高内聚，那么它们就需要依赖更多其他的模块，从而变得高耦合。如果模块之间的连接被简化以实现低耦合，那么模块内部就需要承担更多的责任，从而变得低内聚。</strong></p><br><h3 id="关注点分离"><a href="#关注点分离" class="headerlink" title="关注点分离"></a>关注点分离</h3><blockquote><p><strong>关注点分离</strong>可以帮助我们创建一个灵活、可重用和可维护的系统。关注点分离是应用于整个面向对象建模和编程的关键思想。</p></blockquote><p>举个例子，我们都知道狗的一些基本行为，比如走路、跑步、说话和吃饭。虽然这些行为很容易识别和抽象，但我们还需要思考以下两点：</p><p>❓ 狗可以自己做哪些行为？</p><p>❓ 哪些需要其他事或其他人的帮助？</p><p>如果我们仔细研究过狗的饮食行为，我们可能会得出这样的结论。“狗有食物，它知道如何吃，主人可以通过给狗食物来告诉它吃食物。”但这是模拟情况的正确方法吗？</p><p>❓ 谁在给狗喂食？</p><p>❓ 狗总是有食物吃，还是需要主人给狗食物才有得吃？</p><p>实际上，狗需要主人来喂养它。狗知道如何吃食物，但在主人喂它之前，它对它将要吃的食物一无所知。这就出现了两个问题：“饮食的行动”和“提供食物的行动”。这可以通过引入狗主人类来完成。</p><p>🎈 在我们的新设计中，狗类只知道如何吃食物。狗主人类是知道如何获取狗粮以及如何给狗食物的类。我们已经消除了狗是如何获取食物的问题，让狗主人来处理这个问题。</p><p>🔖 使用关注点分离时，我们应该只将行为和属性封装在与所述行为和属性相关的类中。这有助于我们创建一个模块化的系统，其中各个类可以轻松地交换，而无需重写大部分代码。</p><p>再比如说，智能手机有许多功能，包括照相、录音、通信等等。要解决这些问题就要把问题抛给指定对象，让相机对象来满足智能手机能照相的功能。让录音机对象满足智能手机能录音的功能。而智能手机只需要关注如何组合它们，并不要求知道它们内部是如何实现的。</p><p>🔖 我们的目标是创建灵活的可重用且可维护的代码。关注点分离使用抽象、封装、分解和泛化创建更具凝聚力的类。这将创建一个更易于维护的系统，因为每个类都经过组织，因此它只包含完成其工作所需的代码。这使得开发人员能够重用和构建单个类而不影响其他类。</p><p><strong>❗关注点分离要求我们在建模时，将问题分解，让每个对象专注于每个问题。</strong></p><br><h3 id="信息隐藏"><a href="#信息隐藏" class="headerlink" title="信息隐藏"></a>信息隐藏</h3><blockquote><p>信息隐藏允许我们的系统模型为其他人提供正确使用它们所需的最少信息量并隐藏其他所有内容。信息隐藏允许开发人员与需要了解该模块的实现细节的其他开发人员单独处理模块。他们只能通过其接口使用此模块。通常，可能会更改的内容（例如实现细节）应隐藏。而不应该改变的事情，都用接口暴露出来。</p></blockquote><p>例如，我们都在同一个系统上，但在不同的模块上工作。如果我的模块需要来自你的模块的信息，则信息隐藏要求你仅向我提供模块工作所需的信息。不必让我访问模块中的所有内容，你也不需要知道我的模块是如何工作的。</p><p>🔖 信息隐藏通常与封装相关联。我们使用封装将属性和行为捆绑到它们的相应类中，并公开一个接口来提供访问权限。</p><p>🔖 封装有效地隐藏了行为的实现，因为唯一的访问是通过特定方法的接口。其他类只能依赖于这些方法接口中的信息，而不依赖于具体的方法实现。通过封装隐藏的信息使我们能够在不改变预期结果的情况下更改实现。</p><p><strong>❗信息隐藏能够让我们控制要共享的信息以及要让其他人看到的行为。外部知道的信息越少，才能更有利于构建灵活、可重用和可维护的系统。</strong></p><br><h3 id="概念完整性"><a href="#概念完整性" class="headerlink" title="概念完整性"></a>概念完整性</h3><blockquote><p>概念完整性通常被认为是系统设计中最重要的考虑因素。著名的计算机架构师弗雷德·布鲁克斯（Fred Brooks）在他的书《神话人月》（The Mythical Man-Month）中指出，最好让一个系统省略某些异常功能和改进，去反映一组设计思想，而不是拥有一个包含许多良好却独立和不协调的想法的系统。简而言之，概念完整性是关于以一致的方式设计和实现软件，就好像它是由一个人编写的一样。在软件中实践概念完整性有助于指导团队编写软件。如果每个团队成员都看到软件的设计和逻辑是一致且易于遵循的，这将帮助他们知道如何以及在何处更改软件以满足新的要求。</p></blockquote><p>例如，在Unix操作系统中，每个资源都可以像文件一样被查看和操作。同一组操作可用于不同类型的资源。这简化了事情，使任何资源都可以以相同的方式处理。统一概念可以避免出现特殊情况，能让软件具有一致性。</p><p>例如，团队成员都可以遵循特定的命名约定。</p><p>例如，在前后端分离项目中，封装后端返回给前端的结果集。</p><p><strong>❗概念完整性可以帮助我们创建一致且设计良好的软件。</strong></p><br><h3 id="模型检查"><a href="#模型检查" class="headerlink" title="模型检查"></a>模型检查</h3><blockquote><p>模型检查是对系统状态模型所有可能发生的事情进行的系统检查，我们需要检查软件的所有状态，并通过模拟会更改软件状态和变量的不同事件来发现存在的任何错误。以此来确保软件的状态模型是否包含一些缺陷。或者说我们需要对我们的软件进行软件测试。</p></blockquote><p>模型检查是一种进行状态探索的技术。从当前状态开始，探索所有可能出现的情况，并推理这些可能出现的情况会导致状态发生怎样的变化。</p><p><strong>❗执行模型检查有三个不同的阶段：建模阶段、运行阶段和分析阶段。</strong></p><p>🔖 模型检查让我们不仅能够开发出设计良好的软件，而且能够开发出满足所需属性和行为的软件。</p><br><h3 id="面向对象建模"><a href="#面向对象建模" class="headerlink" title="面向对象建模"></a>面向对象建模</h3><p><strong>面向对象建模</strong>是将现实世界的任何实体抽象为对象的建模思想。如果能够学会使用面向对象建模的方式设计软件，会让你的代码会更加灵活、更易重用。</p><p>❓ <strong>实体</strong>是什么？<strong>对象</strong>又是什么？</p><p>🎗️ 我们身边的许多物品，比如杯子、笔记本等，这些都是现实世界的实体。</p><p>🎗️ 对象则是这一个个实体的抽象，根据实体的特性和功能抽象出对象的属性和方法。</p><p>在面向对象建模中，我们将一个个实体看做一个个有自我意识的对象，它们知道自己是怎么样的，能干什么事。</p><p>例如，对于杯子自身来说，它知道自己的形状大小、能容纳多少毫升的液体、能用来干嘛。</p><p>❗对象可以分为三种：<strong>实体对象</strong>、<strong>边界对象</strong>、<strong>控制对象</strong>。</p><p>❗面向对象建模有四个原则：<strong>抽象化</strong>、<strong>封装</strong>、<strong>分解</strong>和<strong>泛化</strong>。</p><h4 id="对象类别"><a href="#对象类别" class="headerlink" title="对象类别"></a>对象类别</h4><p>🔖 <strong>实体对象</strong>是最容易理解的，因为它们对应问题空间中的某个实际实体。软件中表示椅子的对象、表示建筑物或客户的对象，这些都是实体对象。通常，这些对象需要知道有关自身的属性，同时他们还可以修改自己，并使用一些方法来改变自己。</p><p>🔖 <strong>边界对象</strong>是位于系统边界之间的对象。可能是处理另一个软件系统的对象，就像从互联网获取信息的对象一样。也可能是负责向用户显示信息并获取其输入的对象。如果你需要编写用户界面，那一定离不开边界对象。任何处理另一个系统的对象、用户、另一个软件系统、互联网等都可以被视为边界对象。</p><p>🔖 <strong>控制对象</strong>是负责协调的对象。当我们尝试去分解大型对象时，拥有一个控制其他对象的对象会很有用，这就是控制对象。调解器是个很好的例子：它能够协调许多不同对象的活动，以便它们可以保持松散耦合。</p><h4 id="抽象化"><a href="#抽象化" class="headerlink" title="抽象化"></a>抽象化</h4><blockquote><p>抽象是人类处理复杂事物时的主要方式之一 。抽象是在某些上下文中，将问题域中的概念简化为基本概念的想法。抽象能忽略不重要的细节，将一个概念分解为简化的描述，让我们可以更好地理解概念。</p></blockquote><p><strong>❗抽象化让我们在某些上下文中，抽取实体必要的属性和行为。</strong></p><p>例如抽象化“食物”，在健康层面下，我们往往关注它的营养价值而并非成本。</p><p><strong>❗一个好的抽象体应该强调它概念所需的要点，而不在意它那些不必要的细节。它应该具备必要的属性和行为，除此之外的一切都与它不相关。</strong></p><p>例如“人类”，但是人类是一个庞大的概念，我们无法抽象出一个完整的人类，所以我们要结合所处环境和其所对应的身份。</p><p>假设现在是在学校学习的学生，他们有一些基本的属性“学号”、“成绩”等。这些属性实际的数值会改变，比如学生的成绩会发生变化。但是属性本身不会，因为属性是一个抽象体最基础的描述。除此之外还有行为，例如学生的行为包含上课和写作业，这些是属于学生的责任，反映他是一个学生。哪些与他学生身份不相关的细节，我们不会去考虑。例如在学校学习的学生，我们不会去关注他养了几只小狗、他家有多有钱之类的事情。</p><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><blockquote><p>封装是指隐藏对象内部实现的细节，仅对外提供公共访问的接口。</p></blockquote><p><strong>❗封装是一个在面对对象建模和编程中最基础的设计原则，它涉及三个方面：</strong></p><p>👉 你需要将属性数值（或数据）和会改变这些数值的行为（或函数），封装在一起成为一个独立的对象。</p><p>👉 你可以显示该对象的某些数据或函数，这些数据或函数可以让其他对象访问。</p><p>👉 你可以将对某些数据或函数的访问限制为仅用于该对象内部。</p><p>🔖 简单来说就是封装把对象所需的数据和函数打包成一个独立的对象，显示能让其他对象访问的部分，用来防止外部访问对象内部的细节。</p><p><strong>❗一个对象应该只包含与该对象相关的属性和方法，这些方法可以是让外部获取内部属性数据的接口，也可以是和该对象有关的一些行为。</strong></p><p>例如，一个学生对象只含有与自己相关的课程成绩。</p><p>例如，教师对象可以通过询问学生对象（调用学生对象提供的方法）去得知该学生对象的课程成绩。</p><p><strong>❗封装有利于数据的完整性。</strong></p><p>在 Java 中，你可以定义一些不让外部直接访问的数据，然后提供指定的方法让外部安全访问。这样对象的属性值就无法通过变量赋值的方式直接改变。</p><p>例如，现在有一个汽车对象，它有一个里程数，如果直接通过赋值改变，那么它可能为负数。但是如果提供指定方法让它改变，我们就能在方法中限制它不为负数。</p><p><strong>❗封装可以保护敏感的信息。</strong></p><p>假设让学生对象去存储一个课程分数，学生对象本身可以提供课程分数的查询，但不需要去透露课程分数的实际数值。</p><p>例如，学生对象提供一个查询方法，辨别该学生是否在该课程的学习中表现良好，其方法实现就是使用自己存储的课程分数计算。当分数在 90 ~ 100 时输出“优秀”，在 80 ~ 90 时输出“良”依此类推…</p><p><strong>❗封装有助于更改软件，提高代码复用性。类向外部提供的访问接口可以保持不变，但属性和方法的实现逻辑可以发生改变。外部类在使用接口时，不需要关心其内部是如何运作的。</strong></p><p>例如，学生对象可以在教师对象中知道自己的成绩，但是教师对象不会告知学生对象“他是如何批卷的？”、“是机改还是手批？”</p><p>🔖 在编程中，我们可以采用黑盒思考法去封装。把类想象成一个无法看清内部细节的盒子。只要根据规范提供输入值，就会得到相应的预期值，与盒子内部如何运作无关。我们不需要去思考太多，只需要关注“输入值后得到的输出值能帮我们实现什么”。</p><h4 id="分解"><a href="#分解" class="headerlink" title="分解"></a>分解</h4><blockquote><p>分解是把完整的物体分成不同的部分，或者从另一个角度来看，把一堆功能不同的个体组合在一起变成完整对象。</p></blockquote><p>🔖 分解让你能进一步地把问题分解成更容易理解和解决的部分，这与关注点分离类似。</p><p><strong>❗分解的普遍原则是去分析一个完整对象的不同职责，并思考如何把它们分解成不同的部分。每个部分都有自己独特的责任，我们需要把一个整体和它的每个部分联系在一起。</strong></p><p>例如，把一个完整的车分解，它可能有的零件是变速箱、引擎、车轮、轮胎、车门、窗户、车椅和燃料。这些部分都有它们自己的责任。</p><p><strong>❗一个整体可能会有固定或者动态数量的部件。</strong></p><p>例如，冰箱的冷冻库是固定的，但是冰箱内的食物不固定。这也对应了 <code>UML</code> 中的组合和聚合关系。</p><p><strong>❗整体对象的生命周期和分解出来的部分对象的生命周期可能紧密相关也可能不相关。</strong></p><p>例如，冰箱和它的冷冻库有同样的生命周期，但是冰箱和冰箱内的食物生命周期却不同。冷冻库故障，那么也说明这个冰箱需要去修理；但冰箱里的食物过期和冰箱本身却没有什么关联。</p><p><strong>❗多数整体是可以共享内部的部分的。但是有些时候是不可能或无法共享的。</strong></p><p>例如，一个女生可能是一个家庭的子女也可能是另一个家庭的父母。</p><p>例如，冰箱中的食物不能同时放在烤箱里。</p><p>🔖 总而言之，分解能帮助我们将问题分解成较小的部分。一个复杂的整体对象可以由独立及简单的部分对象所构成。了解部分跟整体的联系很重要，像是固定或动态数量，它们的生命周期或是否有共享的情况。在 <code>UML</code> 建模中，组合关系、聚合关系所对应的都是整体与部分的关系。利用好它们，不会让我们在面对一个复杂的整体对象时无从下手。</p><h4 id="泛化"><a href="#泛化" class="headerlink" title="泛化"></a>泛化</h4><blockquote><p>通过泛化，可以帮助我们在解决问题时减少代码冗余。我们可以泛化行为，这样就不需要在整个程序中编写相同的代码。</p></blockquote><p>🔖 在 Java 中我们用继承基类和实现接口的方式来实现泛化。</p><p>在 Java 的继承中，你可以有一个“父类”和多个“子类”。当子类继承自父类时，子类将具有父类的属性和行为。我们可以将共通的属性和行为放在父类中。每个继承自该父类的子类，都将具备这些共通的属性和行为。此外，子类还可以拥有一些属于自己的属性和行为，这让它们可以更加专注于自己可以做什么。 </p><p>例如，狗类和猫类都继承与动物类，它们都具有动物共通的吃和睡。但是狗有属于它自己的忠诚性，猫有属于它自己的好奇心。</p><p><strong>❗不过，泛化不能滥用。有些时候，分解的效果比泛化更好，分解对于模块间的耦合度较低。</strong></p><p>🔖 泛化能帮我们减少代码重复，但它也有着高耦合的特性。当我们使用泛化时，需要思考一下以下问题。</p><p>❓ “我是否使用泛化来简单地共享属性或行为，而无需在我的子类中进一步添加任何特殊内容？”</p><p>🎗️ 如果“是”，那么你滥用了继承。这是误用的迹象，子类没有存在的意义，因为拥有父类就已经足够了。</p><p>❓ “是否违反了里氏替换原则（子类型必须能够替换掉他们的基类型）？” </p><p>🎗️ 例如，动物类有跑和跳的行为，现在有一个鱼类，用游泳行为替代了这个跑和跳。那么这就违背了里氏替换原则。因为在动物类中，我们期望子类去形容如何跑和跳，而不是像鱼类一样，使用游泳替代它们。鱼的行为不再像我们期望的那样，它违背了父类的期望，也就违反了里氏替换原则。</p><br><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>开发软件的步骤分为<strong>需求分析</strong>、<strong>概念设计</strong>、<strong>详细设计</strong>。</li><li><strong>用户故事</strong>可以让我们在使用面向对象的思维时发现对象和进一步的需求。</li><li>模块与模块之间的复杂度用耦合度表示，模块内部职责的明确性用内聚力表示。一般来说，在设计中，需要在<strong>低耦合</strong>和<strong>高内聚</strong>之间取得平衡。</li><li><strong>关注点分离</strong>要求我们在建模时，将问题分解，让每个对象专注于每个问题。</li><li><strong>信息隐藏</strong>能够让我们控制要共享的信息以及要让其他人看到的行为。外部知道的信息越少，才能更有利于构建灵活、可重用和可维护的系统。</li><li><strong>概念完整性</strong>可以帮助我们创建一致且设计良好的软件。</li><li>执行<strong>模型检查</strong>有三个不同的阶段：<strong>建模阶段</strong>、<strong>运行阶段</strong>和<strong>分析阶段</strong>。</li><li>对象可以分为三种：<strong>实体对象</strong>、<strong>边界对象</strong>、<strong>控制对象</strong>。</li><li>面向对象建模有四个原则：<strong>抽象化</strong>、<strong>封装</strong>、<strong>分解</strong>和<strong>泛化</strong>。</li><li><strong>抽象化</strong>让我们在某些上下文中，抽取实体必要的属性和行为。一个好的抽象体应该强调它概念所需的要点，而不在意它那些不必要的细节。它应该具备必要的属性和行为，除此之外的一切都与它不相关。</li><li><strong>封装</strong>是一个在面对对象建模和编程中最基础的设计原则，它涉及三个方面：<ol><li>你需要将属性数值（或数据）和会改变这些数值的行为（或函数），封装在一起成为一个独立的对象。</li><li>你可以显示该对象的某些数据或函数，这些数据或函数可以让其他对象访问。</li><li>你可以将对某些数据或函数的访问限制为仅用于该对象内部。</li></ol></li><li><strong>封装</strong>要求一个对象应该只包含与该对象相关的属性和方法，这些方法可以是让外部获取内部属性数据的接口，也可以是和该对象有关的一些行为。</li><li><strong>封装</strong>的好处：<ol><li>有利于数据的完整性。</li><li>可以保护敏感的信息。</li><li>有助于更改软件，提高代码复用性。</li></ol></li><li><strong>分解</strong>让我们将一个完整的对象分解为不同职责的部分。整体和部分的关系可以从数量、生命周期和共享三方面去考虑。</li><li><strong>泛化</strong>可以让我们减少编写重复的代码，但是泛化不能滥用。有些时候，分解的效果比泛化更好，分解对于模块间的耦合度较低。</li></ul><br><br><p><strong>📌最后：希望本文能够给您提供帮助，文章中有不懂或不正确的地方，请在下方评论区💬留言！</strong></p><p><strong>🔗参考文献：</strong></p><p>🌐 <a href="https://www.coursera.org/learn/object-oriented-design">Object Oriented Design –coursera</a></p><p>🌐 <a href="https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/24792">面向对象程序设计 –百度百科</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 软件建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件建模 </tag>
            
            <tag> 面向对象设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于AES和RSA的加密邮箱Demo</title>
      <link href="/archives/1994803e.html"/>
      <url>/archives/1994803e.html</url>
      
        <content type="html"><![CDATA[<h3 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h3><blockquote><p>网络安全期末大作业：通过课堂上讲解的对称加密和非对称加密算法，实现一个能够加密解密的邮箱客户端。</p></blockquote><p><font color="red"><strong>注意：本文不介绍算法，只讲解主要实现过程。</strong></font></p><br><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><h4 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h4><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230123B01N001.png"></p><h4 id="加密邮件"><a href="#加密邮件" class="headerlink" title="加密邮件"></a>加密邮件</h4><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230123B01N002.png"></p><h4 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h4><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230123B01N003.png"></p><br><h3 id="整体设计"><a href="#整体设计" class="headerlink" title="整体设计"></a>整体设计</h3><p>用 Java 实现加密邮箱客户端，由于是网络安全作业，所以主要在于加解密算法的编写。这里我采用随机生成的字符串为 AES128 的密钥，加密密文，再用其他用户的公钥采用 RSA 加密 AES128 密 钥，最后封装成  EncryptMessage 对象，向其他用户发送密钥和密文。</p><p><strong>流程图如下：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20230123B01N004.png"></p><h4 id="加密邮件算法设计"><a href="#加密邮件算法设计" class="headerlink" title="加密邮件算法设计"></a>加密邮件算法设计</h4><h5 id="加密设计"><a href="#加密设计" class="headerlink" title="加密设计"></a>加密设计</h5><ol><li><p>采用随机生成的字符串作为 AES128 的密钥，加密密文。</p></li><li><p>再用其他用户的公钥采用 RSA 加密 AES128 密钥。</p></li><li><p>最后封装成 EncryptMessage 对象，向其他用户发送密钥和密文。 </p></li></ol><h5 id="其他设计"><a href="#其他设计" class="headerlink" title="其他设计"></a>其他设计</h5><ol><li><p>字符集编码：Unicodee 支持所有字符编码。</p></li><li><p>输出格式：Base64 编码。</p></li><li><p>EncryptMessage 对象：</p><ul><li>密钥：RSA 加密 AES 密钥。</li><li>密文：AES 加密的密文。</li></ul></li></ol><h4 id="加密邮件算法部分代码"><a href="#加密邮件算法部分代码" class="headerlink" title="加密邮件算法部分代码"></a>加密邮件算法部分代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取公钥和密钥</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> RSAUtils.<span class="function">SecretKey <span class="title">createRSAKeyPair</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> RSAUtils.createKeyPair();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 加密</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> plaintext 明文</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> publicKey 公钥</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> EncryptMessage <span class="title">encrypt</span><span class="params">(String plaintext, String publicKey)</span> <span class="keyword">throws</span> UnsupportedEncodingException</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="comment">// base64解码公钥</span></span><br><span class="line">       publicKey = <span class="keyword">new</span> String(Base64.getDecoder().decode(publicKey));</span><br><span class="line">       <span class="comment">// 生成随机AES128密钥</span></span><br><span class="line">       String secretKey = getRandomString(<span class="number">16</span>);</span><br><span class="line">       <span class="comment">// AES128加密明文</span></span><br><span class="line">       String cipherText = AESUtils.encrypt(plaintext, secretKey);</span><br><span class="line">       <span class="comment">// RSA加密AES128密钥</span></span><br><span class="line">       String key = encryptSecretKey(secretKey, publicKey);</span><br><span class="line">       <span class="comment">// base64编码邮件密文和密钥</span></span><br><span class="line">       cipherText = <span class="keyword">new</span> String(Base64.getEncoder().encode(cipherText.getBytes()));</span><br><span class="line">       key = <span class="keyword">new</span> String(Base64.getEncoder().encode(key.getBytes()));</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> EncryptMessage(key, cipherText);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 解密</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> encryptMessage 加密邮件</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> privateKey 私钥</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decrypt</span><span class="params">(EncryptMessage encryptMessage, String privateKey)</span> <span class="keyword">throws</span> UnsupportedEncodingException</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="comment">// base64解码私钥</span></span><br><span class="line">       privateKey = <span class="keyword">new</span> String(Base64.getDecoder().decode(privateKey));</span><br><span class="line">       <span class="comment">// 获取邮件密文和密钥</span></span><br><span class="line">       String cipherText = encryptMessage.getCipherText();</span><br><span class="line">       String key = encryptMessage.getKey();</span><br><span class="line">       <span class="comment">// base64解码密文和密钥</span></span><br><span class="line">       cipherText = <span class="keyword">new</span> String(Base64.getDecoder().decode(cipherText));</span><br><span class="line">       key = <span class="keyword">new</span> String(Base64.getDecoder().decode(key));</span><br><span class="line">       <span class="comment">// AES128密钥解密密文</span></span><br><span class="line">       String secretKey = decryptSecretKey(key, privateKey);</span><br><span class="line">       <span class="keyword">return</span> AESUtils.decrypt(cipherText, secretKey);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><br><h3 id="AES-算法"><a href="#AES-算法" class="headerlink" title="AES 算法"></a>AES 算法</h3><ul><li>编码方式为 Unicode，支持所有字符编码；</li><li>密钥：AES128；</li><li>加密模式：ECB；</li><li>填充方式：ZerosPadding。</li></ul><h4 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h4><h5 id="加密步骤"><a href="#加密步骤" class="headerlink" title="加密步骤"></a>加密步骤</h5><ol><li><p>明文、密钥按 Unicode 编码格式转字节数组；</p></li><li><p>填充明文为 16 字节的倍数，刚好为 16 字节的倍数也要填充；</p></li><li><p>明文、密钥数组转字节矩阵；</p></li><li><p>分块加密</p><ul><li><p>生成拓展密钥</p></li><li><p>初始变化</p></li><li><p>9 轮循环</p></li><li><p>最后轮循环</p></li></ul></li><li><p>密文字节矩阵转密文字节数组；</p></li><li><p>密文字节数组转密文字节字符串；</p></li><li><p>密文拼接。</p></li></ol><h5 id="解密步骤"><a href="#解密步骤" class="headerlink" title="解密步骤"></a>解密步骤</h5><ol><li>密钥按 Unicode 编码格式转字节数组；</li><li>密文 16 进制字符串转字节数组；</li><li>密文、密钥数组转字节矩阵；</li><li>分块解密<ul><li>生成拓展密钥；</li><li>初始变化；</li><li>9 轮循环；</li><li>最后轮循环；</li></ul></li><li>明文字节矩阵转明文字节数组；</li><li>明文字节数组按 Unicode 编码方式转字符串；</li><li>明文拼接。</li></ol><h4 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 列混合的域乘</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fixMatrix 固定矩阵</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> content </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span> <span class="title">mixMultiply</span><span class="params">(<span class="keyword">byte</span> fixMatrix, <span class="keyword">byte</span> content)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">byte</span> mulContent = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (fixMatrix == <span class="number">0x01</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (fixMatrix == <span class="number">0x02</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        mulContent = GF(content, fixMatrix);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (fixMatrix == <span class="number">0x03</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        mulContent = (<span class="keyword">byte</span>) (GF(content, (<span class="keyword">byte</span>) <span class="number">0x02</span>) ^ content);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (fixMatrix == <span class="number">0x09</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        mulContent = (<span class="keyword">byte</span>) (GF(GF(GF(content, (<span class="keyword">byte</span>) <span class="number">0x02</span>), (<span class="keyword">byte</span>) <span class="number">0x02</span>), (<span class="keyword">byte</span>) <span class="number">0x02</span>) ^ content);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (fixMatrix == <span class="number">0x0B</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        mulContent = (<span class="keyword">byte</span>) ((GF(content, (<span class="keyword">byte</span>) <span class="number">0x02</span>) ^ GF(GF(GF(content, (<span class="keyword">byte</span>) <span class="number">0x02</span>), (<span class="keyword">byte</span>) <span class="number">0x02</span>), (<span class="keyword">byte</span>) <span class="number">0x02</span>)) ^ content);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (fixMatrix == <span class="number">0x0D</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        mulContent = (<span class="keyword">byte</span>) ((GF(GF(content, (<span class="keyword">byte</span>) <span class="number">0x02</span>), (<span class="keyword">byte</span>) <span class="number">0x02</span>) ^ GF(GF(GF(content, (<span class="keyword">byte</span>) <span class="number">0x02</span>), (<span class="keyword">byte</span>) <span class="number">0x02</span>), (<span class="keyword">byte</span>) <span class="number">0x02</span>)) ^ content);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (fixMatrix == <span class="number">0x0E</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        mulContent = (<span class="keyword">byte</span>) (GF(content, (<span class="keyword">byte</span>) <span class="number">0x02</span>) ^ GF(GF(content, (<span class="keyword">byte</span>) <span class="number">0x02</span>), (<span class="keyword">byte</span>) <span class="number">0x02</span>) ^ GF(GF(GF(content, (<span class="keyword">byte</span>) <span class="number">0x02</span>), (<span class="keyword">byte</span>) <span class="number">0x02</span>), (<span class="keyword">byte</span>) <span class="number">0x02</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mulContent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 乘法操作</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fixMatrix 固定矩阵</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span> <span class="title">GF</span><span class="params">(<span class="keyword">byte</span> content, <span class="keyword">byte</span> fixMatrix)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">byte</span> mulContent = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((content &amp; <span class="number">0x80</span>) == <span class="number">0x80</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        mulContent = (<span class="keyword">byte</span>) ((<span class="keyword">byte</span>) (content &lt;&lt; <span class="number">1</span>) ^ <span class="number">0x1B</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        mulContent = (<span class="keyword">byte</span>) (content &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mulContent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h3 id="RSA-算法"><a href="#RSA-算法" class="headerlink" title="RSA 算法"></a>RSA 算法</h3><ul><li><p>本文 RSA 算法的主要实现是取自 CSDN 社区的 <a href="https://blog.csdn.net/qq_41115702/article/details/105884973">foDask Jhonson RSA算法原理及实现(Java)</a> 。</p></li><li><p>RSA 生成的公钥 PublicKey(e, n) 和密钥 PrivateKey(d, n) 的类型为 BigInteger；</p></li><li><p>公钥和密钥格式为两个超大整数且用 “.” 分割，最后再用 Base64 编码。</p></li><li><p>素数长度：1024 bit；</p></li><li><p>素数的准确率 1-(2 ^ (-accuracy))：128；</p></li><li><p>公钥指数 e 的取值：根据PKCS#1的建议，公钥指数e是可以选取较小的素数3或65537(=2^16+1)。这里取 65537。</p></li></ul><h4 id="实现步骤-1"><a href="#实现步骤-1" class="headerlink" title="实现步骤"></a>实现步骤</h4><ol><li>选择一对不相等且足够大的质数p, q；</li><li>计算 p，q 的乘积 n；</li><li>计算 n 的欧拉函数 φ(n) = (p - 1) * (q - 1)；</li><li>选择一个与 φ(n) 互质的整数 e(1 &lt; e &lt; φ(n))；</li><li>计算出 e 对于 φ(n) 的模反元素 d；</li><li>计算出的 d 不能是负数，如果是负数，d = d + φ(n)。使d为正数；</li><li>返回计算出的密钥。</li></ol><h4 id="关键代码-1"><a href="#关键代码-1" class="headerlink" title="关键代码"></a>关键代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 扩展欧几里得法求逆元 -- 求e的逆元d</span></span><br><span class="line"><span class="comment">    * d * e - y * φ(n) = 1 (e和φ(n)互质)</span></span><br><span class="line"><span class="comment">    * d * e - y * φ(n) = gcd(e, φ(n))</span></span><br><span class="line"><span class="comment">    * d * e - y * φ(n) = gcd(φ(n), e % φ(n))</span></span><br><span class="line"><span class="comment">    * d * e - y * φ(n) = φ(n) * d` - y` * [e % φ(n)] (若当前为最后一个式子, 则 e % φ(n) = 0, 开始往回带值)</span></span><br><span class="line"><span class="comment">    * d * e - y * φ(n) = φ(n) * d` - y` * [e - e / φ(n) * φ(n)]</span></span><br><span class="line"><span class="comment">    * d * e - y * φ(n) = - y` * e + [d` + e / φ(n) * y`] * φ(n)</span></span><br><span class="line"><span class="comment">    * d = -y` 和 y = d` - e / φ(n) * y`</span></span><br><span class="line"><span class="comment">    * 由于 d 不能为负数，需要用d=d+φ(n)，使它成为正数</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> e e</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> PHI_n φ(n)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> bigIntegers(最小公因数, d, y)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> BigInteger[] exGCD(BigInteger e, BigInteger PHI_n)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="comment">// φ(n) = 0 -&gt; (1, 1, 0) 满足  d * e - y * φ(n) = 1</span></span><br><span class="line">       <span class="keyword">if</span> (PHI_n.signum() == <span class="number">0</span>)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> BigInteger[]&#123;e, <span class="keyword">new</span> BigInteger(<span class="string">&quot;1&quot;</span>), <span class="keyword">new</span> BigInteger(<span class="string">&quot;0&quot;</span>)&#125;;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">       &#123;</span><br><span class="line">           BigInteger[] bigIntegers = exGCD(PHI_n, e.mod(PHI_n));</span><br><span class="line">           <span class="comment">// y = d` - e / φ(n) * y`</span></span><br><span class="line">           BigInteger y = bigIntegers[<span class="number">1</span>].subtract(e.divide(PHI_n).multiply(bigIntegers[<span class="number">2</span>]));</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> BigInteger[]&#123;bigIntegers[<span class="number">0</span>], bigIntegers[<span class="number">2</span>], y&#125;;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><br><br><p><strong>📌最后：希望本文能够给您提供帮助，文章中有不懂或不正确的地方，请在下方评论区💬留言！</strong></p><p><strong>🔗参考文献：</strong></p><p>🌐 Dask Jhonson. RSA算法原理及实现(Java). [EB/OL]. (2020-05-02). [2022-12-04]. <a href="https://blog.csdn.net/qq_41115702/article/details/105884973">https://blog.csdn.net/qq_41115702/article/details/105884973</a></p>]]></content>
      
      
      <categories>
          
          <category> 项目开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AES </tag>
            
            <tag> RSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前后端分离登录拦截Demo</title>
      <link href="/archives/a9f96b36.html"/>
      <url>/archives/a9f96b36.html</url>
      
        <content type="html"><![CDATA[<h3 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h3><p>本文章讲解的是基于 Vue3.x 和 Springboot 的前后端分离项目的登录拦截示例。运用到 vuex 和 Springboot 的拦截器。前端采用路由守卫，后端采用注册拦截器。安全验证采用 JWT 的 token 令牌。</p><br><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><h4 id="登录成功"><a href="#登录成功" class="headerlink" title="登录成功"></a>登录成功</h4><blockquote><p>登录成功后弹出提示信息，并自动跳转到用户页面。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20220924B01N001.gif"></p><h4 id="登录失败"><a href="#登录失败" class="headerlink" title="登录失败"></a>登录失败</h4><blockquote><p>登陆验证失败后会弹出提示信息。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20220924B01N002.gif"></p><h4 id="访问无效-URL"><a href="#访问无效-URL" class="headerlink" title="访问无效 URL"></a>访问无效 URL</h4><blockquote><p>访问无效 URL 时，会自动跳转到 404 页面。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20220924B01N003.gif"></p><br><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><blockquote><p>数据库：MySql8.0.28</p><p>开发工具：Navicat Premium 15</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20220924B01N004.png"></p><h4 id="依赖导入"><a href="#依赖导入" class="headerlink" title="依赖导入"></a>依赖导入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.2.9<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jwt.version</span>&gt;</span>3.10.3<span class="tag">&lt;/<span class="name">jwt.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hutool.version</span>&gt;</span>5.7.22<span class="tag">&lt;/<span class="name">hutool.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- springboot web --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- mybatis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- mysql 驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- springboot 整合 jdbc --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- springboot test 模块 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- JWT --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jwt.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- hu tool 工具类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hutool.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><br><h3 id="项目分析"><a href="#项目分析" class="headerlink" title="项目分析"></a>项目分析</h3><h4 id="前端实现"><a href="#前端实现" class="headerlink" title="前端实现"></a>前端实现</h4><h5 id="前端路由守卫流程图"><a href="#前端路由守卫流程图" class="headerlink" title="前端路由守卫流程图"></a>前端路由守卫流程图</h5><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20220924B01N005.png"></p><h5 id="前端请求资源流程图"><a href="#前端请求资源流程图" class="headerlink" title="前端请求资源流程图"></a>前端请求资源流程图</h5><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20220924B01N006.png"></p><h5 id="路由守卫代码实现"><a href="#路由守卫代码实现" class="headerlink" title="路由守卫代码实现"></a>路由守卫代码实现</h5><blockquote><p>文件路径：router/index.js</p><p>在需要拦截的页面的路由处加上 <code>requireAuth: true</code>。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/UserInfoView.vue&#x27;</span>),</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">        <span class="attr">showNav</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">requireAuth</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>文件路径：main.js</p><p>在页面跳转前，先判断要跳转的页面是否为<strong>拦截页面</strong>，若不是<strong>拦截页面</strong>则页面放行；若是<strong>拦截页面</strong>则判断 vuex 是否存在 <strong>token</strong>，若不存在 <strong>token</strong> 则跳转”/404“，由于“/404”为无效 URL，所以会自动跳转到指定页面；若存在 <strong>token</strong> 则页面放行。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (to.meta.requireAuth) &#123;</span><br><span class="line">            <span class="keyword">if</span> (store.state.user.token) &#123;</span><br><span class="line">                next()</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                next(&#123;</span><br><span class="line">                    <span class="attr">path</span>: <span class="string">&quot;404&quot;</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            next()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="拦截无效-URL-代码实现"><a href="#拦截无效-URL-代码实现" class="headerlink" title="拦截无效 URL 代码实现"></a>拦截无效 URL 代码实现</h5><blockquote><p>文件路径：router/index.js</p><p>遇到无效 URL 跳转到指定页面。</p><p><strong>注意：此拦截代码只对 vue3 以上有效，应当把这段代码加在路由最后。</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/:pathMatch(.*)&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/NotFoundView.vue&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="封装请求代码实现"><a href="#封装请求代码实现" class="headerlink" title="封装请求代码实现"></a>封装请求代码实现</h5><blockquote><p>文件路径：api/request.js</p><p>判断 sessionStorage 是否存在 token，存在则携带 token 发送请求。</p><p>判断服务器返回的状态码是否为 401，是则跳转到登录页面。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;HOST&#125; <span class="keyword">from</span> <span class="string">&quot;../config/config&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> request = axios.create(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: HOST,</span><br><span class="line">    <span class="comment">// 超时时间 5 秒</span></span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">5000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// request 拦截器</span></span><br><span class="line"><span class="comment">// 可以自请求发送前对请求做一些处理</span></span><br><span class="line"><span class="comment">// 比如统一加token，对请求参数统一加密</span></span><br><span class="line">request.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Context-Type 响应头</span></span><br><span class="line">    config.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/json;charset=utf-8&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> token = sessionStorage.getItem(<span class="string">&quot;user&quot;</span>) ? sessionStorage.getItem(<span class="string">&quot;user&quot;</span>) : <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (token)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 设置请求头</span></span><br><span class="line">        config.headers[<span class="string">&#x27;token&#x27;</span>] = token;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// response 拦截器</span></span><br><span class="line"><span class="comment">// 可以在接口响应后统一处理结果</span></span><br><span class="line">request.interceptors.response.use(</span><br><span class="line">    <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> res = response.data;</span><br><span class="line">        <span class="comment">// 如果是返回的文件</span></span><br><span class="line">        <span class="keyword">if</span> (response.config.responseType === <span class="string">&#x27;blob&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 兼容服务端返回的字符串数据</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> res === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">            res = res ? <span class="built_in">JSON</span>.parse(res) : res</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 验证不通过时给出提示</span></span><br><span class="line">        <span class="keyword">if</span> (res.code === <span class="number">401</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            alert(res.message);</span><br><span class="line">            <span class="built_in">window</span>.location.replace(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// for debug</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;err&#x27;</span> + error)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> request</span><br></pre></td></tr></table></figure><h5 id="Vuex-代码实现"><a href="#Vuex-代码实现" class="headerlink" title="Vuex 代码实现"></a>Vuex 代码实现</h5><blockquote><p>文件路径：store/index.js</p><p>在服务器验证成功后，调用 login 方法，取出响应数据里的 token 保存到 state 和 sessionStorage 中。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">user</span>: &#123;</span><br><span class="line">      <span class="attr">token</span>: <span class="built_in">window</span>.sessionStorage.getItem(<span class="string">&#x27;user&#x27;</span>) == <span class="literal">null</span> ? <span class="literal">null</span> : <span class="built_in">window</span>.sessionStorage.getItem(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录操作，把token保存到user.token，再保存token到sessionStorage。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="variable">state</span></span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="variable">token</span></span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    login (state, token) &#123;</span><br><span class="line">      state.user.token = token;</span><br><span class="line">      <span class="built_in">window</span>.sessionStorage.setItem(<span class="string">&#x27;user&#x27;</span>, token);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 退出操作，把user.token的值删除，再移除sessionStorage的token。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="variable">state</span></span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    exit (state) &#123;</span><br><span class="line">      state.user.token = <span class="literal">null</span>;</span><br><span class="line">      <span class="built_in">window</span>.sessionStorage.removeItem(<span class="string">&#x27;user&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="后端实现"><a href="#后端实现" class="headerlink" title="后端实现"></a>后端实现</h4><h5 id="后端拦截器流程图"><a href="#后端拦截器流程图" class="headerlink" title="后端拦截器流程图"></a>后端拦截器流程图</h5><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20220924B01N007.png"></p><h5 id="拦截器代码实现"><a href="#拦截器代码实现" class="headerlink" title="拦截器代码实现"></a>拦截器代码实现</h5><blockquote><p>文件路径：config/interceptor/JwtInterceptor.java</p><p>自定义业务和系统异常，若是 token 不合法，则将状态码和错误信息返回给前端。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String token = request.getHeader(Consts.TOKEN);</span><br><span class="line">        <span class="comment">// 如果不是映射到方法直接通过</span></span><br><span class="line">        <span class="keyword">if</span> (!(handler <span class="keyword">instanceof</span> HandlerMethod))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行认证</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(token)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BusinessException(Code.NOT_LOGIN_ERR, <span class="string">&quot;用户未登录&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 token 中的 user id</span></span><br><span class="line">        String userId = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            userId = JWT.decode(token).getAudience().get(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JWTDecodeException j) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BusinessException(Code.NOT_LOGIN_ERR, <span class="string">&quot;Token令牌验证失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据 token 中的 userId 查询数据库</span></span><br><span class="line">        User user = userService.getUserByAccount(userId);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BusinessException(Code.NOT_LOGIN_ERR, <span class="string">&quot;用户不存在，请重新登录&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用户密码加签验证 token</span></span><br><span class="line">        JWTVerifier jwtVerifier = JWT.require(Algorithm.HMAC256(user.getPassword())).build();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jwtVerifier.verify(token);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (JWTVerificationException e)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SystemException(Code.NOT_LOGIN_ERR, <span class="string">&quot;登录超时&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="注册拦截器"><a href="#注册拦截器" class="headerlink" title="注册拦截器"></a>注册拦截器</h5><blockquote><p>文件路径：config/WebMvcConfig.java</p><p>每个请求服务器资源的请求都将先通过拦截器。这个文件就是注册所有拦截器的文件。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 解决跨越问题</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//添加映射路径</span></span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                <span class="comment">//是否发送Cookie</span></span><br><span class="line">                .allowCredentials(<span class="keyword">true</span>)</span><br><span class="line">                <span class="comment">//设置放行哪些原始域</span></span><br><span class="line">                .allowedOriginPatterns(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                <span class="comment">//放行哪些请求方式</span></span><br><span class="line">                .allowedMethods(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;DELETE&quot;</span>&#125;)</span><br><span class="line">                <span class="comment">//.allowedMethods(&quot;*&quot;) //或者放行全部</span></span><br><span class="line">                <span class="comment">//放行哪些原始请求头部信息</span></span><br><span class="line">                .allowedHeaders(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                <span class="comment">//暴露哪些原始请求头部信息</span></span><br><span class="line">                .exposedHeaders(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加拦截器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        registry.addInterceptor(jwtInterceptor())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/users/login&quot;</span>, <span class="string">&quot;/users/register&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//  拦截器bean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JwtInterceptor <span class="title">jwtInterceptor</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JwtInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="生成-token-令牌工具类"><a href="#生成-token-令牌工具类" class="headerlink" title="生成 token 令牌工具类"></a>生成 token 令牌工具类</h5><blockquote><p>文件路径：utils/TokenUtils.java</p><p>通过 JTW 生成 token，封装成工具类。</p><p>当调用登录业务时，用 <code>TokenUtils.getToken(user.getAccount(), user.getPassword());</code> 生成 token 令牌。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenUtils</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> UserService STATIC_USER_SERVICE;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStaticUserService</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        STATIC_USER_SERVICE = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成token令牌</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sign</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getToken</span><span class="params">(String userId, String sign)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 将 userId 保存到 token 里面</span></span><br><span class="line">        <span class="keyword">return</span> JWT.create().withAudience(userId)</span><br><span class="line">                <span class="comment">// 设置 token 过期时间</span></span><br><span class="line">                .withExpiresAt(DateUtil.offsetMinute(<span class="keyword">new</span> Date(), Consts.TOKEN_TIME))</span><br><span class="line">                <span class="comment">// 把 sign 作为 token 密钥</span></span><br><span class="line">                .sign(Algorithm.HMAC256(sign));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="完整的登录流程图"><a href="#完整的登录流程图" class="headerlink" title="完整的登录流程图"></a>完整的登录流程图</h4><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20220924B01N008.png"></p><br><h3 id="未解决问题"><a href="#未解决问题" class="headerlink" title="未解决问题"></a>未解决问题</h3><blockquote><p><font color="red">输入有效但被拦截的 URL 时，地址栏会直接重定向到”/404“，而不是显示用户输入的 URL。</font>因为跳转有效 URL 时，要经过路由守卫，而路由守卫跳转都会重定向 URL。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20220924B01N009.gif"></p><br><br><p><strong>📌最后：希望本文能够给您提供帮助，文章中有不懂或不正确的地方，请在下方评论区💬留言！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 项目开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>位运算的妙用</title>
      <link href="/archives/16fe89c7.html"/>
      <url>/archives/16fe89c7.html</url>
      
        <content type="html"><![CDATA[<h3 id="常用位运算技巧"><a href="#常用位运算技巧" class="headerlink" title="常用位运算技巧"></a>常用位运算技巧</h3><blockquote><p><strong>位运算符：</strong></p><ol><li>&amp; 与：要求所有表达式的判断结果都是 1 才为 1；</li><li>| 或：要求所有表达式的判断结果都是 0 才为 0；</li><li>^ 异或：如果a、b两个值不相同，则异或结果为 1。如果a、b两个值相同，异或结果为 0；</li><li>! 非：取反。</li></ol></blockquote><h4 id="1-n-amp-n-1-的妙用"><a href="#1-n-amp-n-1-的妙用" class="headerlink" title="1. n &amp; (n - 1) 的妙用"></a>1. n &amp; (n - 1) 的妙用</h4><blockquote><p><strong>描述：</strong>将 n 的二进制表示中的最低位为 1 的改为 0 。</p><p><strong>例子：</strong> n = (1010)<sub>2</sub>、(n - 1) = (1001)<sub>2</sub>，那么 n &amp; ( n - 1) = (1000)<sub>2</sub></p></blockquote><h4 id="2-获取二进制的最高位和最低位"><a href="#2-获取二进制的最高位和最低位" class="headerlink" title="2. 获取二进制的最高位和最低位"></a>2. 获取二进制的最高位和最低位</h4><blockquote><ol><li>获取高位 n &amp; (1 &lt;&lt; 31)</li><li>获取低位 n &amp;1</li></ol></blockquote><br><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><h4 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h4><p><strong>664 · 数 1：</strong><a href="https://www.lintcode.com/problem/664/">https://www.lintcode.com/problem/664/</a></p><p><strong>描述：</strong>给出一个 <strong>非负</strong> 整数 num，对所有满足 <code>0 ≤ i ≤ num</code> 条件的数字 i 均需要计算其二进制表示中数字 1 的个数并以数组的形式返回。</p><p><strong>样例：</strong></p><p><strong>样例1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入： 5</span><br><span class="line">输出： [0,1,1,2,1,2]</span><br><span class="line">解释：</span><br><span class="line">0~5的二进制表示分别是：</span><br><span class="line">000</span><br><span class="line">001</span><br><span class="line">010</span><br><span class="line">011</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">每个数字中1的个数为： 0,1,1,2,1,2</span><br></pre></td></tr></table></figure><p><strong>样例2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入： 3</span><br><span class="line">输出： [0,1,1,2]</span><br></pre></td></tr></table></figure><p><strong>挑战</strong></p><ol><li>时间复杂度为 O(n * sizeof(integer)) 的解法很容易想到, 尝试挑战线性的时间复杂度 O(n) (只遍历一遍)。</li><li>空间复杂度应为 O(n)。</li><li>你能完成这项挑战吗? 不借助任何内嵌的函数, 比如 C++ 中的 <code>__builtin_popcount</code> 亦或是任何其他语言中的方法。</li></ol><h4 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h4><ol><li>本题是动态规划和位运算的结合；</li><li>例如 n = (10)<sub>10</sub> = (1010)<sub>2</sub>、，那么 n 中有两个 1；</li><li>运用位运算去掉 n 的最后一个 1；</li><li>即 n &amp; ( n - 1) = (1010)<sub>2</sub> &amp; (1001)<sub>2</sub> = (8)<sub>10</sub> = (1000)<sub>2</sub>；</li><li>用 dp[i] 表示 i 中有几个 1，那么由上可得 dp[10] = dp[8] + 1；</li><li>即状态转移方程为 dp[i] = dp[i &amp; (i - 1)] + 1。</li></ol><h4 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num: a non negative integer number</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: an array represent the number of 1&#x27;s in their binary</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] countBits(<span class="keyword">int</span> num) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// write your code here        </span></span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[num + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">0</span>) <span class="keyword">return</span> dp;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; dp.length; i++) </span><br><span class="line">        &#123;</span><br><span class="line">            dp[i] = dp[i &amp; (i - <span class="number">1</span>)] + <span class="number">1</span>;          </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><p><strong>📌最后：希望本文能够给您提供帮助，文章中有不懂或不正确的地方，请在下方评论区💬留言！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 算法笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="/archives/a80d0031.html"/>
      <url>/archives/a80d0031.html</url>
      
        <content type="html"><![CDATA[<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><blockquote><p>动态规划是把原问题分解为相对简单的子问题的方式求解复杂问题的方法。常常用于解决有重叠子问题和最优子结构性质的问题。</p></blockquote><p><strong>🔍解题步骤：</strong>确定状态、设计状态转移方程、考虑初始条件和边界情况、计算顺序、优化代码。</p><p>在使用动态规划解题时，我们需要思考：</p><p>❓ 什么是“已知态”？</p><p>❓ 什么是“未知态”？</p><p>❓ 通过“已知态”如何去获取“未知态”？</p><h2 id="✅解题步骤一：确定状态。"><a href="#✅解题步骤一：确定状态。" class="headerlink" title="✅解题步骤一：确定状态。"></a>✅解题步骤一：确定状态。</h2><p>🔖 动态规划其实就是通过“❗已知态”去获取“❓未知态”的状态转移算法。通过一个“📝备忘录”去记录“状态”，在下次需要的时候不需要重新计算，可以直接使用。</p><p>👉 确定状态一般三个步骤：</p><ol><li>研究最优策略的最后一步，一般是列举最后一步的所有可能进行分析。</li><li>通过研究最后一步与倒数第二步或第三步…之间的关系发现规律，化为子问题。在这个过程中，我们需要确定“已知态”和“未知态”。</li><li>根据子问题来创建状态数组保存“已知态”。一般来说，子问题有几个变量就是几维数组。</li></ol><p>❗ 最关键的地方就是要<strong>确定状态数组的每个元素表示什么</strong>。状态数组通常是 <code>dp[i]</code> 或 <code>dp[i][j]</code>。</p><h2 id="✅解题步骤二：设计状态转移方程。"><a href="#✅解题步骤二：设计状态转移方程。" class="headerlink" title="✅解题步骤二：设计状态转移方程。"></a>✅解题步骤二：设计状态转移方程。</h2><p>🔖 动态规划中本阶段的状态往往是上一阶段状态和上一阶段决策的结果。状态转移方程就是用来表示它们的公式。换言之就是设计出一个递推公式。</p><p>❗ 设计状态转移方程就是思考“如何通过 <em>已知态</em> 去获取 <em>未知态</em> ？”，并将它们的关系用公式表示出来。这也是动态规划中最关键的一步。</p><h2 id="✅解题步骤三：初始条件和边界情况。"><a href="#✅解题步骤三：初始条件和边界情况。" class="headerlink" title="✅解题步骤三：初始条件和边界情况。"></a>✅解题步骤三：初始条件和边界情况。</h2><p>🔖 初始条件：用状态转移方程无法计算出来，但我们又需要它的定义。即<strong>给出递推公式的基本条件</strong>。</p><p>🔖 边界情况：根据题目和状态转移方程判断边界情况，<strong>剔除出界情况</strong>。</p><h2 id="✅解题步骤四：计算顺序。"><a href="#✅解题步骤四：计算顺序。" class="headerlink" title="✅解题步骤四：计算顺序。"></a>✅解题步骤四：计算顺序。</h2><p>❗ 通过思考“要想计算本次状态还需要依靠哪些状态”来确定计算顺序。换句话说，就是确定计算顺序要利用之前得出的结果来判断。一般是从小到大，从上到下，从左到右。</p><h2 id="✅解题步骤五：优化代码。"><a href="#✅解题步骤五：优化代码。" class="headerlink" title="✅解题步骤五：优化代码。"></a>✅解题步骤五：优化代码。</h2><p>🔖 动态规划可以说是一种“空间换时间”的算法。所以对于优化动态规划代码。我们可以选择：</p><p>👉 优化空间：减少状态转移变量的记录数。例如，那些只需要使用一次的转移状态变量，可以在使用后，通过覆盖的方式让其去记录新的状态转移变量。这样就可以减少内存消耗。</p><p>👉 优化时间：减少状态转移的时间。例如，用更好的算法去减少计算递推式的时间。</p><p>❗ 在使用动态规划解题时，应该先解题再优化，把解题放在第一位。</p><br><br><h1 id="例题训练"><a href="#例题训练" class="headerlink" title="例题训练"></a>例题训练</h1><h2 id="爬楼梯"><a href="#爬楼梯" class="headerlink" title="爬楼梯"></a>爬楼梯</h2><h3 id="🔍题目要求"><a href="#🔍题目要求" class="headerlink" title="🔍题目要求"></a>🔍题目要求</h3><p><strong>难度：</strong><font color="green">简单</font> | <code>LeetCode</code> | 🔗<a href="https://leetcode.cn/problems/climbing-stairs/">链接直达</a></p><p>假设你正在爬楼梯。需要 <code>n</code> 阶你才能到达楼顶。</p><p>每次你可以爬 <code>1</code> 或 <code>2</code> 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><p><strong>📃示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 2</span><br><span class="line">输出：2</span><br><span class="line">解释：有两种方法可以爬到楼顶。</span><br><span class="line">1. 1 阶 + 1 阶</span><br><span class="line">2. 2 阶</span><br></pre></td></tr></table></figure><p><strong>📃示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 3</span><br><span class="line">输出：3</span><br><span class="line">解释：有三种方法可以爬到楼顶。</span><br><span class="line">1. 1 阶 + 1 阶 + 1 阶</span><br><span class="line">2. 1 阶 + 2 阶</span><br><span class="line">3. 2 阶 + 1 阶</span><br></pre></td></tr></table></figure><p><strong>🎗️提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 45</code></li></ul><h3 id="💡题目分析"><a href="#💡题目分析" class="headerlink" title="💡题目分析"></a>💡题目分析</h3><p>1️⃣ 在该题目中，最后一步是走到第 n 阶。那么它的上一步可能是第 n - 1 阶也可能是第 n - 2 阶。因为我们可以走一步或者走两步。</p><ul><li>假设为第 n - 1 阶，那么能到达第 n 阶的方法只有一种，即“走一步”。</li><li>假设为第 n - 2 阶，那么能到达第 n 阶的方法有两种，即“一步一步走”或“一次走两步”。</li></ul><p>那么继续对倒数第二步（第 n - 1 阶 或第 n - 2 阶）分析，我们也能得出类似的结果。那么我们就能够推断出第 n 阶只与第 n - 1 阶和第 n - 2 阶有关。</p><p>要想知道走到第 n 阶有多少种不同的方法，那么首先就要知道走到第 n - 1 阶和第 n - 2 阶有多少不同的方法。“未知态”就是走到第 n 阶有多少种不同的方法；“已知态”就是走到第 n - 1 阶和第 n - 2 阶有种多少不同的方法。那么就可以得出状态数组 <code>dp[i]</code> 表示走到第 i 阶有多少种不同的方法。</p><p>2️⃣ 通过“状态数组 <code>dp[i]</code> 表示走到第 i 阶有多少种不同的方法”和“要想知道走到第 i 阶有多少种不同的方法，那么首先就要知道走到第 i - 1 阶和第 i - 2 阶有多少不同的方法。”，我们能够得出状态转移方程为：<code>dp[i] = dp[i - 1] + dp[i - 2]</code>。</p><p>3️⃣ 初始条件为 <code>dp[1]</code> 和 <code>dp[2]</code>，因为我们无法用之前的状态得出它们的值。那么边界条件也显而易见了，为 <code>i &gt;= 3</code>。</p><p>4️⃣ 由于需要根据 f(i - 1) 和 f(i - 2) 得出 f(i)，那么计算顺序就是 f(1) -&gt; f(n)。</p><h3 id="⌨️代码实现"><a href="#⌨️代码实现" class="headerlink" title="⌨️代码实现"></a>⌨️代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> dp[] = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i] = dp[i - <span class="number">2</span>] + dp[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="♻️代码优化"><a href="#♻️代码优化" class="headerlink" title="♻️代码优化"></a>♻️代码优化</h3><p>从上述代码中可以看到，它利用到的状态只有 <code>dp[i - 2]</code> 和 <code>dp[i - 1]</code>，那么就可以简化为两个变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> dp1 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> dp2 = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            tmp = dp2;</span><br><span class="line">            dp2 = dp1 + dp2;</span><br><span class="line">            dp1 = tmp; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;      </span><br></pre></td></tr></table></figure><br><h2 id="最长回文子串"><a href="#最长回文子串" class="headerlink" title="最长回文子串"></a>最长回文子串</h2><h3 id="🔍题目要求-1"><a href="#🔍题目要求-1" class="headerlink" title="🔍题目要求"></a>🔍题目要求</h3><p><strong>难度：</strong><font color="orange">中等</font> | <code>LeetCode</code> | 🔗<a href="https://leetcode.cn/problems/longest-palindromic-substring/">链接直达</a></p><p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p><p>如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。</p><p><strong>📃示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;babad&quot;</span><br><span class="line">输出：&quot;bab&quot;</span><br><span class="line">解释：&quot;aba&quot; 同样是符合题意的答案。</span><br></pre></td></tr></table></figure><p><strong>📃示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;cbbd&quot;</span><br><span class="line">输出：&quot;bb&quot;</span><br></pre></td></tr></table></figure><p><strong>🎗️提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 1000</code></li><li><code>s</code> 仅由数字和英文字母组成</li></ul><h3 id="💡题目分析-1"><a href="#💡题目分析-1" class="headerlink" title="💡题目分析"></a>💡题目分析</h3><p>1️⃣ 最优决策下的最后一步是“最长回文子串的第一个字符的下标为 i，最后一个字符下标为 j。这里用 f(i, j) 表示下标从 i 到 j 为最长回文子串（包含 i 和 j）。依此类推，倒数第二步就是 f(i + 1, j - 1)，倒数第三步就是 f(i + 2, j - 2)…</p><p>从中我们可以看出，要想 f(i, j) 成立，就必须满足“f(i + 1, j - 1) 成立”和“s[i] == s[j]”。<font color="gray">s[i] 表示字符串的第 i 个字符。</font></p><p>那么就能得出“已知态”就是 f(i + 1, j - 1)，“未知态”就是 f(i, j)。使用状态数组 <code>dp[i][j]</code> 来保存“已知态”。<code>dp[i][j]</code> 表示下标从 i 到 j 的字符子串，如果是回文子串则为 <code>true</code>。<font color="gray">因为我们假定 f(i, j) 表示 i 到 j 为最长回文子串是最优策略。所以在非最优策略的时候，f(i, j) 表示的应该是下标从 i 到 j 的字符子串，并不一定是回文子串。</font></p><p>2️⃣ 根据“状态数组 <code>dp[i][j]</code>”和“要想 <code>dp[i][j]</code> 成立，就必须满足 <code>dp[i + 1][j - 1] == true</code> 和 <code>s[i] == s[j]</code>。”可以得出状态转移方程为：<code>dp[i][j] = dp[i + 1][j - 1] &amp;&amp; s[i] == s[j]</code>。</p><p>3️⃣ 对于初始条件和边界情况的判断，需要先列一个 <code>dp表格</code>，这里假设字符串长度为 7，如下表：</p><table><thead><tr><th align="center">0</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th></tr></thead><tbody><tr><td align="center">✔️</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"><code>end</code></td></tr><tr><td align="center">❌</td><td align="center">✔️</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">❌</td><td align="center">❌</td><td align="center">✔️</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">❌</td><td align="center">❌</td><td align="center">❌</td><td align="center">✔️</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">❌</td><td align="center">❌</td><td align="center">❌</td><td align="center">❌</td><td align="center">✔️</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">❌</td><td align="center">❌</td><td align="center">❌</td><td align="center">❌</td><td align="center">❌</td><td align="center">✔️</td><td align="center"></td></tr><tr><td align="center">❌</td><td align="center">❌</td><td align="center">❌</td><td align="center">❌</td><td align="center">❌</td><td align="center">❌</td><td align="center">✔️<code>start</code></td></tr></tbody></table><p>上述表格中，❌表示错误情况，不需要考虑；✔️表示我们需要计算的 <code>true</code>，✖️表示我们需要计算的 <code>false</code>；<code>start</code> 和 <code>end</code> 分别表示开始遍历的起点和终点。</p><p>💡那么可以得出以下几种情况：</p><ol><li>i &gt; j：错误情况，下标不可能存在 i &gt; j 的情况，这样子串就变成逆序了，故排除。</li><li>i = j：即只有一个字符时，永远为回文子串，所以 <code>dp[i][j]</code> 为 <code>true</code>。</li><li>i &lt; j：使用状态转移方程 <code>dp[i][j] = dp[i + 1][j - 1] &amp;&amp; s[i] == s[j]</code> 进行判断。<ul><li><code>s[i] != s[j]</code>：必为 <code>false</code>。</li><li><code>s[i] == s[j] &amp;&amp; i + 1 == j</code>：即两个字符，且两个字符相等时，永远为回文子串，所以 <code>dp[i][j]</code> 为 <code>true</code>。</li><li><code>s[i] == s[j] &amp;&amp; i + 1 &lt; j</code>： <code>dp[i][j] = dp[i + 1][j - 1]</code>。</li></ul></li></ol><p>边界条件：<code>0 &lt;= i &lt;= j &lt; s.length()</code>。</p><p>💡假设要求 <code>dp[0][6]</code> 那么就要先求 <code>dp[1][5]</code>，还要先求 <code>dp[2][3]</code>。那么我们就知道，要求表格上面的值时，应该先求表格下面的值。</p><p>初始条件：<code>i = s.length() - 1</code>、<code>j = i</code>。</p><p>4️⃣ 根据上面的分析和表格，我们可以得出计算顺序是“从下到上”、“从左到右”。</p><h3 id="⌨️代码实现-1"><a href="#⌨️代码实现-1" class="headerlink" title="⌨️代码实现"></a>⌨️代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line">        <span class="keyword">if</span> (len &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[len][len];</span><br><span class="line">        <span class="comment">/** 回文子串的字符数量（最长回文子串长度） */</span></span><br><span class="line">        <span class="keyword">int</span> maxLen = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">/** 回文子串的开始下标 */</span></span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; len; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == j) &#123;</span><br><span class="line">                    dp[i][j] = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.charAt(i) != s.charAt(j)) &#123;</span><br><span class="line">                    dp[i][j] = <span class="keyword">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = i + <span class="number">1</span> == j ? s.charAt(i) == s.charAt(j) : dp[i + <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">    <span class="comment">// 如果当前子串是回文子串且长度比最长回文子串的长度长，则更新下标。</span></span><br><span class="line">                <span class="keyword">if</span> (dp[i][j] &amp;&amp; (j - i + <span class="number">1</span>) &gt;= maxLen) &#123;</span><br><span class="line">                    start = i;</span><br><span class="line">                    maxLen = j - i + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果无回文子串，则返回第一个字符</span></span><br><span class="line">        <span class="keyword">return</span> s.substring(start, start + maxLen);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="♻️代码优化-1"><a href="#♻️代码优化-1" class="headerlink" title="♻️代码优化"></a>♻️代码优化</h3><p>暂时想不到应该如何优化…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;优化代码&gt;</span><br></pre></td></tr></table></figure><br><h2 id="最长递增子序列"><a href="#最长递增子序列" class="headerlink" title="最长递增子序列"></a>最长递增子序列</h2><h3 id="🔍题目要求-2"><a href="#🔍题目要求-2" class="headerlink" title="🔍题目要求"></a>🔍题目要求</h3><p><strong>难度：</strong><font color="orange">中等</font> | <code>LeetCode</code> | 🔗<a href="https://leetcode.cn/problems/longest-increasing-subsequence/">链接直达</a></p><p>给你一个整数数组 <code>nums</code> ，找到其中最长严格递增子序列的长度。</p><p><strong>子序列</strong> 是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。</p><p>例如，<code>[3,6,2,7]</code> 是数组 <code>[0,3,1,6,2,2,7]</code> 的子序列。</p><p><strong>📃示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [10,9,2,5,3,7,101,18]</span><br><span class="line">输出：4</span><br><span class="line">解释：最长递增子序列是 [2,3,7,101]，因此长度为 4 。</span><br></pre></td></tr></table></figure><p><strong>📃示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,1,0,3,2,3]</span><br><span class="line">输出：4</span><br></pre></td></tr></table></figure><p><strong>📃示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [7,7,7,7,7,7,7]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>🎗️提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 2500</code></li><li>-10<sup>4</sup> &lt;= <code>nums[i]</code> &lt;= 10<sup>4</sup></li></ul><p><strong>🆙进阶：</strong></p><ul><li>你能将算法的时间复杂度降低到 <code>O(n log(n))</code> 吗?</li></ul><h3 id="💡题目分析-2"><a href="#💡题目分析-2" class="headerlink" title="💡题目分析"></a>💡题目分析</h3><p>1️⃣ 最优策略下的最后一步：下标为 i 的元素是最长严格递增子序列的最后一个数，长度为 n。这里用 f(i) = n 来表示。那么倒数第二步则为 f(j) = n - 1，倒数第三步则为 f(k) = n - 2 …</p><p>在这些最优决策的步骤下，包含以下关系：</p><ol><li>i &gt; j &gt; k。</li><li>f(k) + 2 = f(j) + 1 = f(i) + 1。</li></ol><p>那么，要想得到 f(i) 的值，就要先求 f(j) 的值。</p><p>所以，可以看出“已知态”就是 f(j)，“未知态”就是 f(i)。状态数组 <code>dp[i]</code> 用来表示以下标 i 结尾的最长严格递增子序列的长度。</p><p>2️⃣ 从上述中，我们总结出几点：</p><ul><li><code>j &lt; i</code>：j 与 i 不一定是相邻的，但是它们一定是连续的。</li><li><code>nums[j] &lt; nums[i]</code>：i 所指向的数一定是大于 j 所指向的数，因为是递增子序列。</li><li><code>dp[i]</code>：意味着在以下标 i 结束的递增子序列中，长度最长。</li></ul><p>那么，状态转移方程：在满足 <code>nums[j] &lt; nums[i]</code>（递增）的情况下，<code>dp[i] = max&#123;dp[0], ..., dp[i - 1]&#125; + 1</code>。</p><p>3️⃣ 通过上述状态转移方程可以得知，我们需要一个循环 <code>i</code> 用来遍历 <code>nums数组</code>，另一个循环 <code>j</code> 用来往回遍历 <code>dp数组</code>。那么初始条件：<code>dp[0] = 1</code>、<code>i = 1</code>、<code>j = i - 1</code>；边界条件: <code>nums.length &gt; i &gt; j &gt;= 0</code>。</p><p>4️⃣ 计算顺序：<code>i</code> 从左到右遍历 <code>nums数组</code>，<code>j</code> 从右到左比较 <code>dp数组</code>。</p><h3 id="⌨️代码实现-2"><a href="#⌨️代码实现-2" class="headerlink" title="⌨️代码实现"></a>⌨️代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dp[j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    dp[j] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] &gt; nums[j]) &#123;</span><br><span class="line">                    dp[i] = Math.max(dp[j] + <span class="number">1</span>, dp[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 获取最长严格递增子序列的长度</span></span><br><span class="line">            max = Math.max(max, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="♻️代码优化-2"><a href="#♻️代码优化-2" class="headerlink" title="♻️代码优化"></a>♻️代码优化</h3><p>暂时想不到应该如何优化…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;优化代码&gt;</span><br></pre></td></tr></table></figure><br><h2 id="lt-题目-gt"><a href="#lt-题目-gt" class="headerlink" title="&lt;题目&gt;"></a>&lt;题目&gt;</h2><h3 id="🔍题目要求-3"><a href="#🔍题目要求-3" class="headerlink" title="🔍题目要求"></a>🔍题目要求</h3><p><strong>难度：</strong><font color="green">简单</font> | <font color="orange">中等</font> | <font color="red">困难</font> | <code>&lt;来源&gt;</code> | 🔗<a href="%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80">链接直达</a></p><p>&lt;题目要求&gt;</p><p><strong>📃示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;示例&gt;</span><br></pre></td></tr></table></figure><p><strong>🎗️提示：</strong></p><ul><li>&lt;提示&gt;</li></ul><h3 id="💡题目分析-3"><a href="#💡题目分析-3" class="headerlink" title="💡题目分析"></a>💡题目分析</h3><p>&lt;具体的题目分析&gt;1️⃣2️⃣3️⃣4️⃣ </p><h3 id="⌨️代码实现-3"><a href="#⌨️代码实现-3" class="headerlink" title="⌨️代码实现"></a>⌨️代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;代码实现&gt;</span><br></pre></td></tr></table></figure><h3 id="♻️代码优化-3"><a href="#♻️代码优化-3" class="headerlink" title="♻️代码优化"></a>♻️代码优化</h3><p>&lt;优化描述&gt;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;优化代码&gt;</span><br></pre></td></tr></table></figure><br><br><p><strong>📌最后：希望本文能够给您提供帮助，文章中有不懂或不正确的地方，请在下方评论区💬留言！</strong> </p><p><strong>🔗参考文献：</strong></p><p>▶️ <a href="https://www.bilibili.com/video/BV1xb411e7ww/?spm_id_from=333.337.search-card.all.click&vd_source=a9a236c4d6e5c5350c70b71ee0727b8c">bilibili - 【动态规划专题班】ACM总冠军、清华+斯坦福大神带你入门动态规划算法；侯卫东. –九章算法</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 算法笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ const理解</title>
      <link href="/archives/9e115568.html"/>
      <url>/archives/9e115568.html</url>
      
        <content type="html"><![CDATA[<h3 id="const-的作用"><a href="#const-的作用" class="headerlink" title="const 的作用"></a>const 的作用</h3><p>使用类型修饰符 <strong>const</strong> 说明的类型成为常类型，常类型的变量或对象的值是不能被更新的。所以在编程过程中存在保持不变的值时应当用 <strong>const</strong> 限定。</p><br><h3 id="const-的基本使用"><a href="#const-的基本使用" class="headerlink" title="const 的基本使用"></a>const 的基本使用</h3><p><strong>注意：因为 const 对象一旦创建后其值就不能再改变，所以 const 对象必须要初始化。</strong></p><p>初始化 bufsize 的值：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> bufSize = <span class="number">512</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;bufSize = &quot;</span> &lt;&lt; bufSize;</span><br><span class="line"><span class="comment">// 输出：bufSize = 512</span></span><br></pre></td></tr></table></figure><br><h3 id="默认状态下，const-对象仅在文件内有效"><a href="#默认状态下，const-对象仅在文件内有效" class="headerlink" title="默认状态下，const 对象仅在文件内有效"></a>默认状态下，const 对象仅在文件内有效</h3><p><strong>注意：如果想在多个文件之间共享 const 对象，必须在变量的定义之前添加 extern 关键字。</strong></p><p>解决 const 对象仅在文件内有效的方法：<strong>对于 const 变量不管是声明还是定义都添加 extern 关键字</strong>，这样只需定义一次就行。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file1.cpp</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">int</span> ext = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// file2.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">int</span> ext;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; ext &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：12</span></span><br></pre></td></tr></table></figure><br><h3 id="const-的引用"><a href="#const-的引用" class="headerlink" title="const 的引用"></a>const 的引用</h3><blockquote><p>“对 const 的引用”简称为“常量引用”。</p></blockquote><p>把引用绑定到 const 对象上，就像绑定到其他对象上一样，称为<strong>对常量的引用</strong>。与普通引用不同，对常量的引用不能被用作修改它所绑定的对象：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ci = <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>&amp; r1 = ci; <span class="comment">// 正确：引用和它对应的对象都是常量</span></span><br><span class="line">r1 = <span class="number">42</span>; <span class="comment">// 错误：r1 是对常量的引用，r1 是不可修改的左值</span></span><br><span class="line"><span class="keyword">int</span>&amp; r2 = ci; <span class="comment">// 错误：试图让一个非常量引用指向一个常量对象，将 &quot;int&amp;&quot; 类型的引用绑定到 &quot;const int&quot; 类型的初始值设定项时，限定符被丢弃</span></span><br></pre></td></tr></table></figure><p><strong>注意：引用的类型必须与其所引用的对象类型一致。</strong>但是存在两种例外。</p><p>在初始化<strong>常量引用</strong>时<strong>允许用任意表达式作为初始量</strong>，只要该表达式的结果能转换成引用的类型即可。尤其，允许为一个常量引用绑定非常量的对象、字面量、甚至是个一般表达式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>&amp; r1 = i; <span class="comment">// 允许将 const int&amp; 绑定到一个普通 int 对象上</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>&amp; r2 = <span class="number">42</span>; <span class="comment">// 正确：r2 是一个常量引用</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>&amp; r3 = r1 * <span class="number">2</span>; <span class="comment">// 正确：r3 是一个常量引用</span></span><br><span class="line"><span class="keyword">int</span>&amp; r4 = r1 * <span class="number">2</span>; <span class="comment">// 错误：r4 是一个普通的非常量引用，非常量引用的初始值必须为左值（可修改的值）</span></span><br></pre></td></tr></table></figure><p><strong>常量引用（对 const 的引用）可能引用一个并非 const 的对象</strong></p><p><strong>常量引用仅对引用可参与的操作做出了限定</strong>，对引用的对象本身是不做限定的。因为对象也可能是个非常量，所以允许通过其他途径改变它的值：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">int</span>&amp; r1 = i; <span class="comment">// 引用 ri 绑定对象 i</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>&amp; r2 = i; <span class="comment">// r2 也绑定对象 i，但是不允许通过 r2 修改 i 的值</span></span><br><span class="line">r1 = <span class="number">0</span>; <span class="comment">// r1 并非常量引用，i 的值修改为 0</span></span><br><span class="line">r2 = <span class="number">0</span>; <span class="comment">// 错误：r2 是一个常量引用</span></span><br></pre></td></tr></table></figure><p><font color="red">为什么常量引用可以绑定一个与其类型不一样的对象呢？</font></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> i = <span class="number">42.5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>&amp; r1 = i; <span class="comment">// 正确：输出 42</span></span><br><span class="line"><span class="keyword">int</span>&amp; r2 = i; <span class="comment">// 错误：无法用 &quot;double&quot; 类型的值初始化 &quot;int&amp;&quot; 类型的引用(非常量限定)</span></span><br></pre></td></tr></table></figure><p>因为要保证 r1 能够绑定一个整型，会先把 i 赋值给一个整型的临时量，再让 r1 绑定这个临时量。由于 r1 绑定的是临时量而非 i，这就让引用失去了它原本的含义，所以 C++ 也把这种行为归为非法。如果是常量引用，这个引用无法被修改，自然就不会破坏引用的意义。</p><p><strong>拓展：</strong></p><ul><li>左值是可寻址的变量；</li><li>右值一般是不可寻址的常量；</li><li>左值一般可以被修改，而右值不能。</li></ul><br><h3 id="指针和-const"><a href="#指针和-const" class="headerlink" title="指针和 const"></a>指针和 const</h3><p><strong>与 const 相关的指针：</strong></p><ol><li><code>const int * p</code> 或者 <code>int const * p</code>：指向 const 对象的指针或者说是指向常量的指针。</li><li><code>int * const p</code>：常量指针、const 指针。</li><li><code>const int * const p</code>：指向常量对象的常量指针。</li></ol><p><strong>从上面我们可以看出，当 <code>*</code> 比 const 离变量名更近时说明它先是一个指针，称为指向常量的指针；当 const 比 <code>*</code> 离变量名更近时说明它先是一个常量，称为常量指针。</strong></p><h4 id="指向常量的指针"><a href="#指向常量的指针" class="headerlink" title="指向常量的指针"></a>指向常量的指针</h4><p><strong>指向常量的指针</strong>不能用于改变其所指对象的值。<strong>要想存放常量对象的地址，只能使用指向常量的指针。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="number">3.14</span>; <span class="comment">// PI 是一个常量，它的值不能改变</span></span><br><span class="line"><span class="keyword">double</span>* ptr = &amp;PI; <span class="comment">// 错误：ptr 是一个普通指针，&quot;const double *&quot; 类型的值不能用于初始化 &quot;double *&quot; 类型的实体</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span>* p = <span class="number">10.0</span>; <span class="comment">// 错误：&quot;double&quot; 类型的值不能用于初始化 &quot;const double *&quot; 类型的实体</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span>* cptr = &amp;PI; <span class="comment">// 正确：cptr 可以指向一个双精度常量</span></span><br><span class="line">*cptr = <span class="number">42</span>; <span class="comment">// 错误：不能给 *cptr 赋值，表达式必须是可修改的左值</span></span><br></pre></td></tr></table></figure><p>和<strong>引用</strong>一样，<strong>指针的类型必须与其所引用的对象类型一致</strong>，但是允许一个<strong>指向常量的指针</strong>指向一个<strong>非常量对象</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="number">3.14</span>; <span class="comment">// PI 是一个常量，它的值不能改变</span></span><br><span class="line"><span class="keyword">double</span> dval = <span class="number">3.14</span>; <span class="comment">// dval 是一个双精度浮点数，它的值可以改变</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span>* cptr = &amp;PI; <span class="comment">// 正确：cptr 可以指向一个双精度常量</span></span><br><span class="line">cptr = &amp;dval; <span class="comment">// 正确：但是不能通过 cptr 改变 dval 的值</span></span><br></pre></td></tr></table></figure><p><strong>注意：虽然不能给 <code>*cptr</code> 赋值，但是我们可以让 <code>cptr</code> 重新指向新的双精度常量。</strong></p><p>和<strong>常量引用</strong>一样，所谓<strong>指向常量的指针</strong>仅仅只是<strong>不允许通过该指针去修改对象的值</strong>，并没有限制用其他途径去修改对象的值。</p><h4 id="const-指针"><a href="#const-指针" class="headerlink" title="const 指针"></a>const 指针</h4><p>指针是对象而引用不是，因此<strong>允许把指针本身定义为常量</strong>。<strong>常量指针</strong>必须<strong>初始化</strong>，而且一旦初始化完成，则它的值（也就是存放在指针中的那个地址）就不能再改变了。把 <code>*</code> 放在 <strong>const</strong> 关键字之前说明指针是一个常量，即不变的是指针本身，而非指针指向的值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> errNum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span>* <span class="keyword">const</span> curErr = &amp;errNum; <span class="comment">// curErr 将一直指向 errNum</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span>* <span class="keyword">const</span> pip = &amp;PI; <span class="comment">// pip 是一个指向常量对象的常量指针</span></span><br></pre></td></tr></table></figure><p><strong>注意：常量指针并不意味着不能用指针修改所指向对象的值。</strong></p><p>如果我们用常量指针去指向一个常量，也会出现错误，因为常量指针是可以修改指向对象的值的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span>* <span class="keyword">const</span> p = &amp;num; <span class="comment">// 错误：&quot;const int*&quot; 类型的值不能用于初始化 &quot;int *const&quot; 类型的实体</span></span><br></pre></td></tr></table></figure><p>所以我们可以总结出：</p><ol><li>如果想要用指针指向常量，我们应该用<strong>指向常量的指针</strong>。</li><li>如果只想无法通过指针去修改指向对象的值，我们应该用<strong>常量指针</strong>，前提是指向的对象是一个非常量。</li></ol><br><h3 id="顶层-const-和底层-const"><a href="#顶层-const-和底层-const" class="headerlink" title="顶层 const 和底层 const"></a>顶层 const 和底层 const</h3><p><strong>top-level 顶层 const:</strong> 指针本身是个常量（常量指针）。</p><p><strong>low-level 底层 const:</strong> 指针所指向的对象是个常量（指向常量的指针）。</p><p><strong>引用就是一个常量指针，不能更改绑定的对象地址；若是常量引用（即 <code>const&amp;</code> ），能绑定常量，并且不能用常量引用修改对象的值，但是如果对象不是常量，则可以用其他方式可以修改。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span>* <span class="keyword">const</span> p1 = &amp;i; <span class="comment">// 不能改变 p1 的值，只是一个顶层 const（常量指针）</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> c1 = <span class="number">42</span>; <span class="comment">// 不能改变 c1 的值，只是一个顶层 const（常量）</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>* p2 = &amp;c1; <span class="comment">// 允许改变 p2 的值，只是一个低层 const（指向常量的指针）</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>* <span class="keyword">const</span> p3 = p2; <span class="comment">// 靠右的 const 是顶层 const，靠左的是底层 const（指向常量对象的常量指针）</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>&amp; r = c1; <span class="comment">// 用于声明引用的 const 都是底层 const（常量引用）</span></span><br></pre></td></tr></table></figure><p>在拷贝对象时，<strong>顶层 const</strong> 和<strong>底层 const</strong> 的限制有所不同：</p><ol><li><strong>顶层 const</strong> 对拷贝对象时，<strong>无影响</strong>；因为拷贝对象时，并不会修改被拷贝对象的值，所以无论是拷入还是拷出的对象是否为常量都没有什么影响。</li><li><strong>底层 const</strong> 对拷贝对象时，<strong>有影响</strong>；拷入和拷出必须具有相同的<strong>底层 const</strong> 资格，或者两个对象的数据类型必须能转换。一般来说，非常量可以转换成常量，反之不行。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> c1 = <span class="number">42</span>; <span class="comment">// 不能改变 c1 的值，只是一个顶层 const（常量）</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>* p2 = &amp;c1; <span class="comment">// 允许改变 p2 的值，只是一个低层 const（指向常量的指针）</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>* <span class="keyword">const</span> p3 = p2; <span class="comment">// 靠右的 const 是顶层 const，靠左的是底层 const（指向常量对象的常量指针）</span></span><br><span class="line"><span class="comment">// 顶层 const</span></span><br><span class="line">i = c1; <span class="comment">// 正确：拷贝 c1 的值，c1 是一个顶层 const，对此无影响</span></span><br><span class="line">p2 = p3; <span class="comment">// 正确：p2 和 p3 所指向的对象类型相同，p3 顶层 const 的部分不受影响</span></span><br><span class="line"><span class="comment">// 底层 const</span></span><br><span class="line"><span class="keyword">int</span>* p = p3; <span class="comment">// 错误：p3 包含底层 const 的定义，而 p 没有</span></span><br><span class="line">p2 = p3; <span class="comment">// 正确：p2 和 p3 都是底层 const</span></span><br><span class="line">p2 = &amp;i; <span class="comment">// 正确：int* 能转换成 const int*</span></span><br><span class="line"><span class="keyword">int</span>&amp; r = c1; <span class="comment">// 错误：普通的 int&amp; 不能绑定到 int 常量上</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>&amp; r2 = i; <span class="comment">// 正确：const int&amp; 可以绑定到一个普通的 int 上</span></span><br></pre></td></tr></table></figure><p>总之就是要考虑在拷贝后会不会影响原来对象的原有限制。</p><br><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>在编程过程中存在保持不变的值时应当用 <strong>const</strong> 限定。</li><li>因为 <strong>const</strong> 对象一旦创建后其值就<strong>不能再改变</strong>，所以 <strong>const</strong> 对象必须要<strong>初始化</strong>。</li><li>如果想在多个文件之间共享 <strong>const</strong> 对象，必须在变量的定义之前添加 <strong>extern</strong> 关键字。</li><li>用<strong>常量引用</strong>绑定对象，无法通过<strong>常量引用</strong>修改对象的值；但如果对象是个非常量的话，可以通过其他途径修改对象的值。</li><li>在初始化<strong>常量引用</strong>时允许用<strong>任意表达式</strong>作为初始量，只要该表达式的结果能转换成引用的类型即可。</li><li><strong>const 和指针：</strong><ul><li><code>const char * p</code> 或者 <code>char const * p</code>：指向常量的指针，不允许通过该指针去修改对象的值。</li><li><code>char * const p</code>：常量指针，初始化后存放在指针中的那个地址不能再改变。</li><li>要想存放常量对象的地址，只能使用<strong>指向常量的指针</strong>，允许一个<strong>指向常量的指针</strong>指向一个<strong>非常量对象</strong>。</li><li>虽然不能给<strong>指向常量的指针</strong>赋值，但是我们可以让<strong>指向常量的指针</strong>重新指向新的双精度常量。</li><li><strong>常量指针</strong>必须<strong>初始化</strong>，而且一旦初始化完成，则它的值（也就是存放在指针中的那个地址）就不能再改变了。</li><li><strong>常量指针</strong>并不意味着不能用指针修改所指向对象的值。</li><li>如果想要用指针指向常量，我们应该用<strong>指向常量的指针</strong>。</li><li>如果只想无法通过指针去修改指向对象的值，我们应该用<strong>常量指针</strong>，前提是指向的对象是一个非常量。</li></ul></li><li><strong>top-level 顶层 const：</strong>指针本身是个常量（常量指针）。</li><li><strong>low-level 底层 const：</strong> 指针所指向的对象是个常量（指向常量的指针）。</li><li>在拷贝对象时，<strong>顶层 const 无影响</strong>，而<strong>底层 const 有影响</strong>；拷入和拷出必须具有相同的<strong>底层 const</strong> 资格，或者两个对象的数据类型必须能转换。一般来说，非常量可以转换成常量，反之不行。</li></ol><br><br><p><strong>📌最后：希望本文能够给您提供帮助，文章中有不懂或不正确的地方，请在下方评论区💬留言！</strong></p><p><strong>🔗参考文献：</strong></p><p>📖 C++  Primer中文版  第5版 [（美）李普曼，（美）拉乔伊，（美）默著][电子工业出版社][2013.08][838页]</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Const </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 学习笔记</title>
      <link href="/archives/3c3cdb74.html"/>
      <url>/archives/3c3cdb74.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近用 GitHub 搭建了个人博客，顺便再回顾一下之前了解过但是没熟练掌握的 Git ，本篇主要是记录关于 Git 的一些命令和技巧，学习途径——<strong>廖雪峰Git教程</strong>，详细教程可以阅读<a href="https://www.liaoxuefeng.com/wiki/896043488029600" title="廖雪峰Git教程">廖雪峰Git教程</a>。</p><p><strong>git 新更改：</strong> <code>git checkout</code> 可替换命令 <code>git switch</code> 和 <code>git restore</code> ，这里的笔记以新更改为主。</p><br><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><blockquote><p>–global：设置全局变量，局部变量则无需 <code>--global</code> 参数。</p></blockquote><h4 id="设置用户信息"><a href="#设置用户信息" class="headerlink" title="设置用户信息"></a>设置用户信息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;用户名&quot;</span><br><span class="line">git config --global user.email &quot;用户邮箱&quot;</span><br></pre></td></tr></table></figure><h4 id="查看配置信息"><a href="#查看配置信息" class="headerlink" title="查看配置信息"></a>查看配置信息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name</span><br><span class="line">git config --global user.email</span><br></pre></td></tr></table></figure><br><h3 id="Git-基础操作"><a href="#Git-基础操作" class="headerlink" title="Git 基础操作"></a>Git 基础操作</h3><h4 id="初始化-Git-仓库"><a href="#初始化-Git-仓库" class="headerlink" title="初始化 Git 仓库"></a>初始化 Git 仓库</h4><blockquote><p><strong>工作区(workspace)：</strong></p><ul><li><strong>未跟踪(untracked)：</strong>新创建文件。</li><li><strong>未暂存(unstaged)：</strong>修改已有文件。</li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><h4 id="把文件添加到仓库"><a href="#把文件添加到仓库" class="headerlink" title="把文件添加到仓库"></a>把文件添加到仓库</h4><blockquote><p><strong>工作区(workspace) –&gt; 暂存区(index)</strong></p><p><strong>已暂存(staged)：</strong>提交到仓库之前的缓存区。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;file&gt;</span><br></pre></td></tr></table></figure><h4 id="把文件提交到仓库"><a href="#把文件提交到仓库" class="headerlink" title="把文件提交到仓库"></a>把文件提交到仓库</h4><blockquote><p><strong>暂存区(index) –&gt; 本地仓库(repository)</strong></p><p><strong>说明：</strong>如果把文件提交到仓库后，工作区(workspace)无操作，则暂存区(index)是干净的。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;本次提交的说明&quot;</span><br></pre></td></tr></table></figure><h4 id="查看文件状态"><a href="#查看文件状态" class="headerlink" title="查看文件状态"></a>查看文件状态</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><h4 id="查看文件不同"><a href="#查看文件不同" class="headerlink" title="查看文件不同"></a>查看文件不同</h4><blockquote><ol><li><code>git diff</code>：是查看 working tree 与 index 的差别的。</li><li><code>git diff --cached</code>：是查看 index 与 repository 的差别的。</li><li><code>git diff HEAD</code>：是查看 working tree 和 repository 的差别的。其中：HEAD 代表的是最近的一次 commit 的信息。</li></ol></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;file&gt;</span><br></pre></td></tr></table></figure><h4 id="显示提交日志"><a href="#显示提交日志" class="headerlink" title="显示提交日志"></a>显示提交日志</h4><blockquote><p><strong>options</strong>：</p><ul><li><code>--all</code>：显示所有分支。</li><li><code>--pretty=oneline</code>：将提交信息显示为一行。</li><li><code>--abbrev-commit</code>：使得输出的commit更简短。</li><li><code>--graph</code>：以图的形式显示。</li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log [options]</span><br></pre></td></tr></table></figure><h4 id="查看历史命令"><a href="#查看历史命令" class="headerlink" title="查看历史命令"></a>查看历史命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><h4 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h4><blockquote><p><strong>无参：</strong>撤销工作区(workspace)的修改。</p><p><code>--staged</code>：撤销上传到暂存区(index)。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git restore [--staged] &lt;file&gt;</span><br></pre></td></tr></table></figure><br><h3 id="回退版本"><a href="#回退版本" class="headerlink" title="回退版本"></a>回退版本</h3><h4 id="回退上个版本"><a href="#回退上个版本" class="headerlink" title="回退上个版本"></a>回退上个版本</h4><blockquote><p>回退多个版本可以把 <code>^</code> 换成 <code>~&lt;回退版本数&gt;</code>。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></table></figure><h4 id="回退到指定版本"><a href="#回退到指定版本" class="headerlink" title="回退到指定版本"></a>回退到指定版本</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard &lt;commit id&gt;</span><br></pre></td></tr></table></figure><br><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><blockquote><p><strong>注意：从来没有被添加到版本库就被删除的文件，是无法恢复的！</strong></p><p><strong>文件修改后，与版本库不同时，再删除，此时options：</strong></p><ul><li><p><code>--cached</code>：仅删除暂存区里的文件。此时 commit ，会出现工作区存在修改后的删除文件，而版本库此文件被删除。</p></li><li><p><code>-f </code>：强制删除[工作区+暂存区]。此时 commit ，会出现工作区和版本库此文件都删除。</p></li></ul><p><strong>理解：</strong></p><ol><li><p><code>rm &lt;file&gt;</code> 可以在任何文件夹都可以用，包括不是git仓库的地方，是用来删除文件。如果用在git仓库里，则可以视为<strong>删除工作区的文件</strong>。</p></li><li><p><code>git rm &lt;file&gt;</code> 只能在git仓库里使用，是用来删除<strong>（工作区+暂存区）</strong>的文件用的，如果此文件被修改过则要加入参数 <code>-f</code> 来删除<strong>（工作区+暂存区）</strong>的文件。</p></li><li><p><code>git rm --cached &lt;file&gt;</code> 如果想<strong>仅删除暂存区</strong>里的文件可以用此命令，它不会删除工作区中的文件。</p></li></ol><p><strong>建议：</strong></p><ol><li><p>用 <code>rm</code> 或者鼠标点击的方式删除文件。</p></li><li><p>用命令 <code>git rm &lt;file&gt;</code> 确认删除文件。</p></li><li><p>用命令 <code>git restore &lt;file&gt;</code> 返回被删除的文件（无论文件修改与否，返回的都是未修改前的文件）。</p></li></ol></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm [options] &lt;file&gt;</span><br></pre></td></tr></table></figure><br><h3 id="关联远程库-GitHub"><a href="#关联远程库-GitHub" class="headerlink" title="关联远程库 GitHub"></a>关联远程库 GitHub</h3><blockquote><p>在新建空白 GitHub 仓库时，也会生成可以关联 git 的命令。</p><p><strong>repo-name：</strong>克隆仓库名。</p><p><strong>user-name：</strong>克隆仓库的用户名。</p><p><strong>server-name：</strong>基本上是 github.com。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@server-name:path/repo-name.git；</span><br></pre></td></tr></table></figure><br><h3 id="推送到-GitHub"><a href="#推送到-GitHub" class="headerlink" title="推送到 GitHub"></a>推送到 GitHub</h3><blockquote><p>把本地库的内容推送到远程，用 <code>git push</code> 命令，实际上是把当前分支 <strong>master</strong> 推送到远程。</p><p>由于远程库是空的，我们第一次推送 <strong>master</strong> 分支时，加上了 <code>-u</code> 参数，Git 不但会把本地的 <strong>master</strong> 分支内容推送的远程新的 <strong>master</strong> 分支，还会把本地的 <strong>master</strong> 分支和远程的 <strong>master</strong> 分支关联起来，在以后的推送或者拉取时就可以简化命令。</p><p><strong>origin：</strong>远程库的名称。</p></blockquote><h4 id="本地仓库推送到远程仓库"><a href="#本地仓库推送到远程仓库" class="headerlink" title="本地仓库推送到远程仓库"></a>本地仓库推送到远程仓库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push &lt;远程仓库名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br></pre></td></tr></table></figure><h4 id="初次推送"><a href="#初次推送" class="headerlink" title="初次推送"></a>初次推送</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h4 id="非初次推送"><a href="#非初次推送" class="headerlink" title="非初次推送"></a>非初次推送</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><br><h3 id="远程库操作"><a href="#远程库操作" class="headerlink" title="远程库操作"></a>远程库操作</h3><h4 id="查看远程库"><a href="#查看远程库" class="headerlink" title="查看远程库"></a>查看远程库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><h4 id="删除远程库"><a href="#删除远程库" class="headerlink" title="删除远程库"></a>删除远程库</h4><blockquote><p><strong>注意：</strong>此处的“删除”其实是解除了本地和远程的绑定关系，并不是物理上删除了远程库。远程库本身并没有任何改动。要真正删除远程库，需要登录到 GitHub ，在后台页面找到删除按钮再删除。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rm &lt;远程库名称&gt;</span><br></pre></td></tr></table></figure><h4 id="SSH-克隆远程库"><a href="#SSH-克隆远程库" class="headerlink" title="SSH 克隆远程库"></a>SSH 克隆远程库</h4><blockquote><p><strong>repo-name：</strong>克隆仓库名。</p><p><strong>user-name：</strong>克隆仓库的用户名。</p><p><strong>dir：</strong>要克隆到本地的文件目录，默认是”./“。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:user-name/repo-name.git [dir]</span><br></pre></td></tr></table></figure><h4 id="HTTPS-克隆远程库"><a href="#HTTPS-克隆远程库" class="headerlink" title="HTTPS 克隆远程库"></a>HTTPS 克隆远程库</h4><blockquote><p><strong>https-link：</strong>克隆仓库的 <code>https</code> 链接。</p><p><strong>dir：</strong>要克隆到本地的文件目录，默认是”./“。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https-link [dir]</span><br></pre></td></tr></table></figure><br><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><h4 id="新建分支"><a href="#新建分支" class="headerlink" title="新建分支"></a>新建分支</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch &lt;分支名&gt;</span><br></pre></td></tr></table></figure><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><blockquote><p><code>-c</code>: 新建分支并切换到该分支。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git switch [-c] &lt;分支名&gt;</span><br></pre></td></tr></table></figure><h4 id="查看当前分支"><a href="#查看当前分支" class="headerlink" title="查看当前分支"></a>查看当前分支</h4><blockquote><p>当前分支会带”*“号。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><blockquote><p><code>git merge</code> 命令用于合并指定分支到当前分支。</p><p><strong>Fast-forward：</strong>合并是“快进模式”，也就是直接把<strong>当前分支</strong>指向<strong>要合并分支</strong>的当前提交，所以合并速度非常快。但这种模式下，删除分支后，会丢掉分支信息。</p><p><code>--no-ff</code>：表示禁用 Fast forward，从分支历史上就可以看出分支信息。</p><p><code>-m</code>：合并要创建一个新的commit。</p><p><strong>分支策略：</strong></p><p>在实际开发中，我们应该按照几个基本原则进行分支管理：</p><p>首先， <code>master</code> 分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</p><p>那在哪干活呢？干活都在 <code>dev</code> 分支上，也就是说， <code>dev</code> 分支是不稳定的，到某个时候，比如1.0版本发布时，再把 <code>dev</code> 分支合并到 <code>master</code> 上，在 <code>master</code> 分支发布1.0版本；</p><p>你和你的小伙伴们每个人都在 <code>dev</code> 分支上干活，每个人都有自己的分支，时不时地往 <code>dev</code> 分支上合并就可以了。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge [options] &lt;要合并到当前分支的分支名&gt;</span><br></pre></td></tr></table></figure><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><blockquote><p><code>-d</code>：删除分支。</p><p><code>-D</code>：强制删除，用于没有合并的分支。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d/-D &lt;分支名&gt; </span><br></pre></td></tr></table></figure><h4 id="BUG-分支"><a href="#BUG-分支" class="headerlink" title="BUG 分支"></a>BUG 分支</h4><ul><li>封存当前工作现场（封存已跟踪文件）。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br></pre></td></tr></table></figure><ul><li>查看封存的工作现场。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash list</span><br></pre></td></tr></table></figure><ul><li><p>恢复封存的工作现场</p><ul><li>用 <code>git stash apply</code> 恢复，但是恢复后，stash内容并不删除，你需要用 <code>git stash drop</code> 来删除。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash apply &lt;恢复编号&gt;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash drop &lt;恢复编号&gt;</span><br></pre></td></tr></table></figure><ul><li>用 <code>git stash pop</code> ，恢复的同时把stash内容也删了。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash pop</span><br></pre></td></tr></table></figure></li><li><p>复制已有 bug 分支（如果是未提交的工作现场，要先封存或提交，才能复制已有 bug 分支）。</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick &lt;bug 版本号&gt;</span><br></pre></td></tr></table></figure><h4 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h4><p>因此，多人协作的工作模式通常是这样：</p><ol><li>首先，可以试图用 <code>git push origin &lt;branch-name&gt;</code> 推送自己的修改；</li><li>如果推送失败，则因为远程分支比你的本地更新，需要先用 <code>git pull</code> 试图合并；</li><li>如果合并有冲突，则解决冲突，并在本地提交；</li><li>没有冲突或者解决掉冲突后要 <code>add</code> 和 <code>commit</code> 后，再用 <code>git push origin &lt;branch-name&gt;</code> 推送就能成功！</li></ol><p>如果 <code>git pull</code> 提示 <code>no tracking information</code> ，则说明本地分支和远程分支的链接关系没有创建，用命令 <code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code> 。</p><p>这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p><h4 id="整理分支线"><a href="#整理分支线" class="headerlink" title="整理分支线"></a>整理分支线</h4><blockquote><p><strong>特点：</strong>把分叉的提交历史“整理”成一条直线，看上去更直观。缺点是本地的分叉提交已经被修改过了。</p><p><strong>使用：</strong>本地分支过时与远程分支。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase</span><br></pre></td></tr></table></figure><br><h3 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h3><h4 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h4><blockquote><ul><li>指定分支打标签，首先要切换到指定分支。</li><li><strong>commit id：</strong>指定版本号创建标签。</li><li><strong>options：</strong>用 <code>-a</code> 指定标签名， <code>-m</code> 指定说明文字。</li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag [options] &lt;标签名&gt; [commit id]</span><br></pre></td></tr></table></figure><h4 id="查看标签"><a href="#查看标签" class="headerlink" title="查看标签"></a>查看标签</h4><ul><li>查看所有标签</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure><ul><li>查看标签信息</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show &lt;标签名&gt;</span><br></pre></td></tr></table></figure><h4 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h4><ul><li>删除标签</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -d &lt;标签名&gt;</span><br></pre></td></tr></table></figure><ul><li>删除远程标签</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin :refs/tags/&lt;标签名&gt;</span><br></pre></td></tr></table></figure><h4 id="推送标签"><a href="#推送标签" class="headerlink" title="推送标签"></a>推送标签</h4><ul><li>推送指定标签</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin &lt;标签名&gt;</span><br></pre></td></tr></table></figure><ul><li>推送全部标签</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure><br><h3 id="忽略特色文件"><a href="#忽略特色文件" class="headerlink" title="忽略特色文件"></a>忽略特色文件</h3><p>在Git工作区的根目录下创建一个特殊的 <code>.gitignore</code> 文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。</p><p>不需要从头写 <code>.gitignore</code> 文件，GitHub 已经为我们准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览：<a href="https://github.com/github/gitignore%E3%80%82">https://github.com/github/gitignore。</a></p><p>忽略文件的原则是：</p><ol><li>忽略操作系统自动生成的文件，比如缩略图等；</li><li>忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如 Java 编译产生的 <code>.class</code> 文件；</li><li>忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。</li></ol><p>如果你想添加被忽略的文件，可以用 <code>-f</code> 强制添加到 Git；或者你发现，可能是 <code>.gitignore</code> 写得有问题，需要找出来到底哪个规则写错了，可以用 <code>git check-ignore</code> 命令检查：</p><p>把指定文件排除在 <code>.gitignore</code> 规则外的写法就是 <code>!</code> + 文件名。</p><br><h3 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h3><blockquote><p>配置Git的时候，加上 <code>--global</code> 是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。</p><p>每个仓库的Git配置文件都放在 <code>.git/config</code> 文件中。</p><p>当前用户的Git配置文件放在用户主目录下的一个隐藏文件<code>.gitconfig</code>中。</p></blockquote><ul><li>配置命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.&lt;别名&gt; &lt;原名&gt;</span><br></pre></td></tr></table></figure><ul><li>配置一个 <code>git last</code> ，让其显示最后一次提交信息</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.last &#x27;log -1&#x27;</span><br></pre></td></tr></table></figure><ul><li>查看日志配置别名</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.lg &quot;log --color --graph --pretty=format:&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27; --abbrev-commit&quot;</span><br></pre></td></tr></table></figure><br><h3 id="Git-技巧"><a href="#Git-技巧" class="headerlink" title="Git 技巧"></a>Git 技巧</h3><ul><li><p>使用命令 <code>git add &lt;file&gt;</code> ，注意，可反复多次使用，添加多个文件；</p></li><li><p>使用命令 <code>git commit -m &lt;message&gt;</code> ，完成提交文件到本地仓库。</p></li></ul><ul><li><p>要随时掌握工作区的状态，使用 <code>git status</code> 命令。</p></li><li><p>如果 <code>git status</code> 告诉你有文件被修改过，用 <code>git diff</code> 可以查看修改内容。</p></li><li><p> <code>HEAD</code> 指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令 <code>git reset --hard commit_id</code>。</p></li><li><p>穿梭前，用 <code>git log</code> 可以查看提交历史，以便确定要回退到哪个版本。</p></li><li><p>要重返未来，用 <code>git reflog</code> 查看命令历史，以便确定要回到未来的哪个版本。</p></li><li><p>每次修改，如果不用<code>git add</code>到暂存区，那就不会加入到<code>commit</code>中。</p></li><li><p>撤销修改操作：</p><ul><li>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令 <code>git restore &lt;file&gt;</code>。</li><li>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令 <code>git restore --staged &lt;file&gt;</code>，就回到了场景1，第二步按场景1操作。</li><li>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，回退版本，不过前提是没有推送到远程库。</li></ul></li><li><p>命令 <code>git rm</code> 用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失<strong>最近一次提交后你修改的内容</strong>。</p></li><li><p>建议的删除操作：</p><ol><li><p>用 <code>rm</code> 或者鼠标点击的方式删除文件。</p></li><li><p>用命令 <code>git rm &lt;file&gt;</code> 确认删除文件。</p></li><li><p>用命令 <code>git restore &lt;file&gt;</code> 返回被删除的文件（无论文件修改与否，返回的都是未修改前的文件）。</p></li></ol></li><li><p>要关联一个远程库，使用命令 <code>git remote add origin git@server-name:path/repo-name.git</code> ；</p></li><li><p>关联一个远程库时必须给远程库指定一个名字， <code>origin</code> 是默认习惯命名；</p></li><li><p>关联后，使用命令 <code>git push -u origin master</code> 第一次推送master分支的所有内容；</p></li><li><p>此后，每次本地提交后，只要有必要，就可以使用命令 <code>git push origin master</code> 推送最新修改；</p></li><li><p>要克隆一个仓库，首先必须知道仓库的地址，然后使用<code>git clone</code>命令克隆。</p></li><li><p>Git支持多种协议，包括<code>https</code>，但<code>ssh</code>协议速度最快。</p></li><li><p>Git鼓励大量使用分支：</p><ul><li>查看分支：<code>git branch</code></li><li>创建分支：<code>git branch &lt;name&gt;</code></li><li>切换分支：<code>git checkout &lt;name&gt;</code> 或者 <code>git switch &lt;name&gt;</code></li><li>创建+切换分支：<code>git checkout -b &lt;name&gt;</code> 或者 <code>git switch -c &lt;name&gt;</code></li><li>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></li><li>删除分支：<code>git branch -d &lt;name&gt;</code></li><li>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。用<code>git log --graph</code>命令可以看到分支合并图。</li></ul></li></ul><ul><li>合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而<code>fast forward</code> 合并就看不出来曾经做过合并。</li><li>bug 分支<ul><li>修复 bug 时，我们会通过创建新的 bug 分支进行修复，然后合并，最后删除；</li><li>当手头工作没有完成时，先把工作现场 <code>git stash</code> 一下，然后去修复 bug ，修复后，再 <code>git stash pop</code> ，回到工作现场；</li><li>在 master 分支上修复的 bug ，想要合并到当前 dev 分支，可以用 <code>git cherry-pick &lt;commit&gt;</code> 命令，把 bug 提交的修改“复制”到当前分支，避免重复劳动。</li></ul></li><li>开发一个新feature，最好新建一个分支；如果要丢弃一个没有被合并过的分支，可以通过 <code>git branch -D &lt;name&gt;</code> 强行删除。</li><li>多人协作<ul><li>查看远程库信息，使用 <code>git remote -v</code> ；</li><li>本地新建的分支如果不推送到远程，对其他人就是不可见的；</li><li>从本地推送分支，使用 <code>git push origin branch-name</code> ，如果推送失败，先用 <code>git pull</code> 抓取远程的新提交；</li><li>在本地创建和远程分支对应的分支，使用 <code>git switch -c branch-name origin/branch-name</code> ，本地和远程分支的名称最好一致；</li><li>建立本地分支和远程分支的关联，使用 <code>git branch --set-upstream branch-name origin/branch-name</code> ；</li><li>从远程抓取分支，使用 <code>git pull</code> ，如果有冲突，要先处理冲突。</li></ul></li><li><code>rebase</code> 操作可以把本地未 push 的分叉提交历史整理成直线；<code>rebase</code> 的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。</li><li>标签管理<ul><li>命令 <code>git tag &lt;tagname&gt;</code> 用于新建一个标签，默认为 <code>HEAD</code> ，也可以指定一个 commit id；</li><li>命令 <code>git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;</code> 可以指定标签信息；</li><li>命令 <code>git tag</code> 可以查看所有标签；</li><li>命令 <code>git push origin &lt;tagname&gt;</code> 可以推送一个本地标签；</li><li>命令 <code>git push origin --tags</code> 可以推送全部未推送过的本地标签；</li><li>命令 <code>git tag -d &lt;tagname&gt;</code> 可以删除一个本地标签；</li><li>命令 <code>git push origin :refs/tags/&lt;tagname&gt;</code> 可以删除一个远程标签。</li></ul></li><li>在GitHub上，可以任意Fork开源仓库；自己拥有Fork后的仓库的读写权限；可以推送pull request给官方仓库来贡献代码。</li><li>忽略某些文件时，需要编写 <code>.gitignore</code> ；<code>.gitignore</code> 文件本身要放到版本库里，并且可以对 <code>.gitignore</code> 做版本管理！</li></ul><br><br><p><strong>📌最后：希望本文能够给您提供帮助，文章中有不懂或不正确的地方，请在下方评论区💬留言！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo yilia 图片无法显示问题</title>
      <link href="/archives/fbe14a8f.html"/>
      <url>/archives/fbe14a8f.html</url>
      
        <content type="html"><![CDATA[<h3 id="问题说明"><a href="#问题说明" class="headerlink" title="问题说明"></a>问题说明</h3><p><strong>关于 Hexo yilia 的图片无法正常显示的问题，从网上总结出三种解决方案：</strong></p><p>👉 第一种方案将图片放置在 <code>blog/source/image/</code>（博客根目录）下，会导致图片在文章展开时无法显示。（无法解决问题）</p><p>👉 第二种方案是通过下载 <code>hexo-asset-image</code> 来解决问题，图片依旧无法显示。（无法解决问题）</p><p>👉 第三种方案是通过下载 <a href="https://github.com/CodeFalling/hexo-asset-image">https://github.com/CodeFalling/hexo-asset-image</a> 来解决问题，图片可以正常显示。（可以解决问题）</p><br><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>将博客根目录下的 <code>_config.yml</code> 中的 <code>post _asset_folder: false</code> 改为：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>下载 <code>hexo-asset-image</code>。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line">cnpm install https://github.com/CodeFalling/hexo-asset-image</span><br></pre></td></tr></table></figure><ul><li>新建文章。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20220124B01N001.png" alt="新建文章"></p><ul><li>会出现和文章同名的文件夹，把图片素材放到此文件夹。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20220124B01N002.png" alt="同名文件夹"></p><ul><li>最后在 <code>.md</code> 文件中插入图片即可正常显示。</li></ul><p><strong>注意：插入的图片路径要用相对路径.</strong></p><ul><li>最后再清理、部署、启动服务器即可。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><br><h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><ol><li>设置路径时，应当用 “<code>./hexoimage/test.jpg</code>” 而不是 “<code>.\hexoimage\test.jpg</code>”。虽然在 Typora 上图片都能正常显示，但是部署到服务器会导致图片名称乱码，因而无法正常显示。</li><li>尽量不要使用 “<code>hexoimage/test.jpg</code>” 或 “<code>/hexoimage/test.jpg</code>” 虽然在 Typora 上都能正常显示，但是部署到服务器可能会出现问题。</li></ol><p><strong>例如：</strong></p><ul><li>下图中的 “<code>.%5Chexoimage%5Ctest.jpg</code>” 就是乱码的 “<code>test.jpg</code>”</li></ul><p><img src="https://cdn.jsdelivr.net/gh/hellovie/picgo/img/T20220124B01N003.png" alt="乱码路径"></p><br><br><p><strong>📌最后：希望本文能够给您提供帮助，文章中有不懂或不正确的地方，请在下方评论区💬留言！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 疑难杂症 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Yilia </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欢迎来到我的博客</title>
      <link href="/archives/b250e9bb.html"/>
      <url>/archives/b250e9bb.html</url>
      
        <content type="html"><![CDATA[<p><strong>欢迎来到我的个人博客</strong></p><p>我将在这里记录：</p><p>👉 我的学习笔记，它可能来自一个视频▶️、一本书籍📖或一个网站🌐。</p><p>👉 我的开发笔记，它可能是一个Demo🗃️、一个解决方案💡或一个完整的项目🗄️。</p><p>👉 我的问题笔记，它可以是我遇到的任何问题❔。</p><p>希望在提高🆙自己的同时，也能对你有所帮助✊。</p><br><br><p>欢迎大家留言📝，指正我的错误❌。</p><p>也可以通过邮箱✉️互相交流学习经验！</p>]]></content>
      
      
      <categories>
          
          <category> 日常分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 关于我 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
